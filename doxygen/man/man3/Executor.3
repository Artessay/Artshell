.TH "Executor" 3 "2022年 八月 13日 星期六" "Version 1.0.0" "My Shell" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Executor
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <Executor\&.h>\fP
.SS "Public 成员函数"

.in +1c
.ti -1c
.RI "\fBExecutor\fP (\fBConsole\fP *model, \fBDisplay\fP *view)"
.br
.ti -1c
.RI "virtual \fB~Executor\fP ()"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.RI "执行器命令执行函数 "
.in -1c
.SS "Protected 类型"

.in +1c
.ti -1c
.RI "typedef \fBsh_err_t\fP(Executor::* \fBMemFuncPtr\fP) (const int argc, char *const argv[], char *const env[]) const"
.br
.in -1c
.SS "Protected 成员函数"

.in +1c
.ti -1c
.RI "\fBsh_err_t\fP \fBshell_function\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_cd\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_pwd\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_time\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_clr\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_dir\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_set\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_echo\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_help\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_exit\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_date\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_clear\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_env\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_who\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_mkdir\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_rmdir\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_bg\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_fg\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_jobs\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_exec\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_test\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_umask\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.ti -1c
.RI "\fBsh_err_t\fP \fBexecute_myshell\fP (const int argc, char *const argv[], char *const env[]) const"
.br
.in -1c
.SS "静态 Protected 成员函数"

.in +1c
.ti -1c
.RI "static bool \fBtest_file_state\fP (const int argc, const char *const argv[])"
.br
.ti -1c
.RI "static bool \fBtest_number_compare\fP (const int argc, const char *const argv[])"
.br
.ti -1c
.RI "static bool \fBtest_string_compare\fP (const int argc, const char *const argv[])"
.br
.in -1c
.SS "Protected 属性"

.in +1c
.ti -1c
.RI "\fBMemFuncPtr\fP \fBFunctionArray\fP [\fBFunctionNumber\fP]"
.br
.in -1c
.SS "Private 属性"

.in +1c
.ti -1c
.RI "\fBConsole\fP * \fBconsole_\fP"
.br
.ti -1c
.RI "\fBDisplay\fP * \fBdisplay_\fP"
.br
.in -1c
.SH "详细描述"
.PP 
在文件 \fBExecutor\&.h\fP 第 \fB22\fP 行定义\&.
.SH "成员类型定义说明"
.PP 
.SS "typedef \fBsh_err_t\fP(Executor::* Executor::MemFuncPtr) (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
从命令到对应函数的映射，采用红黑树的STL实现 定义函数指针类型 
.PP
在文件 \fBExecutor\&.h\fP 第 \fB104\fP 行定义\&.
.SH "构造及析构函数说明"
.PP 
.SS "Executor::Executor (\fBConsole\fP * model, \fBDisplay\fP * view)"
定义函数指针数组
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB42\fP 行定义\&.
.SS "Executor::~Executor ()\fC [virtual]\fP"

.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB72\fP 行定义\&.
.SH "成员函数说明"
.PP 
.SS "\fBsh_err_t\fP Executor::execute (const int argc, char *const argv[], char *const env[]) const"

.PP
执行器命令执行函数 
.PP
\fB参数\fP
.RS 4
\fIargc\fP 传入参数个数 
.br
\fIargv\fP 传入具体参数 
.br
\fIenv\fP 环境变量 
.RE
.PP
\fB返回\fP
.RS 4
sh_err_t 返回执行情况 
.RE
.PP
\fB版本\fP
.RS 4
0\&.1 
.RE
.PP
\fB作者\fP
.RS 4
邱日宏 (3200105842@zju.edu.cn) 
.RE
.PP
\fB日期\fP
.RS 4
2022-07-04 
.RE
.PP
\fB版权所有\fP
.RS 4
Copyright (c) 2022 
.RE
.PP

.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB76\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_bg (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
将被挂起的作业转到后台 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB585\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_cd (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
更改目录 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB251\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_clear (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
清屏 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB524\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_clr (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
清屏 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB316\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_date (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
显示当前日期 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB499\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_dir (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"

.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB324\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_echo (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"

.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB445\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_env (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
获取系统环境变量 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB531\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_exec (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
执行命令替换当前进程 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB639\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_exit (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
退出shell 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB493\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_fg (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
将后台作业转到前台 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB611\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_help (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"

.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB462\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_jobs (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
显示所有作业 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB630\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_mkdir (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
创建新目录 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB555\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_myshell (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
myshell 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB739\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_pwd (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
显示当前目录 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB300\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_rmdir (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
移除空目录 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB571\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_set (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"

.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB437\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_test (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
检测命令执行结构 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB657\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_time (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
显示当前日期 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB308\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_umask (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
设置掩码 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB702\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::execute_who (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"
获取当前登入用户信息 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB547\fP 行定义\&.
.SS "\fBsh_err_t\fP Executor::shell_function (const int argc, char *const argv[], char *const env[]) const\fC [protected]\fP"

.PP
\fB参见\fP
.RS 4
显示器 选择执行函数并执行 
.RE
.PP
二分查找匹配内部命令
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB168\fP 行定义\&.
.SS "bool Executor::test_file_state (const int argc, const char *const argv[])\fC [static]\fP, \fC [protected]\fP"
文件测试 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB856\fP 行定义\&.
.SS "bool Executor::test_number_compare (const int argc, const char *const argv[])\fC [static]\fP, \fC [protected]\fP"
文件测试 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB966\fP 行定义\&.
.SS "bool Executor::test_string_compare (const int argc, const char *const argv[])\fC [static]\fP, \fC [protected]\fP"
文件测试 
.PP
在文件 \fBExecutor\&.cpp\fP 第 \fB1008\fP 行定义\&.
.SH "类成员变量说明"
.PP 
.SS "\fBConsole\fP* Executor::console_\fC [private]\fP"

.PP
在文件 \fBExecutor\&.h\fP 第 \fB26\fP 行定义\&.
.SS "\fBDisplay\fP* Executor::display_\fC [private]\fP"

.PP
\fB参见\fP
.RS 4
控制台 
.RE
.PP

.PP
在文件 \fBExecutor\&.h\fP 第 \fB28\fP 行定义\&.
.SS "\fBMemFuncPtr\fP Executor::FunctionArray[\fBFunctionNumber\fP]\fC [protected]\fP"
创建函数指针数组 
.PP
在文件 \fBExecutor\&.h\fP 第 \fB106\fP 行定义\&.

.SH "作者"
.PP 
由 Doyxgen 通过分析 My Shell 的 源代码自动生成\&.
