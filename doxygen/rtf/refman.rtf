{\rtf1\ansi\ansicpg936\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset134\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset134\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset134\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment My Shell  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1.0.0 \par
}}My Shell}
{\comment \'D6\'C6\'D7\'F7\'D5\'DF doxygen 1.9.4.}
{\creatim \yr2022\mo8\dy13\hr0\min31\sec43}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt My Shell}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
\'B0\'E6\'B1\'BE 1.0.0\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt 2022\'C4\'EA \'B0\'CB\'D4\'C2 13\'C8\'D5 \'D0\'C7\'C6\'DA\'C1\'F9 }}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'C4\'BF\'C2\'BC\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'BC\'BC\'CA\'F5\'CE\'C4\'B5\'B5{\tc \v \'BC\'BC\'CA\'F5\'CE\'C4\'B5\'B5}\par \pard\plain 
{\bkmkstart AAAAAAAAJR}
{\bkmkend AAAAAAAAJR}
\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'D3\'C3\'BB\'A7\'CA\'D6\'B2\'E1{\tc \v \'D3\'C3\'BB\'A7\'CA\'D6\'B2\'E1}\par \pard\plain 
{\bkmkstart AAAAAAAAJS}
{\bkmkend AAAAAAAAJS}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
Artshell{\tc \v Artshell}\par \pard\plain 
{\bkmkstart AAAAAAAAJT}
{\bkmkend AAAAAAAAJT}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
MyShell, version 1.0.0-release (x86_64-pc-linux-gnu)\par
MyShell\'C4\'DA\'B2\'BF\'D6\'B8\'C1\'EE\'C1\'D0\'B1\'ED\'A3\'BA\par
1) bg <job> \'A1\'AA\'A1\'AA\'BD\'AB\'B1\'BB\'B9\'D2\'C6\'F0\'B5\'C4\'D7\'F7\'D2\'B5<job>\'D7\'AA\'B5\'BD\'BA\'F3\'CC\'A8\'A1\'A3\'C8\'E7\'B9\'FB\'C3\'BB\'D3\'D0<job>\'B2\'CE\'CA\'FD\'A3\'AC\'D4\'F2\'C4\'AC\'C8\'CF\'BD\'AB\'B5\'B1\'C7\'B0\'BD\'F8\'B3\'CC\'B7\'C5\'B5\'BD\'BA\'F3\'CC\'A8\'D4\'CB\'D0\'D0\'A1\'A3\par
2) cd <directory> \'A1\'AA\'A1\'AA\'B0\'D1\'B5\'B1\'C7\'B0\'C4\'AC\'C8\'CF\'C4\'BF\'C2\'BC\'B8\'C4\'B1\'E4\'CE\'AA<directory>\'A1\'A3\'C8\'E7\'B9\'FB\'C3\'BB\'D3\'D0<directory>\'B2\'CE\'CA\'FD\'A3\'AC\'D4\'F2\'CF\'D4\'CA\'BE\'D6\'F7\'C4\'BF\'C2\'BC\'A1\'A3\par
3) clr \'A1\'AA\'A1\'AA\'C7\'E5\'C6\'C1\'A1\'A3\par
4) dir <directory> \'A1\'AA\'A1\'AA\'C1\'D0\'B3\'F6\'C4\'BF\'C2\'BC<directory>\'B5\'C4\'C4\'DA\'C8\'DD\'A1\'A3\'C8\'E7\'B9\'FB\'C3\'BB\'D3\'D0<directory>\'B2\'CE\'CA\'FD\'A3\'AC\'D4\'F2\'CF\'D4\'CA\'BE\'B5\'B1\'C7\'B0\'C4\'BF\'C2\'BC\'C4\'DA\'C8\'DD\'A1\'A3\par
5) echo <comment> \'A1\'AA\'A1\'AA\'D4\'DA\'C6\'C1\'C4\'BB\'C9\'CF\'CF\'D4\'CA\'BE<comment>\'B2\'A2\'BB\'BB\'D0\'D0\'A3\'AC\'B6\'E0\'B8\'F6\'BF\'D5\'B8\'F1\'BA\'CD\'D6\'C6\'B1\'ED\'B7\'FB\'BD\'AB\'B1\'BB\'CB\'F5\'BC\'F5\'CE\'AA\'D2\'BB\'B8\'F6\'BF\'D5\'B8\'F1\'A1\'A3\par
6) exec <command> \'A1\'AA\'A1\'AA\'D6\'B4\'D0\'D0\'C3\'FC\'C1\'EE<command>\'CC\'E6\'BB\'BB\'B5\'B1\'C7\'B0\'D4\'CB\'D0\'D0\'D5\'E2\'B8\'F6\'C3\'FC\'C1\'EE\'B5\'C4\'BD\'F8\'B3\'CC\'A1\'A3\par
7) exit \'A1\'AA\'A1\'AA\'CD\'CB\'B3\'F6shell\'A1\'A3\par
8) fg <job> \'A1\'AA\'A1\'AA\'BD\'AB\'BA\'F3\'CC\'A8\'D4\'CB\'D0\'D0\'BB\'F2\'B9\'D2\'C6\'F0\'B5\'C4\'D7\'F7\'D2\'B5<job>\'C7\'D0\'BB\'BB\'B5\'BD\'C7\'B0\'CC\'A8\'D4\'CB\'D0\'D0\'A1\'A3\'C8\'E7\'B9\'FB\'C3\'BB\'D3\'D0<job>\'B2\'CE\'CA\'FD\'A3\'AC\'D4\'F2\'C4\'AC\'C8\'CF\'BD\'AB\'B5\'B1\'C7\'B0\'BD\'F8\'B3\'CC\'B7\'C5\'B5\'BD\'BA\'F3\'CC\'A8\'D4\'CB\'D0\'D0\'A1\'A3\par
9) help \'A1\'AA\'A1\'AA\'CF\'D4\'CA\'BE\'D3\'C3\'BB\'A7\'CA\'D6\'B2\'E1\'A3\'AC\'BC\'B4\'B1\'BE\'CE\'C4\'B5\'B5\'A1\'A3\par
10) jobs <job> \'A1\'AA\'A1\'AA\'CF\'D4\'CA\'BE\'CB\'F9\'D3\'D0\'B9\'D2\'C6\'F0\'B5\'C4\'BA\'CD\'BA\'F3\'CC\'A8\'BD\'F8\'B3\'CC\'B5\'C4\'D7\'F7\'D2\'B5\'BA\'C5\'BC\'B0\'D7\'B4\'CC\'AC\'A1\'A3\'C8\'E7\'B9\'FB\'C3\'BB\'D3\'D0\'C1\'D0\'B1\'ED\'A3\'AC\'D4\'F2\'CF\'D4\'CA\'BE\'B5\'B1\'C7\'B0\'BD\'F8\'B3\'CC\'B5\'C4\'D7\'B4\'CC\'AC\'A1\'A3\par
11) pwd \'A1\'AA\'A1\'AA\'CF\'D4\'CA\'BE\'B5\'B1\'C7\'B0\'C4\'BF\'C2\'BC\'A1\'A3\par
12) set \'A1\'AA\'A1\'AA\'C1\'D0\'B3\'F6\'CB\'F9\'D3\'D0\'B5\'C4\'BB\'B7\'BE\'B3\'B1\'E4\'C1\'BF\'A1\'A3\par
13) test <expression> \'A1\'AA\'A1\'AA\'BC\'EC\'B2\'E2\'B1\'ED\'B4\'EF\'CA\'BD<expression>\'B7\'B5\'BB\'D8true\'BB\'B9\'CA\'C7false\'A1\'A3\par
14) time \'A1\'AA\'A1\'AA\'CF\'D4\'CA\'BE\'B5\'B1\'C7\'B0\'CA\'B1\'BC\'E4\'A1\'A3\par
15) umask <mask> \'A1\'AA\'A1\'AA\'C9\'E8\'B6\'A8\'D0\'C2\'B4\'B4\'BD\'A8\'CE\'C4\'BC\'FE\'BB\'F2\'C4\'BF\'C2\'BC\'B5\'C4\'B7\'C3\'CE\'CA\'CC\'D8\'C8\'A8\'A1\'A3\'C8\'E7\'B9\'FB\'C3\'BB\'D3\'D0<mask>\'B2\'CE\'CA\'FD\'A3\'AC\'D4\'F2\'CF\'D4\'CA\'BE\'B5\'B1\'C7\'B0\'C9\'E8\'D6\'C3\'B5\'C4\'D1\'DA\'C2\'EB\'A1\'A3\par
\'B8\'FC\'B6\'E0\'CF\'EA\'CF\'B8\'D0\'C5\'CF\'A2\'C7\'EB\'B2\'CE\'BC\'FB{\b E:/Artshell/doc}/\'D3\'C3\'BB\'A7\'CA\'D6\'B2\'E1.md "\'D3\'C3\'BB\'A7\'CA\'D6\'B2\'E1" \par
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'C3\'FC\'C3\'FB\'BF\'D5\'BC\'E4\'CB\'F7\'D2\'FD\par \pard\plain 
{\tc \v \'C3\'FC\'C3\'FB\'BF\'D5\'BC\'E4\'CB\'F7\'D2\'FD}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'C3\'FC\'C3\'FB\'BF\'D5\'BC\'E4\'C1\'D0\'B1\'ED\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'D5\'E2\'C0\'EF\'C1\'D0\'B3\'F6\'C1\'CB\'CB\'F9\'D3\'D0\'C3\'FC\'C3\'FB\'BF\'D5\'BC\'E4\'B6\'A8\'D2\'E5,\'B8\'BD\'B4\'F8\'BC\'F2\'D2\'AA\'CB\'B5\'C3\'F7:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b SHELL} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAJL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'BC\'CC\'B3\'D0\'B9\'D8\'CF\'B5\'CB\'F7\'D2\'FD\par \pard\plain 
{\tc \v \'BC\'CC\'B3\'D0\'B9\'D8\'CF\'B5\'CB\'F7\'D2\'FD}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'C0\'E0\'BC\'CC\'B3\'D0\'B9\'D8\'CF\'B5\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'B4\'CB\'BC\'CC\'B3\'D0\'B9\'D8\'CF\'B5\'C1\'D0\'B1\'ED\'B0\'B4\'D7\'D6\'B5\'E4\'CB\'B3\'D0\'F2\'B4\'D6\'C2\'D4\'B5\'C4\'C5\'C5\'D0\'F2: }
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
Console\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAED \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Display\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::exception
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
BinaryHeap< T >::ExtractEmptyHeap\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
BinaryHeap< T >::OutOfMemory\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Executor\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Heap< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHX \\*MERGEFORMAT}{\fldrslt pagenum}}
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
BinaryHeap< T >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
Heap< unsigned int >\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
job_unit\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
Parser\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
ProcessManager\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'C0\'E0\'CB\'F7\'D2\'FD\par \pard\plain 
{\tc \v \'C0\'E0\'CB\'F7\'D2\'FD}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'C0\'E0\'C1\'D0\'B1\'ED\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'D5\'E2\'C0\'EF\'C1\'D0\'B3\'F6\'C1\'CB\'CB\'F9\'D3\'D0\'C0\'E0\'A1\'A2\'BD\'E1\'B9\'B9\'A1\'A2\'C1\'AA\'BA\'CF\'D2\'D4\'BC\'B0\'BD\'D3\'BF\'DA\'B6\'A8\'D2\'E5\'B5\'C8\'A3\'AC\'B2\'A2\'B8\'BD\'B4\'F8\'BC\'F2\'D2\'AA\'CB\'B5\'C3\'F7:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b BinaryHeap< T >} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'FE\'CF\'EE\'B6\'D1\'A3\'AC\'D0\'A1\'B8\'F9\'B6\'D1 })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Console} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BF\'D8\'D6\'C6\'CC\'A8 \'B4\'E6\'B4\'A2\'B1\'D8\'D2\'AA\'B5\'C4\'BB\'B7\'BE\'B3\'B1\'E4\'C1\'BF\'D2\'D4\'BC\'B0\'E4\'D6\'C8\'BE\'D3\'C3\'BB\'A7\'C7\'B0\'B6\'CB\'CB\'F9\'D0\'E8\'D2\'AA\'B5\'C4\'CA\'FD\'BE\'DD })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAED \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Display} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Executor} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAGP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b BinaryHeap< T >::ExtractEmptyHeap} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Heap< T >} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B3\'E9\'CF\'F3\'B6\'D1 })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAHX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b job_unit} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b BinaryHeap< T >::OutOfMemory} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAEC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b Parser} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b ProcessManager} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAIZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CE\'C4\'BC\'FE\'CB\'F7\'D2\'FD\par \pard\plain 
{\tc \v \'CE\'C4\'BC\'FE\'CB\'F7\'D2\'FD}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CE\'C4\'BC\'FE\'C1\'D0\'B1\'ED\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'D5\'E2\'C0\'EF\'C1\'D0\'B3\'F6\'C1\'CB\'CB\'F9\'D3\'D0\'CE\'C4\'BC\'FE\'A3\'AC\'B2\'A2\'B8\'BD\'B4\'F8\'BC\'F2\'D2\'AA\'CB\'B5\'C3\'F7:}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b main.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D6\'F7\'BA\'AF\'CA\'FD })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACM \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b BinaryHeap.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'FE\'B2\'E6\'B6\'D1 })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b common.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B9\'B2\'CF\'ED\'BA\'AF\'CA\'FD\'BF\'E2 })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b config.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b Console.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b Display.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b Executor.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b Heap.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'D1\'A3\'AC\'B3\'E9\'CF\'F3\'C0\'E0 })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b myshell.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Myshell\'CD\'B7\'CE\'C4\'BC\'FE \'B0\'FC\'BA\'AC\'C1\'CBmyshell.cpp\'D6\'D0\'CB\'F9\'D0\'E8\'D2\'AA\'D2\'FD\'D3\'C3\'B5\'C4\'CB\'F9\'D3\'D0\'D7\'D4\'B6\'A8\'D2\'E5\'C0\'E0 })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b Parser.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D3\'EF\'B7\'A8\'B7\'D6\'CE\'F6 })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b inc/{\b ProcessManager.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BD\'F8\'B3\'CC\'B9\'DC\'C0\'ED })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b common.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B9\'B2\'CF\'ED\'BA\'AF\'CA\'FD\'BF\'E2 })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACP \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b Console.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACS \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b Display.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b Executor.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACW \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b lexer.l} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACZ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b myshell.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Myshell\'B3\'CC\'D0\'F2\'B5\'C4main\'BA\'AF\'CA\'FD\'A3\'AC\'B8\'BA\'D4\'F0\'B5\'F7\'D3\'C3\'B8\'F7\'B8\'F6\'BD\'D3\'BF\'DA\'B2\'A2\'CA\'B5\'CF\'D6myshell\'B9\'A6\'C4\'DC })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b Parser.cpp} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D3\'EF\'B7\'A8\'B7\'D6\'CE\'F6 })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b src/{\b ProcessManager.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAADK \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'C3\'FC\'C3\'FB\'BF\'D5\'BC\'E4\'CE\'C4\'B5\'B5\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
SHELL \'C3\'FC\'C3\'FB\'BF\'D5\'BC\'E4\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v SHELL}
{\xe \v SHELL}
{\bkmkstart AAAAAAAAJL}
{\bkmkend AAAAAAAAJL}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b shell_setup} (int argc, char *argv[], char *env[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C6\'F4\'B6\'AFshell }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b shell_loop} ({\b Console} *model, {\b Display} *view, {\b Executor} *controller, char *env[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BD\'F8\'C8\'EBshell\'D1\'AD\'BB\'B7 }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v shell_loop\:SHELL}
{\xe \v SHELL\:shell_loop}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int SHELL::shell_loop ({\b Console} *  {\i model}, {\b Display} *  {\i view}, {\b Executor} *  {\i controller}, char *  {\i env}[])}}
\par
{\bkmkstart AAAAAAAAJM}
{\bkmkend AAAAAAAAJM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BD\'F8\'C8\'EBshell\'D1\'AD\'BB\'B7 }}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b myshell.cpp} \'B5\'DA {\b 71} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "namespace_s_h_e_l_l_a347c8439e17672e8339a6590ad1ecb41_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "namespace_s_h_e_l_l_a347c8439e17672e8339a6590ad1ecb41_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v shell_setup\:SHELL}
{\xe \v SHELL\:shell_setup}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int SHELL::shell_setup (int  {\i argc}, char *  {\i argv}[], char *  {\i env}[])}}
\par
{\bkmkstart AAAAAAAAJN}
{\bkmkend AAAAAAAAJN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C6\'F4\'B6\'AFshell }}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b myshell.cpp} \'B5\'DA {\b 35} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "namespace_s_h_e_l_l_ab1906b6b08632cea09530f141a5b4208_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "namespace_s_h_e_l_l_ab1906b6b08632cea09530f141a5b4208_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'C0\'E0\'CB\'B5\'C3\'F7{\tc \v \'C0\'E0\'CB\'B5\'C3\'F7}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BinaryHeap< T > \'C4\'A3\'B0\'E5\'C0\'E0 \'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v BinaryHeap< T >}
{\xe \v BinaryHeap< T >}
{\bkmkstart AAAAAAAADL}
{\bkmkend AAAAAAAADL}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'FE\'CF\'EE\'B6\'D1\'A3\'AC\'D0\'A1\'B8\'F9\'B6\'D1 }}\par
{
{\f2 #include <BinaryHeap.h>}}\par
\'C0\'E0 BinaryHeap< T > \'BC\'CC\'B3\'D0\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_binary_heap__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
BinaryHeap< T > \'B5\'C4\'D0\'AD\'D7\'F7\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_binary_heap__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ExtractEmptyHeap}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b OutOfMemory}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b BinaryHeap} (size_t heap_capacity={\b HeapBlockSize})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b BinaryHeap} (T data[], size_t {\b size}, size_t heap_capacity={\b HeapBlockSize})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~BinaryHeap} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b build} (T data[], size_t {\b size})\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b insert} (T value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual T {\b top} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual T {\b extract} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b AllocMoreSpace} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected \'CA\'F4\'D0\'D4\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b capacity_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
T * {\b node}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b build_heap} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<class T>\par
class BinaryHeap< T >\par
}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'FE\'CF\'EE\'B6\'D1\'A3\'AC\'D0\'A1\'B8\'F9\'B6\'D1 \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C4\'A3\'B0\'E5\'B2\'CE\'CA\'FD\par}
\pard\plain \s80\li0\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i T} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-20 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 34} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B9\'B9\'D4\'EC\'BC\'B0\'CE\'F6\'B9\'B9\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v BinaryHeap\:BinaryHeap< T >}
{\xe \v BinaryHeap< T >\:BinaryHeap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > {\b BinaryHeap}< T >{\b ::BinaryHeap} (size_t  {\i heap_capacity} = {\f2 {\b HeapBlockSize}}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAADM}
{\bkmkend AAAAAAAADM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 41} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v BinaryHeap\:BinaryHeap< T >}
{\xe \v BinaryHeap< T >\:BinaryHeap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > {\b BinaryHeap}< T >{\b ::BinaryHeap} (T  {\i data}[], size_t  {\i size}, size_t  {\i heap_capacity} = {\f2 {\b HeapBlockSize}}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAADN}
{\bkmkend AAAAAAAADN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 51} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_binary_heap_ad28ac023f41645648b89515ec89af3be_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ~BinaryHeap\:BinaryHeap< T >}
{\xe \v BinaryHeap< T >\:~BinaryHeap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > virtual {\b BinaryHeap}< T >::~{\b BinaryHeap} (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAADO}
{\bkmkend AAAAAAAADO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 65} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v AllocMoreSpace\:BinaryHeap< T >}
{\xe \v BinaryHeap< T >\:AllocMoreSpace}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > void {\b BinaryHeap}< T >::AllocMoreSpace (){\f2 [inline]}, {\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAADP}
{\bkmkend AAAAAAAADP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 150} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_binary_heap_a44dd0230864aef346e07d3aeebb239b5_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v build\:BinaryHeap< T >}
{\xe \v BinaryHeap< T >\:build}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > virtual void {\b BinaryHeap}< T >::build (T  {\i data}[], size_t  {\i size}){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAADQ}
{\bkmkend AAAAAAAADQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'CA\'B5\'CF\'D6\'C1\'CB {\b Heap< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAADR \\*MERGEFORMAT}{\fldrslt pagenum}}}).}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 70} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_binary_heap_a67f61082a46351d3618b4114b5d4f7eb_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v build_heap\:BinaryHeap< T >}
{\xe \v BinaryHeap< T >\:build_heap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > void {\b BinaryHeap}< T >::build_heap (){\f2 [inline]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAADS}
{\bkmkend AAAAAAAADS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 166} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_binary_heap_a6c41f51512d453debdb78f97c17cca7b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v extract\:BinaryHeap< T >}
{\xe \v BinaryHeap< T >\:extract}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > virtual T {\b BinaryHeap}< T >::extract (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAADT}
{\bkmkend AAAAAAAADT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D6\'D8\'D4\'D8 {\b Heap< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAADU \\*MERGEFORMAT}{\fldrslt pagenum}}}) .}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 117} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_binary_heap_a07e955abee978e4330d8d4e32ff848dc_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v insert\:BinaryHeap< T >}
{\xe \v BinaryHeap< T >\:insert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > virtual void {\b BinaryHeap}< T >::insert (T  {\i value}){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAADV}
{\bkmkend AAAAAAAADV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D6\'D8\'D4\'D8 {\b Heap< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAADW \\*MERGEFORMAT}{\fldrslt pagenum}}}) .}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 97} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_binary_heap_a211cf7da1abc1777c3cd900e97648bc4_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v top\:BinaryHeap< T >}
{\xe \v BinaryHeap< T >\:top}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > virtual T {\b BinaryHeap}< T >::top () const{\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAADX}
{\bkmkend AAAAAAAADX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D6\'D8\'D4\'D8 {\b Heap< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAADY \\*MERGEFORMAT}{\fldrslt pagenum}}}) .}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 110} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_binary_heap_a36619e312276c76287a61a84033bdb83_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\'B3\'C9\'D4\'B1\'B1\'E4\'C1\'BF\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v capacity_\:BinaryHeap< T >}
{\xe \v BinaryHeap< T >\:capacity_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > size_t {\b BinaryHeap}< T >::capacity_{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAADZ}
{\bkmkend AAAAAAAADZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 144} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v node\:BinaryHeap< T >}
{\xe \v BinaryHeap< T >\:node}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > T* {\b BinaryHeap}< T >::node{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAEA}
{\bkmkend AAAAAAAAEA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 145} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'B8\'C3\'C0\'E0\'B5\'C4\'CE\'C4\'B5\'B5\'D3\'C9\'D2\'D4\'CF\'C2\'CE\'C4\'BC\'FE\'C9\'FA\'B3\'C9:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b BinaryHeap.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Console\'C0\'E0 \'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v Console}
{\xe \v Console}
{\bkmkstart AAAAAAAAED}
{\bkmkend AAAAAAAAED}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BF\'D8\'D6\'C6\'CC\'A8 \'B4\'E6\'B4\'A2\'B1\'D8\'D2\'AA\'B5\'C4\'BB\'B7\'BE\'B3\'B1\'E4\'C1\'BF\'D2\'D4\'BC\'B0\'E4\'D6\'C8\'BE\'D3\'C3\'BB\'A7\'C7\'B0\'B6\'CB\'CB\'F9\'D0\'E8\'D2\'AA\'B5\'C4\'CA\'FD\'BE\'DD }}\par
{
{\f2 #include <Console.h>}}\par
Console \'B5\'C4\'D0\'AD\'D7\'F7\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Console} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Console} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b init} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ConsoleJobList} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ConsoleJobListDone} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned int {\b AddJob} (int pid, {\b job_state} state, int {\b argc}, char *{\b argv}[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ResetChildPid} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetInputFD} (int _fd)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetOutputFD} (int _fd)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetErrorFD} (int _fd)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetInputFD} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetOutputFD} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetErrorFD} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetInputRedirect} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetOutputRedirect} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetErrorRedirect} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ResetInputRedirect} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ResetOutputRedirect} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b ResetErrorRedirect} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b GetInputRedirect} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b GetOutputRedirect} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b GetErrorRedirect} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetSTDIN} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetSTDOUT} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b GetSTDERR} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SetMask} (mode_t _mask)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
mode_t {\b GetMask} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private \'CA\'F4\'D0\'D4\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b user_name} [{\b BUFFER_SIZE}]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b host_name} [{\b BUFFER_SIZE}]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b current_working_dictionary} [{\b BUFFER_SIZE}]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b home} [{\b BUFFER_SIZE}]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b shell_path_env} [{\b BUFFER_SIZE}]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pid_t {\b process_id}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ProcessManager} * {\b process_manager}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b input_file_descriptor}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b output_file_descriptor}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b error_file_descriptor}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b redirect_input}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b redirect_output}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b redirect_error}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
mode_t {\b umask_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b argc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b argv} [{\b MAX_ARGUMENT_NUMBER}][{\b BUFFER_SIZE}]\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BE\'B2\'CC\'AC Private \'CA\'F4\'D0\'D4\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static pid_t {\b child_process_id} = -1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b input_std_fd}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b output_std_fd}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b error_std_fd}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'D3\'D1\'D4\'AA\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Display}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Executor}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ProcessManager}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SignalHandler} (int)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'C5\'BA\'C5\'BF\'D8\'D6\'C6\'D3\'EB\'B4\'A6\'C0\'ED }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BF\'D8\'D6\'C6\'CC\'A8 \'B4\'E6\'B4\'A2\'B1\'D8\'D2\'AA\'B5\'C4\'BB\'B7\'BE\'B3\'B1\'E4\'C1\'BF\'D2\'D4\'BC\'B0\'E4\'D6\'C8\'BE\'D3\'C3\'BB\'A7\'C7\'B0\'B6\'CB\'CB\'F9\'D0\'E8\'D2\'AA\'B5\'C4\'CA\'FD\'BE\'DD \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 38} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B9\'B9\'D4\'EC\'BC\'B0\'CE\'F6\'B9\'B9\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v Console\:Console}
{\xe \v Console\:Console}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Console::Console ()}}
\par
{\bkmkstart AAAAAAAAEE}
{\bkmkend AAAAAAAAEE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.cpp} \'B5\'DA {\b 32} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_aba16cfd9f0894eb1312b1bc1155b6646_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ~Console\:Console}
{\xe \v Console\:~Console}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Console::~Console (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAEF}
{\bkmkend AAAAAAAAEF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.cpp} \'B5\'DA {\b 44} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v AddJob\:Console}
{\xe \v Console\:AddJob}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int Console::AddJob (int  {\i pid}, {\b job_state}  {\i state}, int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAEG}
{\bkmkend AAAAAAAAEG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.cpp} \'B5\'DA {\b 213} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a286bde00a8b1e89dadd217ae770b5afd_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a286bde00a8b1e89dadd217ae770b5afd_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ConsoleJobList\:Console}
{\xe \v Console\:ConsoleJobList}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Console::ConsoleJobList () const}}
\par
{\bkmkstart AAAAAAAAEH}
{\bkmkend AAAAAAAAEH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.cpp} \'B5\'DA {\b 201} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a66e0a1a68ac24da1ebc1063a6d8146cf_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a66e0a1a68ac24da1ebc1063a6d8146cf_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ConsoleJobListDone\:Console}
{\xe \v Console\:ConsoleJobListDone}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Console::ConsoleJobListDone ()}}
\par
{\bkmkstart AAAAAAAAEI}
{\bkmkend AAAAAAAAEI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.cpp} \'B5\'DA {\b 207} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a9117d1d5dc5a0325a01d7f798d0e67bd_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a9117d1d5dc5a0325a01d7f798d0e67bd_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetErrorFD\:Console}
{\xe \v Console\:GetErrorFD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::GetErrorFD () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEJ}
{\bkmkend AAAAAAAAEJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 110} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a8d711d0715d762049587db93beb4c2d7_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetErrorRedirect\:Console}
{\xe \v Console\:GetErrorRedirect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Console::GetErrorRedirect () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEK}
{\bkmkend AAAAAAAAEK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 131} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a806d29518222e2f68fbd581c6fb83440_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetInputFD\:Console}
{\xe \v Console\:GetInputFD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::GetInputFD () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEL}
{\bkmkend AAAAAAAAEL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 106} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_ab5a0767cb115b8fb8f54636ecf346663_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetInputRedirect\:Console}
{\xe \v Console\:GetInputRedirect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Console::GetInputRedirect () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEM}
{\bkmkend AAAAAAAAEM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 127} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_aad753325a8a0910265c2e9392c5e531c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetMask\:Console}
{\xe \v Console\:GetMask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
mode_t Console::GetMask () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEN}
{\bkmkend AAAAAAAAEN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 143} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a51dd35745d691e0777081628fa1db9d0_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetOutputFD\:Console}
{\xe \v Console\:GetOutputFD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::GetOutputFD () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEO}
{\bkmkend AAAAAAAAEO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 108} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_abfdb289fac381526a099a2163c4ae705_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetOutputRedirect\:Console}
{\xe \v Console\:GetOutputRedirect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Console::GetOutputRedirect () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEP}
{\bkmkend AAAAAAAAEP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 129} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a8ed8ede73662c81257ba9ced6e1b538d_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetSTDERR\:Console}
{\xe \v Console\:GetSTDERR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::GetSTDERR () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEQ}
{\bkmkend AAAAAAAAEQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 138} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a9df0753e46fdaae71336c41e4ee17fda_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetSTDIN\:Console}
{\xe \v Console\:GetSTDIN}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::GetSTDIN () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAER}
{\bkmkend AAAAAAAAER}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 134} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_aa331c9a7c66f6aa705f5cab6f6469057_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v GetSTDOUT\:Console}
{\xe \v Console\:GetSTDOUT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::GetSTDOUT () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAES}
{\bkmkend AAAAAAAAES}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 136} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_aabbced230d7ba4b96a58896a4d47cc39_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v init\:Console}
{\xe \v Console\:init}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::init ()}}
\par
{\bkmkstart AAAAAAAAET}
{\bkmkend AAAAAAAAET}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.cpp} \'B5\'DA {\b 123} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a1c8237ecc9ba1c860e59d9632fd654f7_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ResetChildPid\:Console}
{\xe \v Console\:ResetChildPid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Console::ResetChildPid (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEU}
{\bkmkend AAAAAAAAEU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 96} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a77e7161904d95a484f94069fb1bc742a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ResetErrorRedirect\:Console}
{\xe \v Console\:ResetErrorRedirect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Console::ResetErrorRedirect (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEV}
{\bkmkend AAAAAAAAEV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 124} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_ae0c51f0fe6cc5cc63c06210b8b18d4e9_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ResetInputRedirect\:Console}
{\xe \v Console\:ResetInputRedirect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Console::ResetInputRedirect (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEW}
{\bkmkend AAAAAAAAEW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 120} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_aa7777f44a59723d9c714cdaf7bc957eb_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ResetOutputRedirect\:Console}
{\xe \v Console\:ResetOutputRedirect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Console::ResetOutputRedirect (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEX}
{\bkmkend AAAAAAAAEX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 122} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_ad135641adf013088788dee082360474e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v SetErrorFD\:Console}
{\xe \v Console\:SetErrorFD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Console::SetErrorFD (int  {\i _fd}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEY}
{\bkmkend AAAAAAAAEY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 103} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_ae599615cb831cef7cc87158c8e288d49_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v SetErrorRedirect\:Console}
{\xe \v Console\:SetErrorRedirect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Console::SetErrorRedirect (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAEZ}
{\bkmkend AAAAAAAAEZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 117} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_aac7ce6d8e461dd8ed81b5a5022575db1_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v SetInputFD\:Console}
{\xe \v Console\:SetInputFD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Console::SetInputFD (int  {\i _fd}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAFA}
{\bkmkend AAAAAAAAFA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 99} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a9825197de6cf144832961e9fdc96d968_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v SetInputRedirect\:Console}
{\xe \v Console\:SetInputRedirect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Console::SetInputRedirect (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAFB}
{\bkmkend AAAAAAAAFB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 113} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a0e7663c06c2f47bb15262c7853c17ebc_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v SetMask\:Console}
{\xe \v Console\:SetMask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Console::SetMask (mode_t  {\i _mask}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAFC}
{\bkmkend AAAAAAAAFC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 141} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v SetOutputFD\:Console}
{\xe \v Console\:SetOutputFD}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Console::SetOutputFD (int  {\i _fd}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAFD}
{\bkmkend AAAAAAAAFD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 101} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_a24dd8b5bbd30b3eb6346b2902fa1b8a8_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v SetOutputRedirect\:Console}
{\xe \v Console\:SetOutputRedirect}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Console::SetOutputRedirect (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAFE}
{\bkmkend AAAAAAAAFE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 115} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_console_aa1c7da9978b67c9d27500b9818c30ad8_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'D3\'D1\'D4\'AA\'BC\'B0\'CF\'E0\'B9\'D8\'BA\'AF\'CA\'FD\'CE\'C4\'B5\'B5\par
\pard\plain 
{\xe \v Display\:Console}
{\xe \v Console\:Display}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
friend class {\b Display}{\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAFF}
{\bkmkend AAAAAAAAFF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 145} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v Executor\:Console}
{\xe \v Console\:Executor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
friend class {\b Executor}{\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAFG}
{\bkmkend AAAAAAAAFG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 146} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v ProcessManager\:Console}
{\xe \v Console\:ProcessManager}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
friend class {\b ProcessManager}{\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAFH}
{\bkmkend AAAAAAAAFH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 147} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v SignalHandler\:Console}
{\xe \v Console\:SignalHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SignalHandler (int  {\i signal_}){\f2 [friend]}}}
\par
{\bkmkstart AAAAAAAAFI}
{\bkmkend AAAAAAAAFI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'C5\'BA\'C5\'BF\'D8\'D6\'C6\'D3\'EB\'B4\'A6\'C0\'ED }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i signal_} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-21 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.cpp} \'B5\'DA {\b 49} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\'B3\'C9\'D4\'B1\'B1\'E4\'C1\'BF\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v argc\:Console}
{\xe \v Console\:argc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::argc{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFJ}
{\bkmkend AAAAAAAAFJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 74} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v argv\:Console}
{\xe \v Console\:argv}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char Console::argv[{\b MAX_ARGUMENT_NUMBER}][{\b BUFFER_SIZE}]{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFK}
{\bkmkend AAAAAAAAFK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 75} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v child_process_id\:Console}
{\xe \v Console\:child_process_id}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pid_t Console::child_process_id = -1{\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFL}
{\bkmkend AAAAAAAAFL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 53} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v current_working_dictionary\:Console}
{\xe \v Console\:current_working_dictionary}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char Console::current_working_dictionary[{\b BUFFER_SIZE}]{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFM}
{\bkmkend AAAAAAAAFM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 44} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v error_file_descriptor\:Console}
{\xe \v Console\:error_file_descriptor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::error_file_descriptor{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFN}
{\bkmkend AAAAAAAAFN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 59} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v error_std_fd\:Console}
{\xe \v Console\:error_std_fd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::error_std_fd{\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFO}
{\bkmkend AAAAAAAAFO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 64} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v home\:Console}
{\xe \v Console\:home}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char Console::home[{\b BUFFER_SIZE}]{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFP}
{\bkmkend AAAAAAAAFP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 46} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v host_name\:Console}
{\xe \v Console\:host_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char Console::host_name[{\b BUFFER_SIZE}]{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFQ}
{\bkmkend AAAAAAAAFQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 43} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v input_file_descriptor\:Console}
{\xe \v Console\:input_file_descriptor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::input_file_descriptor{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFR}
{\bkmkend AAAAAAAAFR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 57} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v input_std_fd\:Console}
{\xe \v Console\:input_std_fd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::input_std_fd{\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFS}
{\bkmkend AAAAAAAAFS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 62} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v output_file_descriptor\:Console}
{\xe \v Console\:output_file_descriptor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::output_file_descriptor{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFT}
{\bkmkend AAAAAAAAFT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 58} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v output_std_fd\:Console}
{\xe \v Console\:output_std_fd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Console::output_std_fd{\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFU}
{\bkmkend AAAAAAAAFU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 63} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v process_id\:Console}
{\xe \v Console\:process_id}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pid_t Console::process_id{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFV}
{\bkmkend AAAAAAAAFV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 52} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v process_manager\:Console}
{\xe \v Console\:process_manager}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b ProcessManager}* Console::process_manager{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFW}
{\bkmkend AAAAAAAAFW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 54} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v redirect_error\:Console}
{\xe \v Console\:redirect_error}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Console::redirect_error{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFX}
{\bkmkend AAAAAAAAFX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 69} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v redirect_input\:Console}
{\xe \v Console\:redirect_input}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Console::redirect_input{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFY}
{\bkmkend AAAAAAAAFY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 67} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v redirect_output\:Console}
{\xe \v Console\:redirect_output}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Console::redirect_output{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAFZ}
{\bkmkend AAAAAAAAFZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 68} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v shell_path_env\:Console}
{\xe \v Console\:shell_path_env}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char Console::shell_path_env[{\b BUFFER_SIZE}]{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGA}
{\bkmkend AAAAAAAAGA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 49} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v umask_\:Console}
{\xe \v Console\:umask_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
mode_t Console::umask_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGB}
{\bkmkend AAAAAAAAGB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 72} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v user_name\:Console}
{\xe \v Console\:user_name}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char Console::user_name[{\b BUFFER_SIZE}]{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGC}
{\bkmkend AAAAAAAAGC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'B5\'DA {\b 42} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'B8\'C3\'C0\'E0\'B5\'C4\'CE\'C4\'B5\'B5\'D3\'C9\'D2\'D4\'CF\'C2\'CE\'C4\'BC\'FE\'C9\'FA\'B3\'C9:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b Console.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b Console.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Display\'C0\'E0 \'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v Display}
{\xe \v Display}
{\bkmkstart AAAAAAAAGD}
{\bkmkend AAAAAAAAGD}
\par
{
{\f2 #include <Display.h>}}\par
Display \'B5\'C4\'D0\'AD\'D7\'F7\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_display__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Display} ({\b Console} *console)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Display} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b InputCommand} (char *input, const int len)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C3\'FC\'C1\'EE\'D0\'D0\'CA\'E4\'C8\'EB\'BF\'D8\'D6\'C6 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b render} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C3\'FC\'C1\'EE\'D0\'D0\'CC\'E1\'CA\'BE\'B7\'FB\'CF\'D4\'CA\'BE\'C4\'A3\'BF\'E9 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b prompt} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BC\'CC\'D0\'F8\'CA\'E4\'C8\'EB\'CC\'E1\'CA\'BE }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b message} (const char *msg)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B4\'F2\'D3\'A1\'D0\'C5\'CF\'A2msg\'D3\'EB\'CF\'D4\'CA\'BE\'C6\'F7 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b show} () const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BD\'AB\'CB\'F9\'D3\'D0\'B4\'F2\'D3\'A1\'D0\'C5\'CF\'A2\'CD\'B3\'D2\'BB\'CF\'D4\'CA\'BE\'D4\'DA\'D6\'D5\'B6\'CB }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b clear} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C7\'E5\'BF\'D5\'BB\'BA\'B3\'E5\'C7\'F8 }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected \'CA\'F4\'D0\'D4\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string {\b buffer_}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private \'CA\'F4\'D0\'D4\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Console} * {\b console_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b perform}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.h} \'B5\'DA {\b 19} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B9\'B9\'D4\'EC\'BC\'B0\'CE\'F6\'B9\'B9\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v Display\:Display}
{\xe \v Display\:Display}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Display::Display ({\b Console} *  {\i console})}}
\par
{\bkmkstart AAAAAAAAGE}
{\bkmkend AAAAAAAAGE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.cpp} \'B5\'DA {\b 20} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v ~Display\:Display}
{\xe \v Display\:~Display}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Display::~Display (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGF}
{\bkmkend AAAAAAAAGF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.cpp} \'B5\'DA {\b 25} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v clear\:Display}
{\xe \v Display\:clear}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Display::clear (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAGG}
{\bkmkend AAAAAAAAGG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C7\'E5\'BF\'D5\'BB\'BA\'B3\'E5\'C7\'F8 }}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.h} \'B5\'DA {\b 55} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_display_a14242933dd00fc1d50f9ae70d5121d14_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v InputCommand\:Display}
{\xe \v Display\:InputCommand}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Display::InputCommand (char *  {\i input}, const int  {\i len})}}
\par
{\bkmkstart AAAAAAAAGH}
{\bkmkend AAAAAAAAGH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C3\'FC\'C1\'EE\'D0\'D0\'CA\'E4\'C8\'EB\'BF\'D8\'D6\'C6 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'D5\'FD\'CA\'FD\'B1\'ED\'CA\'BE\'D5\'FD\'B3\'A3\'CD\'CB\'B3\'F6\'A3\'AC\'B7\'B5\'BB\'D8\'B6\'C1\'C8\'EB\'B5\'C4\'D7\'D6\'B7\'FB\'CA\'FD\'A3\'BB \'B7\'B5\'BB\'D80\'B1\'ED\'CA\'BE\'B6\'C1\'B5\'BDEOF\'A3\'AC\'B7\'B5\'BB\'D8\'B8\'BA\'CA\'FD\'B1\'ED\'CA\'BE\'B3\'F6\'CF\'D6\'B4\'ED\'CE\'F3 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.cpp} \'B5\'DA {\b 29} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_display_affa8b075f9933ab1683b520fdc79dd4a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v message\:Display}
{\xe \v Display\:message}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Display::message (const char *  {\i msg})}}
\par
{\bkmkstart AAAAAAAAGI}
{\bkmkend AAAAAAAAGI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B4\'F2\'D3\'A1\'D0\'C5\'CF\'A2msg\'D3\'EB\'CF\'D4\'CA\'BE\'C6\'F7 }}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.cpp} \'B5\'DA {\b 147} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_display_a3715e72f9beec4db82fd5d9668451b36_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v prompt\:Display}
{\xe \v Display\:prompt}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Display::prompt () const}}
\par
{\bkmkstart AAAAAAAAGJ}
{\bkmkend AAAAAAAAGJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BC\'CC\'D0\'F8\'CA\'E4\'C8\'EB\'CC\'E1\'CA\'BE }}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.cpp} \'B5\'DA {\b 139} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_display_aab18599c778ffdbc1f9a8e6b8743156a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v render\:Display}
{\xe \v Display\:render}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Display::render ()}}
\par
{\bkmkstart AAAAAAAAGK}
{\bkmkend AAAAAAAAGK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C3\'FC\'C1\'EE\'D0\'D0\'CC\'E1\'CA\'BE\'B7\'FB\'CF\'D4\'CA\'BE\'C4\'A3\'BF\'E9 }}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.cpp} \'B5\'DA {\b 88} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_display_a9b83e81da2877f0ceff73881d4ceb3dc_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v show\:Display}
{\xe \v Display\:show}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Display::show () const}}
\par
{\bkmkstart AAAAAAAAGL}
{\bkmkend AAAAAAAAGL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BD\'AB\'CB\'F9\'D3\'D0\'B4\'F2\'D3\'A1\'D0\'C5\'CF\'A2\'CD\'B3\'D2\'BB\'CF\'D4\'CA\'BE\'D4\'DA\'D6\'D5\'B6\'CB }}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.cpp} \'B5\'DA {\b 152} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_display_a457c583c6fc2aa69e0709947a0196ba6_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\'B3\'C9\'D4\'B1\'B1\'E4\'C1\'BF\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v buffer_\:Display}
{\xe \v Display\:buffer_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string Display::buffer_{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGM}
{\bkmkend AAAAAAAAGM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.h} \'B5\'DA {\b 28} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v console_\:Display}
{\xe \v Display\:console_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Console}* Display::console_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGN}
{\bkmkend AAAAAAAAGN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.h} \'B5\'DA {\b 23} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v perform\:Display}
{\xe \v Display\:perform}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Display::perform{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAGO}
{\bkmkend AAAAAAAAGO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.h} \'B5\'DA {\b 25} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'B8\'C3\'C0\'E0\'B5\'C4\'CE\'C4\'B5\'B5\'D3\'C9\'D2\'D4\'CF\'C2\'CE\'C4\'BC\'FE\'C9\'FA\'B3\'C9:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b Display.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b Display.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Executor\'C0\'E0 \'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v Executor}
{\xe \v Executor}
{\bkmkstart AAAAAAAAGP}
{\bkmkend AAAAAAAAGP}
\par
{
{\f2 #include <Executor.h>}}\par
Executor \'B5\'C4\'D0\'AD\'D7\'F7\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Executor} ({\b Console} *model, {\b Display} *view)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Executor} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute} (const int argc, char *const argv[], char *const env[]) const\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D6\'B4\'D0\'D0\'C6\'F7\'C3\'FC\'C1\'EE\'D6\'B4\'D0\'D0\'BA\'AF\'CA\'FD }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected \'C0\'E0\'D0\'CD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
typedef {\b sh_err_t}(Executor::* {\b MemFuncPtr}) (const int argc, char *const argv[], char *const env[]) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b shell_function} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_cd} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_pwd} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_time} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_clr} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_dir} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_set} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_echo} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_help} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_exit} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_date} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_clear} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_env} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_who} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_mkdir} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_rmdir} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_bg} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_fg} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_jobs} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_exec} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_test} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_umask} (const int argc, char *const argv[], char *const env[]) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b sh_err_t} {\b execute_myshell} (const int argc, char *const argv[], char *const env[]) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BE\'B2\'CC\'AC Protected \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b test_file_state} (const int argc, const char *const argv[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b test_number_compare} (const int argc, const char *const argv[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b test_string_compare} (const int argc, const char *const argv[])\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected \'CA\'F4\'D0\'D4\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b MemFuncPtr} {\b FunctionArray} [{\b FunctionNumber}]\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private \'CA\'F4\'D0\'D4\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Console} * {\b console_}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Display} * {\b display_}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.h} \'B5\'DA {\b 22} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B3\'C9\'D4\'B1\'C0\'E0\'D0\'CD\'B6\'A8\'D2\'E5\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v MemFuncPtr\:Executor}
{\xe \v Executor\:MemFuncPtr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
typedef {\b sh_err_t}(Executor::* Executor::MemFuncPtr) (const int argc, char *const argv[], char *const env[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGQ}
{\bkmkend AAAAAAAAGQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B4\'D3\'C3\'FC\'C1\'EE\'B5\'BD\'B6\'D4\'D3\'A6\'BA\'AF\'CA\'FD\'B5\'C4\'D3\'B3\'C9\'E4\'A3\'AC\'B2\'C9\'D3\'C3\'BA\'EC\'BA\'DA\'CA\'F7\'B5\'C4STL\'CA\'B5\'CF\'D6 \'B6\'A8\'D2\'E5\'BA\'AF\'CA\'FD\'D6\'B8\'D5\'EB\'C0\'E0\'D0\'CD \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.h} \'B5\'DA {\b 104} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B9\'B9\'D4\'EC\'BC\'B0\'CE\'F6\'B9\'B9\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v Executor\:Executor}
{\xe \v Executor\:Executor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Executor::Executor ({\b Console} *  {\i model}, {\b Display} *  {\i view})}}
\par
{\bkmkstart AAAAAAAAGR}
{\bkmkend AAAAAAAAGR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'A8\'D2\'E5\'BA\'AF\'CA\'FD\'D6\'B8\'D5\'EB\'CA\'FD\'D7\'E9\par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 42} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a3216f1a094a2603b9c467ccbecdb68a7_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ~Executor\:Executor}
{\xe \v Executor\:~Executor}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Executor::~Executor (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAGS}
{\bkmkend AAAAAAAAGS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 72} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v execute\:Executor}
{\xe \v Executor\:execute}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const}}
\par
{\bkmkstart AAAAAAAAGT}
{\bkmkend AAAAAAAAGT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D6\'B4\'D0\'D0\'C6\'F7\'C3\'FC\'C1\'EE\'D6\'B4\'D0\'D0\'BA\'AF\'CA\'FD }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argc} \cell }{\'B4\'AB\'C8\'EB\'B2\'CE\'CA\'FD\'B8\'F6\'CA\'FD \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argv} \cell }{\'B4\'AB\'C8\'EB\'BE\'DF\'CC\'E5\'B2\'CE\'CA\'FD \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i env} \cell }{\'BB\'B7\'BE\'B3\'B1\'E4\'C1\'BF \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
sh_err_t \'B7\'B5\'BB\'D8\'D6\'B4\'D0\'D0\'C7\'E9\'BF\'F6 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-04 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 76} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a1efaafe37cc750a5a959283c8fa6072a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a1efaafe37cc750a5a959283c8fa6072a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_bg\:Executor}
{\xe \v Executor\:execute_bg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_bg (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGU}
{\bkmkend AAAAAAAAGU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BD\'AB\'B1\'BB\'B9\'D2\'C6\'F0\'B5\'C4\'D7\'F7\'D2\'B5\'D7\'AA\'B5\'BD\'BA\'F3\'CC\'A8 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 585} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a69fe207735684ba0b5b50f43a8a1e217_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a69fe207735684ba0b5b50f43a8a1e217_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_cd\:Executor}
{\xe \v Executor\:execute_cd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_cd (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGV}
{\bkmkend AAAAAAAAGV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B8\'FC\'B8\'C4\'C4\'BF\'C2\'BC \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 251} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a83e4cedebd6ec8b46d6afaf319369d5a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_clear\:Executor}
{\xe \v Executor\:execute_clear}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_clear (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGW}
{\bkmkend AAAAAAAAGW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C7\'E5\'C6\'C1 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 524} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_aea1570ef025f4a9b3d18fb17ec0d6fab_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_aea1570ef025f4a9b3d18fb17ec0d6fab_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_clr\:Executor}
{\xe \v Executor\:execute_clr}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_clr (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGX}
{\bkmkend AAAAAAAAGX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C7\'E5\'C6\'C1 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 316} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_afcefd04730f08a13a9c4ac5aeaa17d3f_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_afcefd04730f08a13a9c4ac5aeaa17d3f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_date\:Executor}
{\xe \v Executor\:execute_date}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_date (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGY}
{\bkmkend AAAAAAAAGY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CF\'D4\'CA\'BE\'B5\'B1\'C7\'B0\'C8\'D5\'C6\'DA \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 499} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a7879b031498f84bc79d4670ddbf5882a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a7879b031498f84bc79d4670ddbf5882a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_dir\:Executor}
{\xe \v Executor\:execute_dir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_dir (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAGZ}
{\bkmkend AAAAAAAAGZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 324} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a5d7be8bd7520b960195dfac152eb3b4e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a5d7be8bd7520b960195dfac152eb3b4e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_echo\:Executor}
{\xe \v Executor\:execute_echo}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_echo (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHA}
{\bkmkend AAAAAAAAHA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 445} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a793edb7a57e8702e9a1df8877cf52c4a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a793edb7a57e8702e9a1df8877cf52c4a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_env\:Executor}
{\xe \v Executor\:execute_env}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_env (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHB}
{\bkmkend AAAAAAAAHB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BB\'F1\'C8\'A1\'CF\'B5\'CD\'B3\'BB\'B7\'BE\'B3\'B1\'E4\'C1\'BF \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 531} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a42048fc854eb50566a5563d15c65c1e8_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a42048fc854eb50566a5563d15c65c1e8_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_exec\:Executor}
{\xe \v Executor\:execute_exec}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_exec (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHC}
{\bkmkend AAAAAAAAHC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D6\'B4\'D0\'D0\'C3\'FC\'C1\'EE\'CC\'E6\'BB\'BB\'B5\'B1\'C7\'B0\'BD\'F8\'B3\'CC \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 639} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a08692f19c48b47fa81a503166742052c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_exit\:Executor}
{\xe \v Executor\:execute_exit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_exit (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHD}
{\bkmkend AAAAAAAAHD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CD\'CB\'B3\'F6shell \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 493} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_ad488a61e88fc1e3fcea05467f0a33c12_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_fg\:Executor}
{\xe \v Executor\:execute_fg}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_fg (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHE}
{\bkmkend AAAAAAAAHE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BD\'AB\'BA\'F3\'CC\'A8\'D7\'F7\'D2\'B5\'D7\'AA\'B5\'BD\'C7\'B0\'CC\'A8 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 611} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a3d264497fb5c9de3ca434d9e1107b070_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a3d264497fb5c9de3ca434d9e1107b070_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_help\:Executor}
{\xe \v Executor\:execute_help}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_help (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHF}
{\bkmkend AAAAAAAAHF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 462} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a14c9c8ab1f6d34152167f302b73d253c_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a14c9c8ab1f6d34152167f302b73d253c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_jobs\:Executor}
{\xe \v Executor\:execute_jobs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_jobs (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHG}
{\bkmkend AAAAAAAAHG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CF\'D4\'CA\'BE\'CB\'F9\'D3\'D0\'D7\'F7\'D2\'B5 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 630} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a74908e725aa40a6da16c1a8b383b61b9_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a74908e725aa40a6da16c1a8b383b61b9_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_mkdir\:Executor}
{\xe \v Executor\:execute_mkdir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_mkdir (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHH}
{\bkmkend AAAAAAAAHH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B4\'B4\'BD\'A8\'D0\'C2\'C4\'BF\'C2\'BC \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 555} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a14963bfbfaed3a775d0e9726f964fd4b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_myshell\:Executor}
{\xe \v Executor\:execute_myshell}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_myshell (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHI}
{\bkmkend AAAAAAAAHI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
myshell \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 739} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a24184035b7a2aaeef6b309d9cfb13704_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a24184035b7a2aaeef6b309d9cfb13704_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_pwd\:Executor}
{\xe \v Executor\:execute_pwd}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_pwd (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHJ}
{\bkmkend AAAAAAAAHJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CF\'D4\'CA\'BE\'B5\'B1\'C7\'B0\'C4\'BF\'C2\'BC \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 300} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a5d52716fbdabdc6ce6c476bcf62e4c66_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a5d52716fbdabdc6ce6c476bcf62e4c66_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_rmdir\:Executor}
{\xe \v Executor\:execute_rmdir}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_rmdir (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHK}
{\bkmkend AAAAAAAAHK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D2\'C6\'B3\'FD\'BF\'D5\'C4\'BF\'C2\'BC \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 571} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a0d30e249770b06a9d24a400c971aa959_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_set\:Executor}
{\xe \v Executor\:execute_set}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_set (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHL}
{\bkmkend AAAAAAAAHL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 437} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a409eacdf368808cae938ccd7eb5b1074_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a409eacdf368808cae938ccd7eb5b1074_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_test\:Executor}
{\xe \v Executor\:execute_test}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_test (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHM}
{\bkmkend AAAAAAAAHM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BC\'EC\'B2\'E2\'C3\'FC\'C1\'EE\'D6\'B4\'D0\'D0\'BD\'E1\'B9\'B9 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 657} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_acfb4a30566fe0a9ee1e75c5ac3892c53_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_acfb4a30566fe0a9ee1e75c5ac3892c53_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_time\:Executor}
{\xe \v Executor\:execute_time}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_time (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHN}
{\bkmkend AAAAAAAAHN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CF\'D4\'CA\'BE\'B5\'B1\'C7\'B0\'C8\'D5\'C6\'DA \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 308} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_aff20dc92c156d65b9615605b410bb14e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_aff20dc92c156d65b9615605b410bb14e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_umask\:Executor}
{\xe \v Executor\:execute_umask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_umask (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHO}
{\bkmkend AAAAAAAAHO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C9\'E8\'D6\'C3\'D1\'DA\'C2\'EB \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 702} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a68303ae2d1de04414132c7fd339973ad_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a68303ae2d1de04414132c7fd339973ad_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v execute_who\:Executor}
{\xe \v Executor\:execute_who}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::execute_who (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHP}
{\bkmkend AAAAAAAAHP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BB\'F1\'C8\'A1\'B5\'B1\'C7\'B0\'B5\'C7\'C8\'EB\'D3\'C3\'BB\'A7\'D0\'C5\'CF\'A2 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 547} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a12adde1212fb00c1f85c839c830da20a_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a12adde1212fb00c1f85c839c830da20a_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v shell_function\:Executor}
{\xe \v Executor\:shell_function}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b sh_err_t} Executor::shell_function (const int  {\i argc}, char *const  {\i argv}[], char *const  {\i env}[]) const{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHQ}
{\bkmkend AAAAAAAAHQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'BC\'FB\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'CF\'D4\'CA\'BE\'C6\'F7 \'D1\'A1\'D4\'F1\'D6\'B4\'D0\'D0\'BA\'AF\'CA\'FD\'B2\'A2\'D6\'B4\'D0\'D0 \par
}}}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'FE\'B7\'D6\'B2\'E9\'D5\'D2\'C6\'A5\'C5\'E4\'C4\'DA\'B2\'BF\'C3\'FC\'C1\'EE\par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 168} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a6fa1442ada2d0df8fd52f4e430cce31e_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a6fa1442ada2d0df8fd52f4e430cce31e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v test_file_state\:Executor}
{\xe \v Executor\:test_file_state}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Executor::test_file_state (const int  {\i argc}, const char *const  {\i argv}[]){\f2 [static]}, {\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHR}
{\bkmkend AAAAAAAAHR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CE\'C4\'BC\'FE\'B2\'E2\'CA\'D4 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 856} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_acb69e9dcc912bc5308fd8bb32aa6f135_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_acb69e9dcc912bc5308fd8bb32aa6f135_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v test_number_compare\:Executor}
{\xe \v Executor\:test_number_compare}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Executor::test_number_compare (const int  {\i argc}, const char *const  {\i argv}[]){\f2 [static]}, {\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHS}
{\bkmkend AAAAAAAAHS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CE\'C4\'BC\'FE\'B2\'E2\'CA\'D4 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 966} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a409ee22c9a3324243782f8c7d5cc8af9_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a409ee22c9a3324243782f8c7d5cc8af9_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v test_string_compare\:Executor}
{\xe \v Executor\:test_string_compare}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Executor::test_string_compare (const int  {\i argc}, const char *const  {\i argv}[]){\f2 [static]}, {\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHT}
{\bkmkend AAAAAAAAHT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CE\'C4\'BC\'FE\'B2\'E2\'CA\'D4 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 1008} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a87065e9bf3e4f57847d7d7612d3ac4dd_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_executor_a87065e9bf3e4f57847d7d7612d3ac4dd_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\'B3\'C9\'D4\'B1\'B1\'E4\'C1\'BF\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v console_\:Executor}
{\xe \v Executor\:console_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Console}* Executor::console_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHU}
{\bkmkend AAAAAAAAHU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.h} \'B5\'DA {\b 26} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v display_\:Executor}
{\xe \v Executor\:display_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Display}* Executor::display_{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAHV}
{\bkmkend AAAAAAAAHV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'BC\'FB\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'BF\'D8\'D6\'C6\'CC\'A8 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.h} \'B5\'DA {\b 28} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v FunctionArray\:Executor}
{\xe \v Executor\:FunctionArray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b MemFuncPtr} Executor::FunctionArray[{\b FunctionNumber}]{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAHW}
{\bkmkend AAAAAAAAHW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B4\'B4\'BD\'A8\'BA\'AF\'CA\'FD\'D6\'B8\'D5\'EB\'CA\'FD\'D7\'E9 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.h} \'B5\'DA {\b 106} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'B8\'C3\'C0\'E0\'B5\'C4\'CE\'C4\'B5\'B5\'D3\'C9\'D2\'D4\'CF\'C2\'CE\'C4\'BC\'FE\'C9\'FA\'B3\'C9:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b Executor.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b Executor.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BinaryHeap< T >::ExtractEmptyHeap\'C0\'E0 \'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v BinaryHeap< T >::ExtractEmptyHeap}
{\xe \v BinaryHeap< T >::ExtractEmptyHeap}
{\bkmkstart AAAAAAAAEB}
{\bkmkend AAAAAAAAEB}
\par
{
{\f2 #include <BinaryHeap.h>}}\par
\'C0\'E0 BinaryHeap< T >::ExtractEmptyHeap \'BC\'CC\'B3\'D0\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_binary_heap_1_1_extract_empty_heap__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
BinaryHeap< T >::ExtractEmptyHeap \'B5\'C4\'D0\'AD\'D7\'F7\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_binary_heap_1_1_extract_empty_heap__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<class T>\par
class BinaryHeap< T >::ExtractEmptyHeap\par
}
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 147} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'B8\'C3\'C0\'E0\'B5\'C4\'CE\'C4\'B5\'B5\'D3\'C9\'D2\'D4\'CF\'C2\'CE\'C4\'BC\'FE\'C9\'FA\'B3\'C9:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b BinaryHeap.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Heap< T > \'C4\'A3\'B0\'E5\'C0\'E0 \'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v Heap< T >}
{\xe \v Heap< T >}
{\bkmkstart AAAAAAAAHX}
{\bkmkend AAAAAAAAHX}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B3\'E9\'CF\'F3\'B6\'D1 }}\par
{
{\f2 #include <Heap.h>}}\par
\'C0\'E0 Heap< T > \'BC\'CC\'B3\'D0\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_heap__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Heap} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Heap} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destroy the {\b Heap} object Heap\'B5\'C4\'CE\'F6\'B9\'B9\'BA\'AF\'CA\'FD\'A1\'A3\'D3\'C9\'D3\'DA\'CE\'D2\'C3\'C7\'B5\'C4\'C1\'B4\'BD\'D3\'BF\'E2\'CA\'C7\'BE\'B2\'CC\'AC\'BF\'E2\'A3\'AC\'D2\'F2\'B4\'CB\'CE\'DE\'B7\'A8\'BD\'AB\'CE\'F6\'B9\'B9\'BA\'AF\'CA\'FD\'B6\'A8\'D2\'E5\'B3\'C9\'B4\'BF\'D0\'E9\'BA\'AF\'CA\'FD\'A1\'A3 \'C8\'E7\'B9\'FB\'CA\'B9\'D3\'C3\'B6\'AF\'CC\'AC\'C1\'B4\'BD\'D3\'BF\'E2\'B5\'C4\'BB\'B0\'D4\'F2\'C4\'DC\'B9\'BB\'BD\'CF\'BA\'C3\'B5\'C4\'CA\'B5\'CF\'D6\'B6\'E0\'CC\'AC\'A3\'AC\'D5\'E2\'C0\'EF\'D4\'DD\'C7\'D2\'BD\'AB\'C6\'E4\'B6\'A8\'D2\'E5\'CE\'AA\'BF\'D5\'BA\'AF\'CA\'FD\'D2\'D4\'B1\'E3\'C1\'B4\'BD\'D3\'A1\'A3 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b size} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b build} (T data[], size_t {\b size})=0\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual void {\b insert} (T value)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual T {\b top} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual T {\b extract} ()\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Protected \'CA\'F4\'D0\'D4\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
size_t {\b size_}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<class T>\par
class Heap< T >\par
}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B3\'E9\'CF\'F3\'B6\'D1 \par
}

{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C4\'A3\'B0\'E5\'B2\'CE\'CA\'FD\par}
\pard\plain \s80\li0\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i T} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-08-10 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Heap.h} \'B5\'DA {\b 28} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B9\'B9\'D4\'EC\'BC\'B0\'CE\'F6\'B9\'B9\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v Heap\:Heap< T >}
{\xe \v Heap< T >\:Heap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > {\b Heap}< T >{\b ::Heap} (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAHY}
{\bkmkend AAAAAAAAHY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Heap.h} \'B5\'DA {\b 31} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v ~Heap\:Heap< T >}
{\xe \v Heap< T >\:~Heap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > virtual {\b Heap}< T >::~{\b Heap} (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAHZ}
{\bkmkend AAAAAAAAHZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destroy the {\b Heap} object Heap\'B5\'C4\'CE\'F6\'B9\'B9\'BA\'AF\'CA\'FD\'A1\'A3\'D3\'C9\'D3\'DA\'CE\'D2\'C3\'C7\'B5\'C4\'C1\'B4\'BD\'D3\'BF\'E2\'CA\'C7\'BE\'B2\'CC\'AC\'BF\'E2\'A3\'AC\'D2\'F2\'B4\'CB\'CE\'DE\'B7\'A8\'BD\'AB\'CE\'F6\'B9\'B9\'BA\'AF\'CA\'FD\'B6\'A8\'D2\'E5\'B3\'C9\'B4\'BF\'D0\'E9\'BA\'AF\'CA\'FD\'A1\'A3 \'C8\'E7\'B9\'FB\'CA\'B9\'D3\'C3\'B6\'AF\'CC\'AC\'C1\'B4\'BD\'D3\'BF\'E2\'B5\'C4\'BB\'B0\'D4\'F2\'C4\'DC\'B9\'BB\'BD\'CF\'BA\'C3\'B5\'C4\'CA\'B5\'CF\'D6\'B6\'E0\'CC\'AC\'A3\'AC\'D5\'E2\'C0\'EF\'D4\'DD\'C7\'D2\'BD\'AB\'C6\'E4\'B6\'A8\'D2\'E5\'CE\'AA\'BF\'D5\'BA\'AF\'CA\'FD\'D2\'D4\'B1\'E3\'C1\'B4\'BD\'D3\'A1\'A3 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-08-10 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Heap.h} \'B5\'DA {\b 43} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v build\:Heap< T >}
{\xe \v Heap< T >\:build}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > virtual void {\b Heap}< T >::build (T  {\i data}[], size_t  {\i size}){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAADR}
{\bkmkend AAAAAAAADR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA {\b BinaryHeap< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAADQ \\*MERGEFORMAT}{\fldrslt pagenum}}}) \'C4\'DA\'B1\'BB\'CA\'B5\'CF\'D6.}\par
}
{\xe \v extract\:Heap< T >}
{\xe \v Heap< T >\:extract}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > virtual T {\b Heap}< T >::extract (){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAADU}
{\bkmkend AAAAAAAADU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'B1\'BB {\b BinaryHeap< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAADT \\*MERGEFORMAT}{\fldrslt pagenum}}}) \'D6\'D8\'D4\'D8.}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Heap.h} \'B5\'DA {\b 60} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_heap_a939b7f03924d3901e8bebfdaadfd9513_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v insert\:Heap< T >}
{\xe \v Heap< T >\:insert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > virtual void {\b Heap}< T >::insert (T  {\i value}){\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAADW}
{\bkmkend AAAAAAAADW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'B1\'BB {\b BinaryHeap< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAADV \\*MERGEFORMAT}{\fldrslt pagenum}}}) \'D6\'D8\'D4\'D8.}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Heap.h} \'B5\'DA {\b 49} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_heap_a412ca53eb7bc9124283e17207da9beb6_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v size\:Heap< T >}
{\xe \v Heap< T >\:size}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > size_t {\b Heap}< T >::size () const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIA}
{\bkmkend AAAAAAAAIA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Heap.h} \'B5\'DA {\b 45} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_heap_a86d5e0f109c5da10a1f0f18ec644a3d8_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v top\:Heap< T >}
{\xe \v Heap< T >\:top}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > virtual T {\b Heap}< T >::top () const{\f2 [inline]}, {\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAADY}
{\bkmkend AAAAAAAADY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'B1\'BB {\b BinaryHeap< T >} ({\i p.{\field\fldedit {\*\fldinst PAGEREF AAAAAAAADX \\*MERGEFORMAT}{\fldrslt pagenum}}}) \'D6\'D8\'D4\'D8.}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Heap.h} \'B5\'DA {\b 54} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\'B3\'C9\'D4\'B1\'B1\'E4\'C1\'BF\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v size_\:Heap< T >}
{\xe \v Heap< T >\:size_}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class T > size_t {\b Heap}< T >::size_{\f2 [protected]}}}
\par
{\bkmkstart AAAAAAAAIB}
{\bkmkend AAAAAAAAIB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Heap.h} \'B5\'DA {\b 67} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'B8\'C3\'C0\'E0\'B5\'C4\'CE\'C4\'B5\'B5\'D3\'C9\'D2\'D4\'CF\'C2\'CE\'C4\'BC\'FE\'C9\'FA\'B3\'C9:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b Heap.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
job_unit\'C0\'E0 \'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v job_unit}
{\xe \v job_unit}
{\bkmkstart AAAAAAAAIC}
{\bkmkend AAAAAAAAIC}
\par
{
{\f2 #include <ProcessManager.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b job_unit} (unsigned int _id, int _pid, {\b job_state} _state, int _argc, char *_argv[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PrintJob} (int output_fd=STDOUT_FILENO)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator==} (const {\b job_unit} &rhs) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator!=} (const {\b job_unit} &rhs) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<} (const {\b job_unit} &rhs) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator>} (const {\b job_unit} &rhs) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator<=} (const {\b job_unit} &rhs) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b operator>=} (const {\b job_unit} &rhs) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public \'CA\'F4\'D0\'D4\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned int {\b id}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
pid_t {\b pid}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b job_state} {\b state}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b argc}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char {\b argv} [{\b MAX_ARGUMENT_NUMBER}][{\b BUFFER_SIZE}]\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 30} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B9\'B9\'D4\'EC\'BC\'B0\'CE\'F6\'B9\'B9\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v job_unit\:job_unit}
{\xe \v job_unit\:job_unit}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
job_unit::job_unit (unsigned int  {\i _id}, int  {\i _pid}, {\b job_state}  {\i _state}, int  {\i _argc}, char *  {\i _argv}[])}}
\par
{\bkmkstart AAAAAAAAID}
{\bkmkend AAAAAAAAID}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.cpp} \'B5\'DA {\b 12} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v operator!=\:job_unit}
{\xe \v job_unit\:operator!=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool job_unit::operator!= (const {\b job_unit} &  {\i rhs}) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIE}
{\bkmkend AAAAAAAAIE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 45} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v operator<\:job_unit}
{\xe \v job_unit\:operator<}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool job_unit::operator< (const {\b job_unit} &  {\i rhs}) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIF}
{\bkmkend AAAAAAAAIF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 50} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v operator<=\:job_unit}
{\xe \v job_unit\:operator<=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool job_unit::operator<= (const {\b job_unit} &  {\i rhs}) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIG}
{\bkmkend AAAAAAAAIG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 60} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v operator==\:job_unit}
{\xe \v job_unit\:operator==}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool job_unit::operator== (const {\b job_unit} &  {\i rhs}) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIH}
{\bkmkend AAAAAAAAIH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 40} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v operator>\:job_unit}
{\xe \v job_unit\:operator>}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool job_unit::operator> (const {\b job_unit} &  {\i rhs}) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAII}
{\bkmkend AAAAAAAAII}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 55} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v operator>=\:job_unit}
{\xe \v job_unit\:operator>=}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool job_unit::operator>= (const {\b job_unit} &  {\i rhs}) const{\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIJ}
{\bkmkend AAAAAAAAIJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 65} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v PrintJob\:job_unit}
{\xe \v job_unit\:PrintJob}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void job_unit::PrintJob (int  {\i output_fd} = {\f2 STDOUT_FILENO})}}
\par
{\bkmkstart AAAAAAAAIK}
{\bkmkend AAAAAAAAIK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.cpp} \'B5\'DA {\b 21} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classjob__unit_a78f5ab99ea4816004faf381068851a8f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\'B3\'C9\'D4\'B1\'B1\'E4\'C1\'BF\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v argc\:job_unit}
{\xe \v job_unit\:argc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int job_unit::argc}}
\par
{\bkmkstart AAAAAAAAIL}
{\bkmkend AAAAAAAAIL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 74} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v argv\:job_unit}
{\xe \v job_unit\:argv}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char job_unit::argv[{\b MAX_ARGUMENT_NUMBER}][{\b BUFFER_SIZE}]}}
\par
{\bkmkstart AAAAAAAAIM}
{\bkmkend AAAAAAAAIM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 75} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v id\:job_unit}
{\xe \v job_unit\:id}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int job_unit::id}}
\par
{\bkmkstart AAAAAAAAIN}
{\bkmkend AAAAAAAAIN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 71} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v pid\:job_unit}
{\xe \v job_unit\:pid}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
pid_t job_unit::pid}}
\par
{\bkmkstart AAAAAAAAIO}
{\bkmkend AAAAAAAAIO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 72} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v state\:job_unit}
{\xe \v job_unit\:state}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b job_state} job_unit::state}}
\par
{\bkmkstart AAAAAAAAIP}
{\bkmkend AAAAAAAAIP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 73} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'B8\'C3\'C0\'E0\'B5\'C4\'CE\'C4\'B5\'B5\'D3\'C9\'D2\'D4\'CF\'C2\'CE\'C4\'BC\'FE\'C9\'FA\'B3\'C9:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b ProcessManager.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b ProcessManager.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BinaryHeap< T >::OutOfMemory\'C0\'E0 \'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v BinaryHeap< T >::OutOfMemory}
{\xe \v BinaryHeap< T >::OutOfMemory}
{\bkmkstart AAAAAAAAEC}
{\bkmkend AAAAAAAAEC}
\par
{
{\f2 #include <BinaryHeap.h>}}\par
\'C0\'E0 BinaryHeap< T >::OutOfMemory \'BC\'CC\'B3\'D0\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_binary_heap_1_1_out_of_memory__inherit__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
BinaryHeap< T >::OutOfMemory \'B5\'C4\'D0\'AD\'D7\'F7\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_binary_heap_1_1_out_of_memory__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
template<class T>\par
class BinaryHeap< T >::OutOfMemory\par
}
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 148} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'B8\'C3\'C0\'E0\'B5\'C4\'CE\'C4\'B5\'B5\'D3\'C9\'D2\'D4\'CF\'C2\'CE\'C4\'BC\'FE\'C9\'FA\'B3\'C9:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b BinaryHeap.h}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Parser\'C0\'E0 \'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v Parser}
{\xe \v Parser}
{\bkmkstart AAAAAAAAIQ}
{\bkmkend AAAAAAAAIQ}
\par
{
{\f2 #include <Parser.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Parser} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~Parser} ()=0\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destroy the {\b Parser} object }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BE\'B2\'CC\'AC Public \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b shell_pipe} ({\b Console} *model, {\b Display} *view, {\b Executor} *controller, int &argc, char *argv[], char *env[])\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b shell_parser} ({\b Console} *model, {\b Display} *view, {\b Executor} *controller, int &argc, char *argv[], char *env[])\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private \'C0\'E0\'D0\'CD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum \{ {\b SUCCESS} = 0
, {\b EXIT} = 1
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BE\'B2\'CC\'AC Private \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b shell_execute} ({\b Console} *model, {\b Display} *view, {\b Executor} *controller, int &argc, char *argv[], char *env[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D6\'B4\'D0\'D0shell }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
\'D4\'DA\'CE\'C4\'BC\'FE {\b Parser.h} \'B5\'DA {\b 19} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B3\'C9\'D4\'B1\'C3\'B6\'BE\'D9\'C0\'E0\'D0\'CD\'CB\'B5\'C3\'F7\par
\pard\plain 
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
anonymous enum{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIR}
{\bkmkend AAAAAAAAIR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C3\'B6\'BE\'D9\'D6\'B5:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v SUCCESS\:Parser}
{\xe \v Parser\:SUCCESS}
{\qr SUCCESS{\bkmkstart AAAAAAAAIS}
{\bkmkend AAAAAAAAIS}
\cell }{\cell }{\row }
{\xe \v EXIT\:Parser}
{\xe \v Parser\:EXIT}
{\qr EXIT{\bkmkstart AAAAAAAAIT}
{\bkmkend AAAAAAAAIT}
\cell }{\cell }{\row }
}
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Parser.h} \'B5\'DA {\b 22} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B9\'B9\'D4\'EC\'BC\'B0\'CE\'F6\'B9\'B9\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v Parser\:Parser}
{\xe \v Parser\:Parser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
Parser::Parser (){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAAIU}
{\bkmkend AAAAAAAAIU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Parser.h} \'B5\'DA {\b 43} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v ~Parser\:Parser}
{\xe \v Parser\:~Parser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
virtual Parser::~Parser (){\f2 [pure virtual]}}}
\par
{\bkmkstart AAAAAAAAIV}
{\bkmkend AAAAAAAAIV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Destroy the {\b Parser} object }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-19 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v shell_execute\:Parser}
{\xe \v Parser\:shell_execute}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Parser::shell_execute ({\b Console} *  {\i model}, {\b Display} *  {\i view}, {\b Executor} *  {\i controller}, int &  {\i argc}, char *  {\i argv}[], char *  {\i env}[]){\f2 [static]}, {\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAIW}
{\bkmkend AAAAAAAAIW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D6\'B4\'D0\'D0shell }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i model} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i view} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i controller} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argc} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argv} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i env} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true \par
false \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-19 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Parser.cpp} \'B5\'DA {\b 268} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_parser_a0e9979aa186316e115791fd4c72cbd63_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_parser_a0e9979aa186316e115791fd4c72cbd63_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v shell_parser\:Parser}
{\xe \v Parser\:shell_parser}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int Parser::shell_parser ({\b Console} *  {\i model}, {\b Display} *  {\i view}, {\b Executor} *  {\i controller}, int &  {\i argc}, char *  {\i argv}[], char *  {\i env}[]){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAIX}
{\bkmkend AAAAAAAAIX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D6\'D8\'B6\'A8\'CF\'F2\'B4\'A6\'C0\'ED\par
\'B1\'EA\'D7\'BC\'CA\'E4\'C8\'EB\'D6\'D8\'B6\'A8\'CF\'F2\par
\'B1\'EA\'D7\'BC\'CA\'E4\'B3\'F6\'D6\'D8\'B6\'A8\'CF\'F2\par
\'B1\'EA\'D7\'BC\'B4\'ED\'CE\'F3\'CA\'E4\'B3\'F6\'D6\'D8\'B6\'A8\'CF\'F2\par
\'D7\'B7\'BC\'D3\par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Parser.cpp} \'B5\'DA {\b 132} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_parser_adf72be2d9687a7f44808fe14f0a824b6_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_parser_adf72be2d9687a7f44808fe14f0a824b6_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v shell_pipe\:Parser}
{\xe \v Parser\:shell_pipe}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool Parser::shell_pipe ({\b Console} *  {\i model}, {\b Display} *  {\i view}, {\b Executor} *  {\i controller}, int &  {\i argc}, char *  {\i argv}[], char *  {\i env}[]){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAAIY}
{\bkmkend AAAAAAAAIY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Parser.cpp} \'B5\'DA {\b 27} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_parser_afa0bf2c3038fa7d7e114cbe603e16dfc_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_parser_afa0bf2c3038fa7d7e114cbe603e16dfc_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'B8\'C3\'C0\'E0\'B5\'C4\'CE\'C4\'B5\'B5\'D3\'C9\'D2\'D4\'CF\'C2\'CE\'C4\'BC\'FE\'C9\'FA\'B3\'C9:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b Parser.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b Parser.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ProcessManager\'C0\'E0 \'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v ProcessManager}
{\xe \v ProcessManager}
{\bkmkstart AAAAAAAAIZ}
{\bkmkend AAAAAAAAIZ}
\par
{
{\f2 #include <ProcessManager.h>}}\par
ProcessManager \'B5\'C4\'D0\'AD\'D7\'F7\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_process_manager__coll__graph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Public \'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b ProcessManager} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
virtual {\b ~ProcessManager} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PrintJobList} (int output_fd=STDOUT_FILENO) const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b PrintJobListDone} (int output_fd=STDOUT_FILENO)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned int {\b JobInsert} (int pid, {\b job_state} state, int argc, char *argv[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CC\'ED\'BC\'D3\'BD\'F8\'B3\'CC }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b JobRemove} ({\b job_unit} *job)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C9\'BE\'B3\'FD\'BD\'F8\'B3\'CC }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b JobRemove} (std::set< {\b job_unit} >::iterator &job)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b ForeGround} (unsigned int jobid)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b BackGround} (unsigned int jobid)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Private \'CA\'F4\'D0\'D4\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Heap}< unsigned int > * {\b job_heap}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::set< class {\b job_unit} > {\b jobs}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 78} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B9\'B9\'D4\'EC\'BC\'B0\'CE\'F6\'B9\'B9\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v ProcessManager\:ProcessManager}
{\xe \v ProcessManager\:ProcessManager}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ProcessManager::ProcessManager ()}}
\par
{\bkmkstart AAAAAAAAJA}
{\bkmkend AAAAAAAAJA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.cpp} \'B5\'DA {\b 77} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_process_manager_a41b83a8ef0a801ca3aee9a3d82568ac1_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ~ProcessManager\:ProcessManager}
{\xe \v ProcessManager\:~ProcessManager}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
ProcessManager::~ProcessManager (){\f2 [virtual]}}}
\par
{\bkmkstart AAAAAAAAJB}
{\bkmkend AAAAAAAAJB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.cpp} \'B5\'DA {\b 90} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B3\'C9\'D4\'B1\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v BackGround\:ProcessManager}
{\xe \v ProcessManager\:BackGround}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int ProcessManager::BackGround (unsigned int  {\i jobid})}}
\par
{\bkmkstart AAAAAAAAJC}
{\bkmkend AAAAAAAAJC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.cpp} \'B5\'DA {\b 205} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_process_manager_a5497e2786bfea99f905ca8951abb36f8_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v ForeGround\:ProcessManager}
{\xe \v ProcessManager\:ForeGround}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int ProcessManager::ForeGround (unsigned int  {\i jobid})}}
\par
{\bkmkstart AAAAAAAAJD}
{\bkmkend AAAAAAAAJD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.cpp} \'B5\'DA {\b 176} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_process_manager_ac3e1dc05eb4aeb4080b3d16ef5ff36b6_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_process_manager_ac3e1dc05eb4aeb4080b3d16ef5ff36b6_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v JobInsert\:ProcessManager}
{\xe \v ProcessManager\:JobInsert}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int ProcessManager::JobInsert (int  {\i pid}, {\b job_state}  {\i state}, int  {\i argc}, char *  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAJE}
{\bkmkend AAAAAAAAJE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CC\'ED\'BC\'D3\'BD\'F8\'B3\'CC }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i pid} \cell }{\'BD\'F8\'B3\'CC\'BA\'C5 \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i state} \cell }{\'D7\'B4\'CC\'AC \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argc} \cell }{\'B2\'CE\'CA\'FD\'B8\'F6\'CA\'FD \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argv} \cell }{\'B2\'CE\'CA\'FD\'C1\'D0\'B1\'ED \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
unsigned int \'BD\'F8\'B3\'CC\'D7\'F7\'D2\'B5\'BA\'C5\'A3\'AC0\'B1\'ED\'CA\'BE\'CC\'ED\'BC\'D3\'CA\'A7\'B0\'DC \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-20 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.cpp} \'B5\'DA {\b 140} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_process_manager_a165280bdbc9eb678b83f3340fde4c9ca_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_process_manager_a165280bdbc9eb678b83f3340fde4c9ca_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v JobRemove\:ProcessManager}
{\xe \v ProcessManager\:JobRemove}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ProcessManager::JobRemove ({\b job_unit} *  {\i job})}}
\par
{\bkmkstart AAAAAAAAJF}
{\bkmkend AAAAAAAAJF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C9\'BE\'B3\'FD\'BD\'F8\'B3\'CC }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i job} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-21 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.cpp} \'B5\'DA {\b 159} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_process_manager_abb124eed9ed603f5de81438f94c2e342_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_process_manager_abb124eed9ed603f5de81438f94c2e342_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v JobRemove\:ProcessManager}
{\xe \v ProcessManager\:JobRemove}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ProcessManager::JobRemove (std::set< {\b job_unit} >::iterator &  {\i job})}}
\par
{\bkmkstart AAAAAAAAJG}
{\bkmkend AAAAAAAAJG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.cpp} \'B5\'DA {\b 168} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_process_manager_aff12fe01667b1eb668d90092afba170d_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PrintJobList\:ProcessManager}
{\xe \v ProcessManager\:PrintJobList}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ProcessManager::PrintJobList (int  {\i output_fd} = {\f2 STDOUT_FILENO}) const}}
\par
{\bkmkstart AAAAAAAAJH}
{\bkmkend AAAAAAAAJH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.cpp} \'B5\'DA {\b 95} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_process_manager_aed9ebd7ba0bc7e16c0a5df542900ab45_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v PrintJobListDone\:ProcessManager}
{\xe \v ProcessManager\:PrintJobListDone}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void ProcessManager::PrintJobListDone (int  {\i output_fd} = {\f2 STDOUT_FILENO})}}
\par
{\bkmkstart AAAAAAAAJI}
{\bkmkend AAAAAAAAJI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.cpp} \'B5\'DA {\b 103} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_process_manager_ade7e167c72e4090133356c01e7c6f19b_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "class_process_manager_ade7e167c72e4090133356c01e7c6f19b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\'B3\'C9\'D4\'B1\'B1\'E4\'C1\'BF\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v job_heap\:ProcessManager}
{\xe \v ProcessManager\:job_heap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Heap}<unsigned int>* ProcessManager::job_heap{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAJJ}
{\bkmkend AAAAAAAAJJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 82} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v jobs\:ProcessManager}
{\xe \v ProcessManager\:jobs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::set<class {\b job_unit}> ProcessManager::jobs{\f2 [private]}}}
\par
{\bkmkstart AAAAAAAAJK}
{\bkmkend AAAAAAAAJK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'B5\'DA {\b 83} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'B8\'C3\'C0\'E0\'B5\'C4\'CE\'C4\'B5\'B5\'D3\'C9\'D2\'D4\'CF\'C2\'CE\'C4\'BC\'FE\'C9\'FA\'B3\'C9:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
inc/{\b ProcessManager.h}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
src/{\b ProcessManager.cpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CE\'C4\'BC\'FE\'CB\'B5\'C3\'F7{\tc \v \'CE\'C4\'BC\'FE\'CB\'B5\'C3\'F7}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doc/\'BC\'BC\'CA\'F5\'CE\'C4\'B5\'B5.md \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v doc/\'BC\'BC\'CA\'F5\'CE\'C4\'B5\'B5.md}
{\xe \v doc/\'BC\'BC\'CA\'F5\'CE\'C4\'B5\'B5.md}
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
doc/\'D3\'C3\'BB\'A7\'CA\'D6\'B2\'E1.md \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v doc/\'D3\'C3\'BB\'A7\'CA\'D6\'B2\'E1.md}
{\xe \v doc/\'D3\'C3\'BB\'A7\'CA\'D6\'B2\'E1.md}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/BinaryHeap.h \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v inc/BinaryHeap.h}
{\xe \v inc/BinaryHeap.h}
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'FE\'B2\'E6\'B6\'D1 }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Heap.h"}\par
{\f2 #include <assert.h>}\par
{\f2 #include <exception>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid BinaryHeap.h \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_binary_heap_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'B4\'CB\'CD\'BC\'D5\'B9\'CA\'BE\'B8\'C3\'CE\'C4\'BC\'FE\'D6\'B1\'BD\'D3\'BB\'F2\'BC\'E4\'BD\'D3\'B5\'C4\'B1\'BB\'C4\'C4\'D0\'A9\'CE\'C4\'BC\'FE\'D2\'FD\'D3\'C3\'C1\'CB:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_binary_heap_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b BinaryHeap< T >}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'FE\'CF\'EE\'B6\'D1\'A3\'AC\'D0\'A1\'B8\'F9\'B6\'D1 }}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b BinaryHeap< T >::ExtractEmptyHeap}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b BinaryHeap< T >::OutOfMemory}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B1\'E4\'C1\'BF\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr size_t {\b HeapBlockSize} = 1024\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'FE\'B2\'E6\'B6\'D1 \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-20\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B1\'E4\'C1\'BF\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v HeapBlockSize\:BinaryHeap.h}
{\xe \v BinaryHeap.h\:HeapBlockSize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr size_t HeapBlockSize = 1024{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b BinaryHeap.h} \'B5\'DA {\b 19} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
BinaryHeap.h\par \pard\plain 
{\tc\tcl2 \v inc/BinaryHeap.h}
{\xe \v inc/BinaryHeap.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #ifndef _BINARY_HEAP_H_}\par
00013 {\cf21 #define _BINARY_HEAP_H_}\par
00014 \par
00015 {\cf21 #include "Heap.h"}\par
00016 {\cf21 #include <assert.h>}\par
00017 {\cf21 #include <exception>}\par
00018 \par
00019 {\cf17 static} {\cf17 constexpr} {\cf18 size_t} HeapBlockSize = 1024;   {\cf20 // \'C4\'AC\'C8\'CF\'B6\'D1\'B4\'F3\'D0\'A1}\par
00020 \par
00021 {\cf20 // template <class T>}\par
00022 {\cf20 // static constexpr T INF = -0x7f7f7f7f;         // \'B8\'BA\'CE\'DE\'C7\'EE}\par
00023 \par
00033 {\cf17 template} <{\cf17 class} T>\par
00034 {\cf17 class }BinaryHeap : {\cf17 public} Heap<T>\par
00035 \{\par
00036     {\cf20 // \'D3\'C9\'D3\'DA\'B8\'B8\'C0\'E0\'CA\'C7\'C4\'A3\'B0\'E5\'C0\'E0\'A3\'AC\'D2\'F2\'B4\'CB\'D7\'D3\'C0\'E0\'D4\'DA\'CA\'B9\'D3\'C3\'CA\'B1\'B1\'D8\'D0\'EB\'CA\'B9\'D3\'C3using\'D2\'FD\'C8\'EB\'C3\'FC\'C3\'FB\'BF\'D5\'BC\'E4\'A3\'AC}\par
00037     {\cf20 // \'BB\'F2\'D5\'DF\'D3\'C3this\'D6\'B8\'D5\'EB\'CA\'B5\'CF\'D6\'B6\'E0\'CC\'AC\'A3\'AC\'D5\'E2\'D1\'F9\'B2\'C5\'C4\'DC\'D5\'FD\'C8\'B7\'B9\'B9\'D4\'EC\'B8\'B8\'C0\'E0\'B5\'C4\'C4\'A3\'B0\'E5\'C0\'E0\'BA\'AF\'CA\'FD}\par
00038     {\cf17 using }Heap<T>::size_;   \par
00039 \par
00040     {\cf17 public}:\par
00041         BinaryHeap({\cf18 size_t} heap_capacity = HeapBlockSize)\par
00042         : Heap<T>(), capacity_(heap_capacity)\par
00043         \{\par
00044             assert(heap_capacity > 0);\par
00045 \par
00046             node = {\cf17 new} T[heap_capacity+1];  {\cf20 // \'B7\'D6\'C5\'E4\'C4\'DA\'B4\'E6}\par
00047             {\cf19 if} (node == NULL)               {\cf20 // \'D2\'EC\'B3\'A3\'B4\'A6\'C0\'ED}\par
00048                 {\cf19 throw} OutOfMemory();\par
00049         \}\par
00050 \par
00051         BinaryHeap(T data[], {\cf18 size_t} size, {\cf18 size_t} heap_capacity = HeapBlockSize)\par
00052         : Heap<T>(), capacity_(heap_capacity)\par
00053         \{\par
00054             node = {\cf17 new} T[(size>heap_capacity?size:heap_capacity) + 1];  {\cf20 // \'B7\'D6\'C5\'E4\'C4\'DA\'B4\'E6}\par
00055             {\cf19 if} (node == NULL)               {\cf20 // \'D2\'EC\'B3\'A3\'B4\'A6\'C0\'ED}\par
00056                 {\cf19 throw} OutOfMemory();\par
00057 \par
00058             size_ = size;\par
00059             {\cf19 for} ({\cf18 size_t} i = 1; i <= size; ++i) {\cf20 // \'CA\'FD\'D7\'E9\'BF\'BD\'B1\'B4}\par
00060                 node[i] = data[i-1];\par
00061             \par
00062             build_heap();                        {\cf20 // \'BD\'A8\'B6\'D1}\par
00063         \}\par
00064 \par
00065         {\cf17 virtual} ~BinaryHeap()\par
00066         \{\par
00067             {\cf17 delete} [] node;\par
00068         \}\par
00069 \par
00070         {\cf17 virtual} {\cf18 void} build(T data[], {\cf18 size_t} size)\par
00071         \{\par
00072             {\cf19 while} (capacity_ < size)    {\cf20 // \'C4\'DA\'B4\'E6\'B2\'BB\'B9\'BB\'D4\'F2\'B7\'D6\'C5\'E4\'BF\'D5\'BC\'E4}\par
00073                 AllocMoreSpace();\par
00074             size_ = size;\par
00075             {\cf19 for} ({\cf18 size_t} i = 0; i < size; ++i)   {\cf20 // \'BF\'BD\'B1\'B4\'CA\'FD\'D7\'E9}\par
00076                 node[i+1] = data[i];\par
00077             \par
00078             {\cf19 for} ({\cf18 size_t} i = (size_>>1); i>0; --i)    {\cf20 //\'B4\'D3 n/2 \'BF\'AA\'CA\'BC}\par
00079             \{\par
00080                 {\cf18 size_t} p, child;\par
00081                 T X = node[i];\par
00082                 {\cf19 for} (p = i; (p<<1) <= size_; p = child) {\cf20 //\'CF\'C2\'C2\'CB}\par
00083                 \{\par
00084                     child=(p<<1);   {\cf20 //\'D1\'B0\'D5\'D2\'D7\'EE\'D0\'A1\'B5\'C4\'BA\'A2\'D7\'D3}\par
00085                     {\cf19 if} (child != size_ && node[child+1] < node[child])\par
00086                         ++child;\par
00087                     \par
00088                     {\cf19 if} (X > node[child])\par
00089                         node[p] = node[child];\par
00090                     {\cf19 else}\par
00091                         {\cf19 break};\par
00092                 \}\par
00093                 node[p] = X;\par
00094             \}\par
00095         \}\par
00096 \par
00097         {\cf17 virtual} {\cf18 void} insert(T value)\par
00098         \{\par
00099             {\cf19 if} (size_ + 2 >= capacity_)\par
00100             \{\par
00101                 AllocMoreSpace();    {\cf20 // \'C4\'DA\'B4\'E6\'B2\'BB\'B9\'BB\'D4\'F2\'B7\'D6\'C5\'E4\'BF\'D5\'BC\'E4}\par
00102             \}\par
00103 \par
00104             {\cf18 int} p;\par
00105             {\cf19 for} (p = ++size_; node[p>>1] > value && p > 1; p = p>>1)    {\cf20 //\'CF\'C2\'C2\'CB}\par
00106                 node[p] = node[p>>1];   {\cf20 //\'B1\'DC\'C3\'E2\'CA\'B9\'D3\'C3swap\'BD\'BB\'BB\'BB}\par
00107             node[p] = value; {\cf20 //\'BD\'AB\'BD\'DA\'B5\'E3\'B2\'E5\'C8\'EB\'D4\'DA\'D5\'FD\'C8\'B7\'B5\'C4\'CE\'BB\'D6\'C3\'C9\'CF}\par
00108         \}\par
00109 \par
00110         {\cf17 virtual} T top(){\cf17  const}\par
00111 {\cf17         }\{\par
00112             {\cf19 if} (size_ == 0)\par
00113                 {\cf19 throw} ExtractEmptyHeap();\par
00114             {\cf19 return} node[1];\par
00115         \}\par
00116 \par
00117         {\cf17 virtual} T extract()\par
00118         \{\par
00119             {\cf19 if} (size_ == 0)   {\cf20 //\'C8\'E7\'B9\'FB\'B6\'D1\'CA\'C7\'BF\'D5\'B5\'C4}\par
00120                 {\cf19 throw} ExtractEmptyHeap();    {\cf20 //\'C4\'C7\'C3\'B4\'CE\'AA\'D2\'EC\'B3\'A3}\par
00121 \par
00122             T top, last;\par
00123             top = node[1];\par
00124             last = node[size_--];\par
00125 \par
00126             {\cf18 size_t} p, child;\par
00127             {\cf19 for} (p = 1; (p<<1) <= size_; p = child)  {\cf20 //\'CF\'C2\'C2\'CB}\par
00128             \{\par
00129                 child = (p<<1);   {\cf20 //\'D1\'B0\'D5\'D2\'D7\'EE\'D0\'A1\'B5\'C4\'BA\'A2\'D7\'D3}\par
00130                 {\cf19 if} (child != size_ && node[child+1] < node[child])\par
00131                     ++child;\par
00132                 \par
00133                 {\cf19 if} (last >node[child])    {\cf20 // \'C8\'E7\'B9\'FB\'CE\'B4\'B5\'BD\'BA\'CF\'CA\'CA\'B5\'C4\'CE\'BB\'D6\'C3}\par
00134                     node[p]=node[child];  {\cf20 // \'BD\'AB\'BA\'A2\'D7\'D3\'CC\'E1\'C9\'CF\'C0\'B4}\par
00135                 {\cf19 else}\par
00136                     {\cf19 break};\par
00137             \}\par
00138 \par
00139             node[p] = last;\par
00140             {\cf19 return} top;\par
00141         \}\par
00142 \par
00143     {\cf17 protected}:\par
00144         {\cf18 size_t} capacity_;  {\cf20 // \'D7\'EE\'B4\'F3\'C8\'DD\'C1\'BF}\par
00145         T *node;           {\cf20 // \'CA\'FD\'BE\'DD}\par
00146 \par
00147         {\cf17 class }ExtractEmptyHeap : {\cf17 public} std::exception \{\};\par
00148         {\cf17 class }OutOfMemory : {\cf17 public} std::exception \{\};\par
00149 \par
00150         {\cf18 void} AllocMoreSpace()   {\cf20 // \'B6\'AF\'CC\'AC\'CA\'FD\'D7\'E9\'B7\'D6\'C5\'E4\'BF\'D5\'BC\'E4}\par
00151         \{\par
00152             capacity_<<=1;      {\cf20 // \'C8\'DD\'C1\'BF\'B7\'AD\'B1\'B6}\par
00153             T *newNode = {\cf17 new} T[capacity_];\par
00154             {\cf19 if} (newNode == NULL)\par
00155             \{\par
00156                 {\cf19 throw} OutOfMemory();    {\cf20 // \'B6\'D1\'C4\'DA\'B4\'E6\'B2\'BB\'D7\'E3\'D2\'EC\'B3\'A3}\par
00157             \}\par
00158 \par
00159             {\cf19 for} ({\cf18 size_t} i = 0; i < size_; ++i)\par
00160                 std::swap(node[i], newNode[i]); {\cf20 // \'D6\'B1\'BD\'D3\'B5\'D8\'D6\'B7\'BD\'BB\'BB\'BB\'A3\'AC\'CC\'E1\'B8\'DF\'D0\'A7\'C2\'CA}\par
00161             {\cf17 delete} [] node;\par
00162             node = std::move(newNode);          {\cf20 // \'D2\'C6\'B6\'AF\'BF\'BD\'B1\'B4\'A3\'AC\'D0\'A7\'C2\'CA\'B8\'FC\'BC\'D1}\par
00163         \}\par
00164 \par
00165     {\cf17 private}:\par
00166         {\cf18 void} build_heap()\par
00167         \{\par
00168             {\cf19 for} ({\cf18 size_t} i = (size_>>1); i>0; --i)    {\cf20 //\'B4\'D3 n/2 \'BF\'AA\'CA\'BC}\par
00169             \{\par
00170                 {\cf18 size_t} p, child;\par
00171                 T X = node[i];\par
00172                 {\cf19 for} (p = i; (p<<1) <= size_; p = child) {\cf20 //percolate down}\par
00173                 \{\par
00174                     child=(p<<1);   {\cf20 //\'D1\'B0\'D5\'D2\'D7\'EE\'D0\'A1\'B5\'C4\'BA\'A2\'D7\'D3}\par
00175                     {\cf19 if} (child != size_ && node[child+1] < node[child])\par
00176                         ++child;\par
00177                     \par
00178                     {\cf19 if} (X > node[child])    {\cf20 // \'C8\'E7\'B9\'FB\'CE\'B4\'B5\'BD\'BA\'CF\'CA\'CA\'B5\'C4\'CE\'BB\'D6\'C3}\par
00179                         node[p] = node[child];  {\cf20 // \'BD\'AB\'BA\'A2\'D7\'D3\'CC\'E1\'C9\'CF\'C0\'B4}\par
00180                     {\cf19 else}\par
00181                         {\cf19 break};\par
00182                 \}\par
00183                 node[p] = X;  {\cf20 // \'D5\'D2\'B5\'BD\'C1\'CB\'BA\'CF\'CA\'CA\'B5\'C4\'CE\'BB\'D6\'C3}\par
00184             \}\par
00185         \}\par
00186 \};\par
00187 \par
00188 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/common.h \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v inc/common.h}
{\xe \v inc/common.h}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B9\'B2\'CF\'ED\'BA\'AF\'CA\'FD\'BF\'E2 }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <cmath>}\par
{\f2 #include <string>}\par
{\f2 #include <cassert>}\par
{\f2 #include <sstream>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid common.h \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "common_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'B4\'CB\'CD\'BC\'D5\'B9\'CA\'BE\'B8\'C3\'CE\'C4\'BC\'FE\'D6\'B1\'BD\'D3\'BB\'F2\'BC\'E4\'BD\'D3\'B5\'C4\'B1\'BB\'C4\'C4\'D0\'A9\'CE\'C4\'BC\'FE\'D2\'FD\'D3\'C3\'C1\'CB:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "common_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'EA\'B6\'A8\'D2\'E5\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b ASSERT}(expr,  message)\~ assert((expr) && (message))\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Argument_Display} (const int argc, char *const argv[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C3\'FC\'C1\'EE\'B2\'CE\'CA\'FD\'B4\'F2\'D3\'A1 \'CA\'D7\'D0\'D0\'CF\'D4\'CA\'BE\'B4\'AB\'C8\'EB\'B2\'CE\'CA\'FD\'B8\'F6\'CA\'FD \'BD\'D3\'CF\'C2\'C0\'B4\'D2\'BB\'D0\'D0\'D2\'BB\'B4\'CE\'CF\'D4\'CA\'BE\'C3\'FC\'C1\'EE\'D0\'D0\'D6\'D0\'B5\'C4\'B8\'F7\'B8\'F6\'B2\'CE\'CA\'FD\'A3\'AC\'D2\'D4\'BF\'D5\'B8\'F1\'B7\'D6\'BF\'AA }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > int {\b Binary_Search} (int left, int right, T val, T array[], int cmp(T a, T b))\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'FE\'B7\'D6\'CB\'D1\'CB\'F7\'B2\'E9\'D5\'D2\'A3\'AC\'B2\'E9\'D1\'AF\'B7\'B6\'CE\'A7\'CE\'AA[l, r) }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string & {\b String_Trim} (std::string &s)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C8\'A5\'B5\'F4\'D7\'D6\'B7\'FB\'B4\'AE\'C1\'BD\'B6\'CB\'BF\'D5\'B8\'F1 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<class Type > Type {\b String_to_Number} (const std::string &str)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BD\'AB\'D7\'D6\'B7\'FB\'B4\'AE\'D7\'AA\'BB\'BB\'B3\'C9\'C8\'CE\'D2\'E2\'C0\'E0\'D0\'CD\'B1\'E4\'C1\'BF }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > T {\b Min} (const T &a, const T &b)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > T {\b Max} (const T &a, const T &b)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > T {\b Octal_to_Decimal} (T octalNumber)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B0\'CB\'BD\'F8\'D6\'C6\'D7\'AA\'CA\'AE\'BD\'F8\'D6\'C6 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > T {\b Decimal_to_Octal} (T decimalNumber)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CA\'AE\'BD\'F8\'D6\'C6\'D7\'AA\'B0\'CB\'BD\'F8\'D6\'C6 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > T {\b Hexadecimal_to_Decimal} (T hexadecimalNumber)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CA\'AE\'C1\'F9\'BD\'F8\'D6\'C6\'D7\'AA\'CA\'AE\'BD\'F8\'D6\'C6 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
template<typename T > T {\b Decimal_to_Hexadecimal} (T decimalNumber)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CA\'AE\'BD\'F8\'D6\'C6\'D7\'AA\'CA\'AE\'C1\'F9\'BD\'F8\'D6\'C6 }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b test_timespec_newer} (struct timespec &time1, struct timespec &time2)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
timespec\'CA\'B1\'BC\'E4\'B1\'C8\'BD\'CF }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b test_timespec_older} (struct timespec &time1, struct timespec &time2)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
timespec\'CA\'B1\'BC\'E4\'B1\'C8\'BD\'CF }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B9\'B2\'CF\'ED\'BA\'AF\'CA\'FD\'BF\'E2 \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-15\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.h} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'EA\'B6\'A8\'D2\'E5\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v ASSERT\:common.h}
{\xe \v common.h\:ASSERT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define ASSERT( expr,  message)\~ assert((expr) && (message))}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.h} \'B5\'DA {\b 21} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v Argument_Display\:common.h}
{\xe \v common.h\:Argument_Display}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Argument_Display (const int  {\i argc}, char *const  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C3\'FC\'C1\'EE\'B2\'CE\'CA\'FD\'B4\'F2\'D3\'A1 \'CA\'D7\'D0\'D0\'CF\'D4\'CA\'BE\'B4\'AB\'C8\'EB\'B2\'CE\'CA\'FD\'B8\'F6\'CA\'FD \'BD\'D3\'CF\'C2\'C0\'B4\'D2\'BB\'D0\'D0\'D2\'BB\'B4\'CE\'CF\'D4\'CA\'BE\'C3\'FC\'C1\'EE\'D0\'D0\'D6\'D0\'B5\'C4\'B8\'F7\'B8\'F6\'B2\'CE\'CA\'FD\'A3\'AC\'D2\'D4\'BF\'D5\'B8\'F1\'B7\'D6\'BF\'AA }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argc} \cell }{\'B2\'CE\'CA\'FD\'B8\'F6\'CA\'FD \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argv} \cell }{\'B2\'CE\'CA\'FD\'C1\'D0\'B1\'ED \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-15 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.cpp} \'B5\'DA {\b 16} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "common_8h_a7b6ca73d8ddfa874f4c518907878a50e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Binary_Search\:common.h}
{\xe \v common.h\:Binary_Search}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > int Binary_Search (int  {\i left}, int  {\i right}, T  {\i val}, T  {\i array}[], int   {\i cmp}T a, T b)}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'FE\'B7\'D6\'CB\'D1\'CB\'F7\'B2\'E9\'D5\'D2\'A3\'AC\'B2\'E9\'D1\'AF\'B7\'B6\'CE\'A7\'CE\'AA[l, r) }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C4\'A3\'B0\'E5\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i T} \cell }{\cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i Tp} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i lelt} \cell }{\'B2\'E9\'D5\'D2\'D7\'F3\'C7\'F8\'BC\'E4\'A3\'AC\'B0\'FC\'BA\'AC \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i right} \cell }{\'B2\'E9\'D5\'D2\'D3\'D2\'C7\'F8\'BC\'E4\'A3\'AC\'B2\'BB\'B0\'FC\'BA\'AC \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i val} \cell }{\'B2\'E9\'D5\'D2\'B1\'E4\'C1\'BF \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i array} \cell }{\'CB\'D1\'CB\'F7\'CA\'FD\'D7\'E9 \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i cmp} \cell }{\'B1\'C8\'BD\'CF\'B7\'BD\'B7\'A8 \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
int \'B7\'B5\'BB\'D8\'B6\'D4\'D3\'A6\'D4\'AA\'CB\'D8\'CF\'C2\'B1\'EA\'A3\'AC\'C8\'F4\'C3\'BB\'D3\'D0\'D5\'D2\'B5\'BD\'D4\'F2\'B7\'B5\'BB\'D8-1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-17 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.h} \'B5\'DA {\b 54} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "common_8h_aa8f5903617bda350262b21478437498f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Decimal_to_Hexadecimal\:common.h}
{\xe \v common.h\:Decimal_to_Hexadecimal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > T Decimal_to_Hexadecimal (T  {\i decimalNumber})}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CA\'AE\'BD\'F8\'D6\'C6\'D7\'AA\'CA\'AE\'C1\'F9\'BD\'F8\'D6\'C6 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C4\'A3\'B0\'E5\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i T} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i decimalNumber} \cell }{\'CA\'AE\'BD\'F8\'D6\'C6\'CA\'FD \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
T \'CA\'AE\'C1\'F9\'BD\'F8\'D6\'C6\'CA\'FD \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-19 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.h} \'B5\'DA {\b 204} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v Decimal_to_Octal\:common.h}
{\xe \v common.h\:Decimal_to_Octal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > T Decimal_to_Octal (T  {\i decimalNumber})}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CA\'AE\'BD\'F8\'D6\'C6\'D7\'AA\'B0\'CB\'BD\'F8\'D6\'C6 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C4\'A3\'B0\'E5\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i T} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i decimalNumber} \cell }{\'CA\'AE\'BD\'F8\'D6\'C6\'CA\'FD \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
T \'B0\'CB\'BD\'F8\'D6\'C6\'CA\'FD \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-19 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.h} \'B5\'DA {\b 154} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v Hexadecimal_to_Decimal\:common.h}
{\xe \v common.h\:Hexadecimal_to_Decimal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > T Hexadecimal_to_Decimal (T  {\i hexadecimalNumber})}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'CA\'AE\'C1\'F9\'BD\'F8\'D6\'C6\'D7\'AA\'CA\'AE\'BD\'F8\'D6\'C6 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C4\'A3\'B0\'E5\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i T} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i hexadecimalNumber} \cell }{\'CA\'AE\'C1\'F9\'BD\'F8\'D6\'C6\'CA\'FD \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
T \'CA\'AE\'BD\'F8\'D6\'C6\'CA\'FD \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-19 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.h} \'B5\'DA {\b 179} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "common_8h_aacaa1550ad815f04b4aa25105dddca1b_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v Max\:common.h}
{\xe \v common.h\:Max}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > T Max (const T &  {\i a}, const T &  {\i b}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B1\'C8\'BD\'CF\'C8\'A1\'B4\'F3 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.h} \'B5\'DA {\b 112} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v Min\:common.h}
{\xe \v common.h\:Min}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > T Min (const T &  {\i a}, const T &  {\i b}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B1\'C8\'BD\'CF\'C8\'A1\'D0\'A1 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.h} \'B5\'DA {\b 105} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v Octal_to_Decimal\:common.h}
{\xe \v common.h\:Octal_to_Decimal}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<typename T > T Octal_to_Decimal (T  {\i octalNumber})}}
\par
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B0\'CB\'BD\'F8\'D6\'C6\'D7\'AA\'CA\'AE\'BD\'F8\'D6\'C6 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C4\'A3\'B0\'E5\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i T} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i octalNumber} \cell }{\'B0\'CB\'BD\'F8\'D6\'C6\'CA\'FD \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
T \'CA\'AE\'BD\'F8\'D6\'C6\'CA\'FD \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-19 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.h} \'B5\'DA {\b 129} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "common_8h_a71b31de6be57956acdd485c4a44517c8_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v String_to_Number\:common.h}
{\xe \v common.h\:String_to_Number}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
template<class Type > Type String_to_Number (const std::string &  {\i str})}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BD\'AB\'D7\'D6\'B7\'FB\'B4\'AE\'D7\'AA\'BB\'BB\'B3\'C9\'C8\'CE\'D2\'E2\'C0\'E0\'D0\'CD\'B1\'E4\'C1\'BF }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C4\'A3\'B0\'E5\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i Type} \cell }{\'B7\'B5\'BB\'D8\'C0\'E0\'D0\'CD \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i str} \cell }{\'CC\'E1\'C8\'A1\'B5\'C4\'D7\'D6\'B7\'FB\'B4\'AE \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Type \'D7\'AA\'BB\'AF\'BA\'F3\'B5\'C4\'C0\'E0\'D0\'CD\'B1\'E4\'C1\'BF \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-18 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.h} \'B5\'DA {\b 95} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v String_Trim\:common.h}
{\xe \v common.h\:String_Trim}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string & String_Trim (std::string &  {\i s})}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C8\'A5\'B5\'F4\'D7\'D6\'B7\'FB\'B4\'AE\'C1\'BD\'B6\'CB\'BF\'D5\'B8\'F1 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i s} \cell }{\'D0\'E8\'D2\'AA\'C8\'A5\'B3\'FD\'BF\'D5\'B8\'F1\'B5\'C4\'D7\'D6\'B7\'FB\'B4\'AE \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
std::string& \'C8\'A5\'B3\'FD\'CD\'EA\'BF\'D5\'B8\'F1\'B5\'C4\'D7\'D6\'B7\'FB\'B4\'AE \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-17 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.cpp} \'B5\'DA {\b 27} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "common_8h_a8d405369fdbd9d568f19c4a92d27c71f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v test_timespec_newer\:common.h}
{\xe \v common.h\:test_timespec_newer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool test_timespec_newer (struct timespec &  {\i time1}, struct timespec &  {\i time2}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
timespec\'CA\'B1\'BC\'E4\'B1\'C8\'BD\'CF }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i time1} \cell }{\'CA\'B1\'BC\'E41 \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i time2} \cell }{\'CA\'B1\'BC\'E42 \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true \'C8\'E7\'B9\'FBtime1\'B5\'C4\'CA\'B1\'BC\'E4\'CD\'ED\'D3\'DAtime2\'B5\'C4\'CA\'B1\'BC\'E4 \par
false \'C8\'E7\'B9\'FBtime1\'B5\'C4\'CA\'B1\'BC\'E4\'B2\'BB\'CD\'ED\'D3\'DAtime2\'B5\'C4\'CA\'B1\'BC\'E4 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-20 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.h} \'B5\'DA {\b 229} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "common_8h_ac7fd245cd6d45bdfc593d2a7bbf1a0d2_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v test_timespec_older\:common.h}
{\xe \v common.h\:test_timespec_older}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool test_timespec_older (struct timespec &  {\i time1}, struct timespec &  {\i time2}){\f2 [inline]}}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
timespec\'CA\'B1\'BC\'E4\'B1\'C8\'BD\'CF }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i time1} \cell }{\'CA\'B1\'BC\'E41 \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i time2} \cell }{\'CA\'B1\'BC\'E42 \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
true \'C8\'E7\'B9\'FBtime1\'B5\'C4\'CA\'B1\'BC\'E4\'D4\'E7\'D3\'DAtime2\'B5\'C4\'CA\'B1\'BC\'E4 \par
false \'C8\'E7\'B9\'FBtime1\'B5\'C4\'CA\'B1\'BC\'E4\'B2\'BB\'D4\'E7\'D3\'DAtime2\'B5\'C4\'CA\'B1\'BC\'E4 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-20 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.h} \'B5\'DA {\b 251} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "common_8h_a9f86a453548ebd07eaa30fa19c9e8b3c_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
common.h\par \pard\plain 
{\tc\tcl2 \v inc/common.h}
{\xe \v inc/common.h}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #ifndef _COMMON_H_}\par
00013 {\cf21 #define _COMMON_H_}\par
00014 \par
00015 {\cf21 #include <cmath>}\par
00016 {\cf21 #include <string>}\par
00017 {\cf21 #include <cassert>}\par
00018 {\cf21 #include <sstream>}\par
00019 \par
00020 {\cf20 // \'B4\'ED\'CE\'F3\'C5\'D0\'B6\'CF\'D3\'EB\'D0\'C5\'CF\'A2\'CC\'E1\'CA\'BE}\par
00021 {\cf21 #define ASSERT(expr, message) assert((expr) && (message))}\par
00022 \par
00035 {\cf18 void} Argument_Display({\cf17 const} {\cf18 int} argc, {\cf18 char}* {\cf17 const} argv[]);\par
00036 \par
00053 {\cf17 template}<{\cf17 typename} T>\par
00054 {\cf18 int} Binary_Search({\cf18 int} left, {\cf18 int} right, T val, T array[], {\cf18 int} cmp(T a, T b))\par
00055 \{\par
00056     {\cf19 while} (left < right)\par
00057     \{\par
00058         {\cf18 int} mid = (left + right) >> 1;\par
00059         {\cf18 int} compare_result = cmp(val, array[mid]);\par
00060         {\cf19 if} (compare_result == 0)\par
00061             {\cf19 return} mid;\par
00062         {\cf19 else} {\cf19 if} (compare_result > 0)\par
00063             left = mid + 1;\par
00064         {\cf19 else}\par
00065             right = mid;\par
00066     \}\par
00067 \par
00068     {\cf19 return} -1;\par
00069 \}\par
00070 \par
00081 std::string& String_Trim(std::string &s);\par
00082 \par
00094 {\cf17 template} <{\cf17 class} Type>\par
00095 Type String_to_Number({\cf17 const} std::string& str)\par
00096 \{\par
00097     std::istringstream iss(str);\par
00098     Type num;\par
00099     iss >> num;\par
00100     {\cf19 return} num;    \par
00101 \}\par
00102 \par
00104 {\cf17 template} <{\cf17 typename} T>\par
00105 {\cf17 inline} T Min({\cf17 const} T& a, {\cf17 const} T& b)\par
00106 \{\par
00107     {\cf19 return} a < b ? a : b;\par
00108 \}\par
00109 \par
00111 {\cf17 template} <{\cf17 typename} T>\par
00112 {\cf17 inline} T Max({\cf17 const} T& a, {\cf17 const} T& b)\par
00113 \{\par
00114     {\cf19 return} a > b ? a : b;\par
00115 \}\par
00116 \par
00128 {\cf17 template} <{\cf17 typename} T>\par
00129 T Octal_to_Decimal(T octalNumber)\par
00130 \{\par
00131     T decimalNumber = 0, i = 0, remainderNumber;\par
00132     {\cf19 while} (octalNumber != 0)\par
00133     \{\par
00134         remainderNumber = octalNumber % 10; {\cf20 // \'D3\'E0\'CA\'FD}\par
00135         octalNumber /= 10;                  {\cf20 // \'CD\'CB\'CE\'BB}\par
00136         decimalNumber += remainderNumber * pow(8, i);   {\cf20 // \'C3\'DD\'B3\'CB}\par
00137         ++i;\par
00138     \}\par
00139     {\cf19 return} decimalNumber;\par
00140 \}\par
00141 \par
00153 {\cf17 template} <{\cf17 typename} T>\par
00154 T Decimal_to_Octal(T decimalNumber)\par
00155 \{\par
00156     T remainderNumber, i = 1, octalNumber = 0;\par
00157     {\cf19 while} (decimalNumber != 0)\par
00158     \{\par
00159         remainderNumber = decimalNumber % 8; {\cf20 // \'D3\'E0\'CA\'FD}\par
00160         decimalNumber /= 8;                  {\cf20 // \'CD\'CB\'CE\'BB}\par
00161         octalNumber += remainderNumber * i;  {\cf20 // \'C3\'DD\'B3\'CB}\par
00162         i *= 10;\par
00163     \}\par
00164     {\cf19 return} octalNumber;\par
00165 \} \par
00166 \par
00178 {\cf17 template} <{\cf17 typename} T>\par
00179 T Hexadecimal_to_Decimal(T hexadecimalNumber)\par
00180 \{\par
00181     T decimalNumber = 0, i = 0, remainderNumber;\par
00182     {\cf19 while} (hexadecimalNumber != 0)\par
00183     \{\par
00184         remainderNumber = hexadecimalNumber % 10; {\cf20 // \'D3\'E0\'CA\'FD}\par
00185         hexadecimalNumber /= 10;                  {\cf20 // \'CD\'CB\'CE\'BB}\par
00186         decimalNumber += remainderNumber * pow(16, i);  {\cf20 // \'C3\'DD\'B3\'CB}\par
00187         ++i;\par
00188     \}\par
00189     {\cf19 return} decimalNumber;\par
00190 \}\par
00191 \par
00203 {\cf17 template} <{\cf17 typename} T>\par
00204 T Decimal_to_Hexadecimal(T decimalNumber)\par
00205 \{\par
00206     T remainderNumber, i = 1, hexadecimalNumber = 0;\par
00207     {\cf19 while} (decimalNumber != 0)\par
00208     \{\par
00209         remainderNumber = decimalNumber % 16; {\cf20 // \'D3\'E0\'CA\'FD}\par
00210         decimalNumber /= 16;                  {\cf20 // \'CD\'CB\'CE\'BB}\par
00211         hexadecimalNumber += remainderNumber * i;  {\cf20 // \'C3\'DD\'B3\'CB}\par
00212         i *= 10;\par
00213     \}\par
00214     {\cf19 return} hexadecimalNumber;\par
00215 \} \par
00216 \par
00229 {\cf17 inline} {\cf18 bool} test_timespec_newer({\cf17 struct} timespec& time1, {\cf17 struct} timespec& time2)\par
00230 \{\par
00231     {\cf19 if} (time1.tv_sec > time2.tv_sec)    {\cf20 // \'CF\'C8\'B1\'C8\'BD\'CF\'C3\'EB}\par
00232         {\cf19 return} {\cf17 true};\par
00233     {\cf19 else} {\cf19 if} (time1.tv_sec < time2.tv_sec)\par
00234         {\cf19 return} {\cf17 false};\par
00235     {\cf19 else}\par
00236         {\cf19 return} time1.tv_nsec > time2.tv_nsec;   {\cf20 // \'D4\'D9\'B1\'C8\'BD\'CF\'C4\'C9\'C3\'EB}\par
00237 \}\par
00238 \par
00251 {\cf17 inline} {\cf18 bool} test_timespec_older({\cf17 struct} timespec& time1, {\cf17 struct} timespec& time2)\par
00252 \{\par
00253     {\cf19 if} (time1.tv_sec < time2.tv_sec)    {\cf20 // \'CF\'C8\'B1\'C8\'BD\'CF\'C3\'EB}\par
00254         {\cf19 return} {\cf17 true};\par
00255     {\cf19 else} {\cf19 if} (time1.tv_sec > time2.tv_sec)\par
00256         {\cf19 return} {\cf17 false};\par
00257     {\cf19 else}\par
00258         {\cf19 return} time1.tv_nsec < time2.tv_nsec;   {\cf20 // \'D4\'D9\'B1\'C8\'BD\'CF\'C4\'C9\'C3\'EB}\par
00259 \}\par
00260 \par
00261 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/config.h \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v inc/config.h}
{\xe \v inc/config.h}
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'B4\'CB\'CD\'BC\'D5\'B9\'CA\'BE\'B8\'C3\'CE\'C4\'BC\'FE\'D6\'B1\'BD\'D3\'BB\'F2\'BC\'E4\'BD\'D3\'B5\'C4\'B1\'BB\'C4\'C4\'D0\'A9\'CE\'C4\'BC\'FE\'D2\'FD\'D3\'C3\'C1\'CB:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "config_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C3\'B6\'BE\'D9\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b sh_err_t} \{ {\b SH_SUCCESS} = 0
, {\b SH_FAILED}
, {\b SH_UNDEFINED}
, {\b SH_ARGS}
, {\b SH_EXIT}
 \}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b job_state} \{ {\b Running}
, {\b Stopped}
, {\b Done}
, {\b Terminated}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned int constexpr {\b String_Hash} (char const *input, unsigned int prime={\b hash_prime}, unsigned int basis={\b hash_basis})\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D7\'D6\'B7\'FB\'B4\'AE\'C9\'A2\'C1\'D0\'A3\'AC\'D3\'C3\'D3\'DA\'BD\'AB\'D7\'D6\'B7\'FB\'B4\'AE\'D7\'AA\'CE\'AA\'D5\'FD\'D5\'FB\'CA\'FD\'A3\'AC\'D4\'DA\'B1\'E0\'D2\'EB\'CA\'B1\'BD\'F8\'D0\'D0 }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B1\'E4\'C1\'BF\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr int {\b BUFFER_SIZE} = 1024\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr int {\b MAX_PROCESS_NUMBER} = 1024\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr int {\b MAX_ARGUMENT_NUMBER} = 128\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr unsigned int {\b hash_prime} = 33u\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
constexpr unsigned int {\b hash_basis} = 5381u\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-03\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b config.h} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C3\'B6\'BE\'D9\'C0\'E0\'D0\'CD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v job_state\:config.h}
{\xe \v config.h\:job_state}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b job_state}}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C3\'B6\'BE\'D9\'D6\'B5:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v Running\:config.h}
{\xe \v config.h\:Running}
{\qr Running{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
\cell }{\cell }{\row }
{\xe \v Stopped\:config.h}
{\xe \v config.h\:Stopped}
{\qr Stopped{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
\cell }{\cell }{\row }
{\xe \v Done\:config.h}
{\xe \v config.h\:Done}
{\qr Done{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
\cell }{\cell }{\row }
{\xe \v Terminated\:config.h}
{\xe \v config.h\:Terminated}
{\qr Terminated{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
\cell }{\cell }{\row }
}
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b config.h} \'B5\'DA {\b 28} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v sh_err_t\:config.h}
{\xe \v config.h\:sh_err_t}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b sh_err_t}}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C3\'B6\'BE\'D9\'D6\'B5:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v SH_SUCCESS\:config.h}
{\xe \v config.h\:SH_SUCCESS}
{\qr SH_SUCCESS{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
\cell }{\cell }{\row }
{\xe \v SH_FAILED\:config.h}
{\xe \v config.h\:SH_FAILED}
{\qr SH_FAILED{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
\cell }{\cell }{\row }
{\xe \v SH_UNDEFINED\:config.h}
{\xe \v config.h\:SH_UNDEFINED}
{\qr SH_UNDEFINED{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
\cell }{\cell }{\row }
{\xe \v SH_ARGS\:config.h}
{\xe \v config.h\:SH_ARGS}
{\qr SH_ARGS{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
\cell }{\cell }{\row }
{\xe \v SH_EXIT\:config.h}
{\xe \v config.h\:SH_EXIT}
{\qr SH_EXIT{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
\cell }{\cell }{\row }
}
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b config.h} \'B5\'DA {\b 19} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v String_Hash\:config.h}
{\xe \v config.h\:String_Hash}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int constexpr String_Hash (char const *  {\i input}, unsigned int  {\i prime} = {\f2 {\b hash_prime}}, unsigned int  {\i basis} = {\f2 {\b hash_basis}}){\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D7\'D6\'B7\'FB\'B4\'AE\'C9\'A2\'C1\'D0\'A3\'AC\'D3\'C3\'D3\'DA\'BD\'AB\'D7\'D6\'B7\'FB\'B4\'AE\'D7\'AA\'CE\'AA\'D5\'FD\'D5\'FB\'CA\'FD\'A3\'AC\'D4\'DA\'B1\'E0\'D2\'EB\'CA\'B1\'BD\'F8\'D0\'D0 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i input} \cell }{\'D0\'E8\'D2\'AA\'D7\'AA\'BB\'BB\'B5\'C4\'D7\'D6\'B7\'FB\'B4\'AE \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
unsigned constexpr \'C9\'A2\'C1\'D0\'BA\'F3\'B5\'C4\'B9\'FE\'CF\'A3\'D6\'B5 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-19 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b config.h} \'B5\'DA {\b 49} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "config_8h_a05c7e55c0f417c2cb510ca9131ee8d45_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "config_8h_a05c7e55c0f417c2cb510ca9131ee8d45_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B1\'E4\'C1\'BF\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v BUFFER_SIZE\:config.h}
{\xe \v config.h\:BUFFER_SIZE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr int BUFFER_SIZE = 1024{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b config.h} \'B5\'DA {\b 15} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v hash_basis\:config.h}
{\xe \v config.h\:hash_basis}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr unsigned int hash_basis = 5381u{\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b config.h} \'B5\'DA {\b 37} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v hash_prime\:config.h}
{\xe \v config.h\:hash_prime}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr unsigned int hash_prime = 33u{\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b config.h} \'B5\'DA {\b 36} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v MAX_ARGUMENT_NUMBER\:config.h}
{\xe \v config.h\:MAX_ARGUMENT_NUMBER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr int MAX_ARGUMENT_NUMBER = 128{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b config.h} \'B5\'DA {\b 17} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v MAX_PROCESS_NUMBER\:config.h}
{\xe \v config.h\:MAX_PROCESS_NUMBER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr int MAX_PROCESS_NUMBER = 1024{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b config.h} \'B5\'DA {\b 16} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
config.h\par \pard\plain 
{\tc\tcl2 \v inc/config.h}
{\xe \v inc/config.h}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #ifndef _CONFIG_H_}\par
00013 {\cf21 #define _CONFIG_H_}\par
00014 \par
00015 {\cf17 static} {\cf17 constexpr} {\cf18 int} BUFFER_SIZE = 1024;        {\cf20 // \'BB\'BA\'B3\'E5\'C7\'F8\'B4\'F3\'D0\'A1}\par
00016 {\cf17 static} {\cf17 constexpr} {\cf18 int} MAX_PROCESS_NUMBER = 1024; {\cf20 // \'D7\'EE\'B4\'F3\'BD\'F8\'B3\'CC\'CA\'FD\'C1\'BF}\par
00017 {\cf17 static} {\cf17 constexpr} {\cf18 int} MAX_ARGUMENT_NUMBER = 128; {\cf20 // \'D7\'EE\'B4\'F3\'B2\'CE\'CA\'FD\'CA\'FD\'C1\'BF}\par
00018 \par
00019 {\cf17 enum} sh_err_t   {\cf20 //  shell\'B4\'ED\'CE\'F3\'C0\'E0\'D0\'CD}\par
00020 \{\par
00021     SH_SUCCESS = 0, {\cf20 // \'D5\'FD\'B3\'A3}\par
00022     SH_FAILED,      {\cf20 // \'CA\'A7\'B0\'DC}\par
00023     SH_UNDEFINED,   {\cf20 // \'CE\'B4\'B6\'A8\'D2\'E5}\par
00024     SH_ARGS,        {\cf20 // \'B2\'CE\'CA\'FD\'B4\'ED\'CE\'F3}\par
00025     SH_EXIT,        {\cf20 // \'CD\'CB\'B3\'F6}\par
00026 \};\par
00027 \par
00028 {\cf17 enum} job_state                                  {\cf20 // \'BD\'F8\'B3\'CC\'D7\'B4\'CC\'AC}\par
00029 \{\par
00030     Running,                                    {\cf20 // \'D5\'FD\'D4\'DA\'D4\'CB\'D0\'D0}\par
00031     Stopped,                                    {\cf20 // \'CD\'A3\'D6\'B9\'D4\'CB\'D0\'D0}\par
00032     Done,                                       {\cf20 // \'CD\'EA\'B3\'C9\'D4\'CB\'D0\'D0}\par
00033     Terminated                                  {\cf20 // \'D6\'D5\'D6\'B9\'D4\'CB\'D0\'D0}\par
00034 \};\par
00035 \par
00036 {\cf17 constexpr} {\cf18 unsigned} {\cf18 int} hash_prime = 33u;   {\cf20 // \'CF\'E0\'B3\'CB\'D6\'CA\'CA\'FD}\par
00037 {\cf17 constexpr} {\cf18 unsigned} {\cf18 int} hash_basis = 5381u; {\cf20 // \'C6\'AB\'D2\'C6}\par
00038 \par
00049 {\cf18 unsigned} {\cf18 int} {\cf17 constexpr} String_Hash({\cf18 char} {\cf17 const} *input, {\cf18 unsigned} {\cf18 int} prime = hash_prime, {\cf18 unsigned} {\cf18 int} basis = hash_basis) \par
00050 \{\par
00051     {\cf19 return} *input ?                                                          {\cf20 // \'CA\'C7\'B7\'F1\'B4\'EF\'B5\'BD\'D7\'D6\'B7\'FB\'B4\'AE\'B5\'C4\'BD\'E1\'CE\'B2}\par
00052         {\cf17 static_cast<}{\cf18 unsigned} {\cf18 int}{\cf17 >}(*input) + prime * String_Hash(input + 1) : {\cf20 // \'BB\'B9\'CE\'B4\'B4\'EF\'B5\'BD\'A3\'AC\'B5\'DD\'B9\'E9\'C7\'F3\'BA\'CD\'BC\'CC\'D0\'F8}\par
00053         basis;                                                               {\cf20 // \'B5\'BD\'B4\'EF\'C4\'A9\'CE\'B2\'A3\'AC\'B7\'B5\'BB\'D8\'D2\'BB\'B8\'F6\'D6\'CA\'CA\'FD\'B9\'FE\'CF\'A3}\par
00054 \}\par
00055 \par
00056 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/Console.h \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v inc/Console.h}
{\xe \v inc/Console.h}
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "config.h"}\par
{\f2 #include <sys/stat.h>}\par
{\f2 #include <sys/types.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Console.h \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_console_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'B4\'CB\'CD\'BC\'D5\'B9\'CA\'BE\'B8\'C3\'CE\'C4\'BC\'FE\'D6\'B1\'BD\'D3\'BB\'F2\'BC\'E4\'BD\'D3\'B5\'C4\'B1\'BB\'C4\'C4\'D0\'A9\'CE\'C4\'BC\'FE\'D2\'FD\'D3\'C3\'C1\'CB:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_console_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Console}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BF\'D8\'D6\'C6\'CC\'A8 \'B4\'E6\'B4\'A2\'B1\'D8\'D2\'AA\'B5\'C4\'BB\'B7\'BE\'B3\'B1\'E4\'C1\'BF\'D2\'D4\'BC\'B0\'E4\'D6\'C8\'BE\'D3\'C3\'BB\'A7\'C7\'B0\'B6\'CB\'CB\'F9\'D0\'E8\'D2\'AA\'B5\'C4\'CA\'FD\'BE\'DD }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SignalHandler} (int signal_)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'C5\'BA\'C5\'BF\'D8\'D6\'C6\'D3\'EB\'B4\'A6\'C0\'ED }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-03\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.h} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v SignalHandler\:Console.h}
{\xe \v Console.h\:SignalHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SignalHandler (int  {\i signal_})}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'C5\'BA\'C5\'BF\'D8\'D6\'C6\'D3\'EB\'B4\'A6\'C0\'ED }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i signal_} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-21 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.cpp} \'B5\'DA {\b 49} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Console.h\par \pard\plain 
{\tc\tcl2 \v inc/Console.h}
{\xe \v inc/Console.h}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #ifndef _CONSOLE_H_}\par
00013 {\cf21 #define _CONSOLE_H_}\par
00014 \par
00015 {\cf21 #include "config.h"}\par
00016 \par
00017 {\cf21 #include <sys/stat.h>}\par
00018 {\cf21 #include <sys/types.h>}\par
00019 \par
00020 {\cf17 class }ProcessManager;   {\cf20 // \'CE\'AA\'C1\'CB\'BC\'D3\'BF\'EC\'B1\'E0\'D2\'EB\'CB\'D9\'B6\'C8\'A3\'AC\'D5\'E2\'C0\'EF\'B2\'BB\'D2\'FD\'D3\'C3\'CD\'B7\'CE\'C4\'BC\'FE\'B6\'F8\'D6\'BB\'CA\'C7\'C9\'F9\'C3\'F7}\par
00021 \par
00031 {\cf18 void} SignalHandler({\cf18 int} signal_);\par
00032 \par
00038 {\cf17 class }Console\par
00039 \{\par
00040     {\cf17 private}:\par
00041         {\cf20 // \'CF\'D4\'CA\'BE\'C4\'A3\'BF\'E9}\par
00042         {\cf18 char} user_name[BUFFER_SIZE];                    {\cf20 // \'D3\'C3\'BB\'A7\'C3\'FB\'B3\'C6}\par
00043         {\cf18 char} host_name[BUFFER_SIZE];                    {\cf20 // \'D6\'F7\'BB\'FA\'C3\'FB\'B3\'C6}\par
00044         {\cf18 char} current_working_dictionary[BUFFER_SIZE];   {\cf20 // \'B5\'B1\'C7\'B0\'B9\'A4\'D7\'F7\'C4\'BF\'C2\'BC}\par
00045 \par
00046         {\cf18 char} home[BUFFER_SIZE];                         {\cf20 // \'D6\'F7\'C4\'BF\'C2\'BC}\par
00047         \par
00048         {\cf20 // \'BB\'B7\'BE\'B3\'B1\'E4\'C1\'BF}\par
00049         {\cf18 char} shell_path_env[BUFFER_SIZE];               {\cf20 // shell\'B5\'C4\'CD\'EA\'D5\'FB\'C2\'B7\'BE\'B6}\par
00050 \par
00051         {\cf20 // \'BD\'F8\'B3\'CC\'B9\'DC\'C0\'ED}\par
00052         pid_t process_id;                               {\cf20 // \'B5\'B1\'C7\'B0\'BD\'F8\'B3\'CCpid}\par
00053         {\cf17 static} pid_t child_process_id;                  {\cf20 // \'D7\'D3\'BD\'F8\'B3\'CCpid}\par
00054         ProcessManager* process_manager;                {\cf20 // \'BD\'F8\'B3\'CC\'B9\'DC\'C0\'ED\'C6\'F7}\par
00055         \par
00056         {\cf20 // \'CE\'C4\'BC\'FE\'C3\'E8\'CA\'F6\'B7\'FB}\par
00057         {\cf18 int} input_file_descriptor;                      {\cf20 // \'CA\'E4\'C8\'EB\'CE\'C4\'BC\'FE\'C3\'E8\'CA\'F6\'B7\'FB}\par
00058         {\cf18 int} output_file_descriptor;                     {\cf20 // \'CA\'E4\'B3\'F6\'CE\'C4\'BC\'FE\'C3\'E8\'CA\'F6\'B7\'FB}\par
00059         {\cf18 int} error_file_descriptor;                      {\cf20 // \'B4\'ED\'CE\'F3\'CE\'C4\'BC\'FE\'C3\'E8\'CA\'F6\'B7\'FB}\par
00060 \par
00061         {\cf20 // \'B1\'EA\'D7\'BC\'CA\'E4\'C8\'EB\'A1\'A2\'CA\'E4\'B3\'F6\'D3\'EB\'B4\'ED\'CE\'F3\'CA\'E4\'B3\'F6}\par
00062         {\cf17 static} {\cf18 int} input_std_fd;                        {\cf20 // \'B1\'EA\'D7\'BC\'CA\'E4\'C8\'EB\'B1\'B8\'B7\'DD}\par
00063         {\cf17 static} {\cf18 int} output_std_fd;                       {\cf20 // \'B1\'EA\'D7\'BC\'CA\'E4\'B3\'F6\'B1\'B8\'B7\'DD                              }\par
00064         {\cf17 static} {\cf18 int} error_std_fd;                        {\cf20 // \'B1\'EA\'D7\'BC\'B4\'ED\'CE\'F3\'B1\'B8\'B7\'DD}\par
00065 \par
00066         {\cf20 // \'D6\'D8\'B6\'A8\'CF\'F2\'B1\'EA\'D6\'BE}\par
00067         {\cf18 bool} redirect_input;                             {\cf20 // \'CA\'E4\'C8\'EB\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC}\par
00068         {\cf18 bool} redirect_output;                            {\cf20 // \'CA\'E4\'B3\'F6\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC}\par
00069         {\cf18 bool} redirect_error;                             {\cf20 // \'B4\'ED\'CE\'F3\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC}\par
00070 \par
00071         {\cf20 // \'D1\'DA\'C2\'EB}\par
00072         mode_t umask_;                                   {\cf20 // \'CE\'C4\'BC\'FE\'D1\'DA\'C2\'EB}\par
00073 \par
00074         {\cf18 int} argc;                                        {\cf20 // \'B5\'B1\'C7\'B0\'C3\'FC\'C1\'EE\'B2\'CE\'CA\'FD\'B8\'F6\'CA\'FD}\par
00075         {\cf18 char} argv[MAX_ARGUMENT_NUMBER][BUFFER_SIZE];     {\cf20 // \'B5\'B1\'C7\'B0\'C3\'FC\'C1\'EE\'B2\'CE\'CA\'FD\'C1\'D0\'B1\'ED}\par
00076 \par
00077     {\cf17 public}:\par
00078         Console({\cf20 /* args */});\par
00079 \par
00080         {\cf17 virtual} ~Console();\par
00081 \par
00082         {\cf20 /* \'B3\'F5\'CA\'BC\'BB\'AF */}\par
00083         {\cf18 int} init();\par
00084 \par
00085         {\cf20 /* \'B4\'F2\'D3\'A1\'BD\'F8\'B3\'CC\'C1\'D0\'B1\'ED */}\par
00086         {\cf18 void} ConsoleJobList() {\cf17 const};\par
00087 \par
00088         {\cf20 /* \'B4\'F2\'D3\'A1\'D2\'D1\'CD\'EA\'B3\'C9\'B5\'C4\'BD\'F8\'B3\'CC\'C1\'D0\'B1\'ED */}\par
00089         {\cf18 void} ConsoleJobListDone();\par
00090 \par
00091         {\cf20 /* \'CC\'ED\'BC\'D3\'BD\'F8\'B3\'CC */}\par
00092         {\cf18 unsigned} {\cf18 int} AddJob({\cf18 int} pid, job_state state, {\cf18 int} argc, {\cf18 char} *argv[]);\par
00093 \par
00094         {\cf20 // void RemoveJob();}\par
00095 \par
00096         {\cf18 void} ResetChildPid() \{ child_process_id = -1; \}\par
00097 \par
00098         {\cf20 /* \'C9\'E8\'D6\'C3\'CE\'C4\'BC\'FE\'C3\'E8\'CA\'F6\'B7\'FB */}\par
00099         {\cf18 void} SetInputFD({\cf18 int} _fd)  \{ input_file_descriptor = _fd; \}\par
00100         {\cf20 /* \'C9\'E8\'D6\'C3\'CE\'C4\'BC\'FE\'C3\'E8\'CA\'F6\'B7\'FB */}\par
00101         {\cf18 void} SetOutputFD({\cf18 int} _fd) \{ output_file_descriptor = _fd; \}\par
00102         {\cf20 /* \'C9\'E8\'D6\'C3\'CE\'C4\'BC\'FE\'C3\'E8\'CA\'F6\'B7\'FB */}\par
00103         {\cf18 void} SetErrorFD({\cf18 int} _fd)  \{ error_file_descriptor = _fd; \}\par
00104 \par
00105         {\cf20 /* \'BB\'F1\'C8\'A1\'CE\'C4\'BC\'FE\'C3\'E8\'CA\'F6\'B7\'FB */}\par
00106         {\cf18 int} GetInputFD(){\cf17  const  }\{ {\cf19 return} input_file_descriptor; \}\par
00107         {\cf20 /* \'BB\'F1\'C8\'A1\'CE\'C4\'BC\'FE\'C3\'E8\'CA\'F6\'B7\'FB */}\par
00108         {\cf18 int} GetOutputFD(){\cf17  const }\{ {\cf19 return} output_file_descriptor; \}\par
00109         {\cf20 /* \'BB\'F1\'C8\'A1\'CE\'C4\'BC\'FE\'C3\'E8\'CA\'F6\'B7\'FB */}\par
00110         {\cf18 int} GetErrorFD(){\cf17  const  }\{ {\cf19 return} error_file_descriptor; \}\par
00111 \par
00112         {\cf20 /* \'C9\'E8\'D6\'C3\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC */}\par
00113         {\cf18 void} SetInputRedirect()  \{ redirect_input = {\cf17 true}; \}\par
00114         {\cf20 /* \'C9\'E8\'D6\'C3\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC */}\par
00115         {\cf18 void} SetOutputRedirect() \{ redirect_output = {\cf17 true}; \}\par
00116         {\cf20 /* \'C9\'E8\'D6\'C3\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC */}\par
00117         {\cf18 void} SetErrorRedirect()  \{ redirect_error = {\cf17 true}; \}\par
00118 \par
00119         {\cf20 /* \'D6\'D8\'D6\'C3\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC */}\par
00120         {\cf18 void} ResetInputRedirect()  \{ redirect_input = {\cf17 false}; \}\par
00121         {\cf20 /* \'D6\'D8\'D6\'C3\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC */}\par
00122         {\cf18 void} ResetOutputRedirect() \{ redirect_output = {\cf17 false}; \}\par
00123         {\cf20 /* \'D6\'D8\'D6\'C3\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC */}\par
00124         {\cf18 void} ResetErrorRedirect()  \{ redirect_error = {\cf17 false}; \}\par
00125 \par
00126         {\cf20 /* \'BB\'F1\'C8\'A1\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC */}\par
00127         {\cf18 bool} GetInputRedirect(){\cf17  const  }\{ {\cf19 return} redirect_input ; \}\par
00128         {\cf20 /* \'BB\'F1\'C8\'A1\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC */}\par
00129         {\cf18 bool} GetOutputRedirect(){\cf17  const }\{ {\cf19 return} redirect_output; \}\par
00130         {\cf20 /* \'BB\'F1\'C8\'A1\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC */}\par
00131         {\cf18 bool} GetErrorRedirect(){\cf17  const  }\{ {\cf19 return} redirect_error ; \}\par
00132 \par
00133         {\cf20 /* \'BB\'F1\'C8\'A1\'B1\'EA\'D7\'A2\'CA\'E4\'C8\'EB\'A1\'A2\'CA\'E4\'B3\'F6\'A1\'A2\'B4\'ED\'CE\'F3\'CA\'E4\'B3\'F6 */}\par
00134         {\cf18 int} GetSTDIN(){\cf17   const }\{ {\cf19 return} input_std_fd;  \}\par
00135         {\cf20 /* \'BB\'F1\'C8\'A1\'B1\'EA\'D7\'A2\'CA\'E4\'C8\'EB\'A1\'A2\'CA\'E4\'B3\'F6\'A1\'A2\'B4\'ED\'CE\'F3\'CA\'E4\'B3\'F6 */}\par
00136         {\cf18 int} GetSTDOUT(){\cf17  const }\{ {\cf19 return} output_std_fd; \}\par
00137         {\cf20 /* \'BB\'F1\'C8\'A1\'B1\'EA\'D7\'A2\'CA\'E4\'C8\'EB\'A1\'A2\'CA\'E4\'B3\'F6\'A1\'A2\'B4\'ED\'CE\'F3\'CA\'E4\'B3\'F6 */}\par
00138         {\cf18 int} GetSTDERR(){\cf17  const }\{ {\cf19 return} error_std_fd;  \}\par
00139 \par
00140         {\cf20 /* \'C9\'E8\'D6\'C3\'D1\'DA\'C2\'EB */}\par
00141         {\cf18 void} SetMask(mode_t _mask) \{ umask_ = _mask; \}\par
00142         {\cf20 /* \'BB\'F1\'C8\'A1\'D1\'DA\'C2\'EB */}\par
00143         mode_t GetMask(){\cf17  const }\{ {\cf19 return} umask_; \}\par
00144 \par
00145         {\cf17 friend} {\cf17 class }Display;\par
00146         {\cf17 friend} {\cf17 class }Executor;\par
00147         {\cf17 friend} {\cf17 class }ProcessManager;\par
00148         {\cf17 friend} {\cf18 void} SignalHandler({\cf18 int});\par
00149 \};\par
00150 \par
00151 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/Display.h \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v inc/Display.h}
{\xe \v inc/Display.h}
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <string>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Display.h \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_display_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'B4\'CB\'CD\'BC\'D5\'B9\'CA\'BE\'B8\'C3\'CE\'C4\'BC\'FE\'D6\'B1\'BD\'D3\'BB\'F2\'BC\'E4\'BD\'D3\'B5\'C4\'B1\'BB\'C4\'C4\'D0\'A9\'CE\'C4\'BC\'FE\'D2\'FD\'D3\'C3\'C1\'CB:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_display_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Display}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-03\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.h} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Display.h\par \pard\plain 
{\tc\tcl2 \v inc/Display.h}
{\xe \v inc/Display.h}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #ifndef _DISPLAY_H_}\par
00013 {\cf21 #define _DISPLAY_H_}\par
00014 \par
00015 {\cf17 class }Console;\par
00016 \par
00017 {\cf21 #include <string>}\par
00018 \par
00019 {\cf17 class }Display\par
00020 \{\par
00021     {\cf17 private}:\par
00022 \par
00023         Console* console_;\par
00024 \par
00025         {\cf18 bool} perform;   {\cf20 // \'CA\'C7\'B7\'F1\'CF\'D4\'CA\'BE\'CC\'E1\'CA\'BE\'B7\'FB\'B5\'C4\'B1\'EA\'D6\'BE}\par
00026 \par
00027     {\cf17 protected}:\par
00028         std::string buffer_;\par
00029 \par
00030     {\cf17 public}:\par
00031         Display(Console* console);\par
00032         \par
00033         {\cf17 virtual} ~Display();\par
00034 \par
00040         {\cf18 int} InputCommand({\cf18 char} *input, {\cf17 const} {\cf18 int} len);\par
00041         \par
00043         {\cf18 void} render();\par
00044 \par
00046         {\cf18 void} prompt() {\cf17 const};\par
00047 \par
00049         {\cf18 void} message({\cf17 const} {\cf18 char} * msg);\par
00050 \par
00052         {\cf18 void} show() {\cf17 const};\par
00053 \par
00055         {\cf18 void} clear() \{ buffer_ = {\cf22 ""}; \}\par
00056 \};\par
00057 \par
00058 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/Executor.h \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v inc/Executor.h}
{\xe \v inc/Executor.h}
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "config.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Executor.h \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_executor_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'B4\'CB\'CD\'BC\'D5\'B9\'CA\'BE\'B8\'C3\'CE\'C4\'BC\'FE\'D6\'B1\'BD\'D3\'BB\'F2\'BC\'E4\'BD\'D3\'B5\'C4\'B1\'BB\'C4\'C4\'D0\'A9\'CE\'C4\'BC\'FE\'D2\'FD\'D3\'C3\'C1\'CB:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_executor_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Executor}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B1\'E4\'C1\'BF\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr int {\b FunctionNumber} = 16\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-04\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.h} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B1\'E4\'C1\'BF\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v FunctionNumber\:Executor.h}
{\xe \v Executor.h\:FunctionNumber}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr int FunctionNumber = 16{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.h} \'B5\'DA {\b 20} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Executor.h\par \pard\plain 
{\tc\tcl2 \v inc/Executor.h}
{\xe \v inc/Executor.h}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #ifndef _EXECUTOR_H_}\par
00013 {\cf21 #define _EXECUTOR_H_}\par
00014 \par
00015 {\cf21 #include "config.h"}\par
00016 \par
00017 {\cf17 class }Console;\par
00018 {\cf17 class }Display;\par
00019 \par
00020 {\cf17 static} {\cf17 constexpr} {\cf18 int} FunctionNumber = 16;\par
00021 \par
00022 {\cf17 class }Executor\par
00023 \{\par
00024     {\cf17 private}:\par
00025 \par
00026         Console *console_;  \par
00028         Display *display_;  \par
00030     {\cf17 protected}:\par
00031         \par
00033         sh_err_t shell_function({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00034         \par
00036         sh_err_t execute_cd({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00037 \par
00039         sh_err_t execute_pwd({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00040 \par
00042         sh_err_t execute_time({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00043 \par
00045         sh_err_t execute_clr({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00046 \par
00047         {\cf20 /* \'C1\'D0\'B3\'F6\'C4\'BF\'C2\'BC\'C4\'DA\'C8\'DD */}\par
00048         sh_err_t execute_dir({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00049 \par
00050         {\cf20 /* \'C1\'D0\'B3\'F6\'CB\'F9\'D3\'D0\'BB\'B7\'BE\'B3\'B1\'E4\'C1\'BF */}\par
00051         sh_err_t execute_set({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00052 \par
00053         {\cf20 /* \'BB\'D8\'C9\'F9 */}\par
00054         sh_err_t execute_echo({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00055 \par
00056         {\cf20 /* \'CF\'D4\'CA\'BE\'B0\'EF\'D6\'FA\'CA\'D6\'B2\'E1 */}\par
00057         sh_err_t execute_help({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00058 \par
00060         sh_err_t execute_exit({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00061 \par
00063         sh_err_t execute_date({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00064 \par
00066         sh_err_t execute_clear({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00067 \par
00069         sh_err_t execute_env({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00070 \par
00072         sh_err_t execute_who({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00073 \par
00075         sh_err_t execute_mkdir({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00076 \par
00078         sh_err_t execute_rmdir({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00079 \par
00081         sh_err_t execute_bg({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00082 \par
00084         sh_err_t execute_fg({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00085 \par
00087         sh_err_t execute_jobs({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00088 \par
00090         sh_err_t execute_exec({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00091     \par
00093         sh_err_t execute_test({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00094 \par
00096         sh_err_t execute_umask({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00097 \par
00099         sh_err_t execute_myshell({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00100         \par
00104         {\cf17 typedef} sh_err_t (Executor::*MemFuncPtr)({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00106         MemFuncPtr FunctionArray[FunctionNumber];\par
00107 \par
00109         {\cf17 static} {\cf18 bool} test_file_state({\cf17 const} {\cf18 int} argc, {\cf17 const} {\cf18 char} * {\cf17 const} argv[]);\par
00111         {\cf17 static} {\cf18 bool} test_number_compare({\cf17 const} {\cf18 int} argc, {\cf17 const} {\cf18 char} * {\cf17 const} argv[]);\par
00113         {\cf17 static} {\cf18 bool} test_string_compare({\cf17 const} {\cf18 int} argc, {\cf17 const} {\cf18 char} * {\cf17 const} argv[]);\par
00114 \par
00115     {\cf17 public}:\par
00116         Executor(Console *model, Display *view);\par
00117 \par
00118         {\cf17 virtual} ~Executor();\par
00119 \par
00132         sh_err_t execute({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]) {\cf17 const};\par
00133 \};\par
00134 \par
00135 \par
00136 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/Heap.h \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v inc/Heap.h}
{\xe \v inc/Heap.h}
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'D1\'A3\'AC\'B3\'E9\'CF\'F3\'C0\'E0 }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <assert.h>}\par
{\f2 #include <stddef.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Heap.h \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_heap_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'B4\'CB\'CD\'BC\'D5\'B9\'CA\'BE\'B8\'C3\'CE\'C4\'BC\'FE\'D6\'B1\'BD\'D3\'BB\'F2\'BC\'E4\'BD\'D3\'B5\'C4\'B1\'BB\'C4\'C4\'D0\'A9\'CE\'C4\'BC\'FE\'D2\'FD\'D3\'C3\'C1\'CB:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_heap_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Heap< T >}\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B3\'E9\'CF\'F3\'B6\'D1 }}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'D1\'A3\'AC\'B3\'E9\'CF\'F3\'C0\'E0 \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-20\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Heap.h} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Heap.h\par \pard\plain 
{\tc\tcl2 \v inc/Heap.h}
{\xe \v inc/Heap.h}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #ifndef _HEAP_H_}\par
00013 {\cf21 #define _HEAP_H_}\par
00014 \par
00015 {\cf21 #include <assert.h>}\par
00016 {\cf21 #include <stddef.h>}\par
00017 \par
00027 {\cf17 template} <{\cf17 class} T>\par
00028 {\cf17 class }Heap\par
00029 \{\par
00030     {\cf17 public}:\par
00031         Heap() : size_(0) \{\};\par
00032 \par
00043         {\cf17 virtual} ~Heap() \{\};\par
00044         \par
00045         {\cf18 size_t} size(){\cf17  const }\{ {\cf19 return} size_; \}\par
00046 \par
00047         {\cf17 virtual} {\cf18 void} build(T data[], {\cf18 size_t} size) = 0;\par
00048 \par
00049         {\cf17 virtual} {\cf18 void} insert(T value)\par
00050         \{\par
00051             assert({\cf17 false} && {\cf22 "insert not implemented."});\par
00052         \}\par
00053 \par
00054         {\cf17 virtual} T top(){\cf17  const}\par
00055 {\cf17         }\{\par
00056             assert({\cf17 false} && {\cf22 "top not implemented."});\par
00057             {\cf19 return} 0;\par
00058         \}\par
00059         \par
00060         {\cf17 virtual} T extract()\par
00061         \{\par
00062             assert({\cf17 false} && {\cf22 "extract not implemented."});\par
00063             {\cf19 return} 0;\par
00064         \}\par
00065     \par
00066     {\cf17 protected}:\par
00067         {\cf18 size_t} size_;      {\cf20 // \'B5\'B1\'C7\'B0\'C8\'DD\'C1\'BF}\par
00068 \};\par
00069 \par
00070 \par
00071 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/myshell.h \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v inc/myshell.h}
{\xe \v inc/myshell.h}
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
myshell\'CD\'B7\'CE\'C4\'BC\'FE \'B0\'FC\'BA\'AC\'C1\'CBmyshell.cpp\'D6\'D0\'CB\'F9\'D0\'E8\'D2\'AA\'D2\'FD\'D3\'C3\'B5\'C4\'CB\'F9\'D3\'D0\'D7\'D4\'B6\'A8\'D2\'E5\'C0\'E0 }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "config.h"}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid myshell.h \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "myshell_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'B4\'CB\'CD\'BC\'D5\'B9\'CA\'BE\'B8\'C3\'CE\'C4\'BC\'FE\'D6\'B1\'BD\'D3\'BB\'F2\'BC\'E4\'BD\'D3\'B5\'C4\'B1\'BB\'C4\'C4\'D0\'A9\'CE\'C4\'BC\'FE\'D2\'FD\'D3\'C3\'C1\'CB:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "myshell_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C3\'FC\'C3\'FB\'BF\'D5\'BC\'E4\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b SHELL}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b SHELL::shell_setup} (int argc, char *argv[], char *env[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C6\'F4\'B6\'AFshell }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b SHELL::shell_loop} ({\b Console} *model, {\b Display} *view, {\b Executor} *controller, char *env[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BD\'F8\'C8\'EBshell\'D1\'AD\'BB\'B7 }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
myshell\'CD\'B7\'CE\'C4\'BC\'FE \'B0\'FC\'BA\'AC\'C1\'CBmyshell.cpp\'D6\'D0\'CB\'F9\'D0\'E8\'D2\'AA\'D2\'FD\'D3\'C3\'B5\'C4\'CB\'F9\'D3\'D0\'D7\'D4\'B6\'A8\'D2\'E5\'C0\'E0 \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn})\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-02\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b myshell.h} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
myshell.h\par \pard\plain 
{\tc\tcl2 \v inc/myshell.h}
{\xe \v inc/myshell.h}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // \'B3\'CC\'D0\'F2\'A3\'BA\'C3\'FC\'C1\'EE\'D0\'D0\'B1\'E0\'BC\'AD\'C6\'F7}\par
00002 {\cf20 // \'D7\'F7\'D5\'DF\'A3\'BA\'C7\'F1\'C8\'D5\'BA\'EA 3200105842}\par
00003 \par
00017 {\cf21 #ifndef _MYSHELL_H_}\par
00018 {\cf21 #define _MYSHELL_H_}\par
00019 \par
00020 {\cf20 /* \'C5\'E4\'D6\'C3\'CE\'C4\'BC\'FE */}\par
00021 {\cf21 #include "config.h"}\par
00022 \par
00023 {\cf20 /* \'C0\'E0\'B5\'C4\'C9\'F9\'C3\'F7 */}\par
00024 {\cf17 class }Console;\par
00025 {\cf17 class }Display;\par
00026 {\cf17 class }Executor;\par
00027 \par
00028 {\cf17 namespace }SHELL\par
00029 \{\par
00031     {\cf18 int} shell_setup({\cf18 int} argc, {\cf18 char} *argv[], {\cf18 char} *env[]);\par
00032 \par
00034     {\cf18 int} shell_loop(Console* model, Display* view, Executor* controller, {\cf18 char} *env[]);\par
00035 \par
00036 \} {\cf20 // namespace SHELL}\par
00037 \par
00038 \par
00039 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/Parser.h \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v inc/Parser.h}
{\xe \v inc/Parser.h}
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D3\'EF\'B7\'A8\'B7\'D6\'CE\'F6 }}\par
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'B4\'CB\'CD\'BC\'D5\'B9\'CA\'BE\'B8\'C3\'CE\'C4\'BC\'FE\'D6\'B1\'BD\'D3\'BB\'F2\'BC\'E4\'BD\'D3\'B5\'C4\'B1\'BB\'C4\'C4\'D0\'A9\'CE\'C4\'BC\'FE\'D2\'FD\'D3\'C3\'C1\'CB:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_parser_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Parser}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D3\'EF\'B7\'A8\'B7\'D6\'CE\'F6 \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-19\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Parser.h} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Parser.h\par \pard\plain 
{\tc\tcl2 \v inc/Parser.h}
{\xe \v inc/Parser.h}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #ifndef _PARSER_H_}\par
00013 {\cf21 #define _PARSER_H_}\par
00014 \par
00015 {\cf17 class }Console;\par
00016 {\cf17 class }Display;\par
00017 {\cf17 class }Executor;\par
00018 \par
00019 {\cf17 class }Parser\par
00020 \{\par
00021     {\cf17 private}:\par
00022         {\cf17 enum} \{SUCCESS = 0, EXIT = 1\};\par
00023 \par
00040         {\cf17 static} {\cf18 bool} shell_execute(Console *model, Display* view, Executor* controller, {\cf18 int}& argc, {\cf18 char} *argv[], {\cf18 char} *env[]);\par
00041 \par
00042     {\cf17 public}:\par
00043         Parser({\cf20 /* args */}) \{\};\par
00044 \par
00053         {\cf17 virtual} ~Parser() = 0;  {\cf20 // \'B3\'E9\'CF\'F3\'C0\'E0\'A3\'AC\'B4\'BF\'D0\'E9\'BA\'AF\'CA\'FD}\par
00054 \par
00055         {\cf17 static} {\cf18 bool} shell_pipe(Console *model, Display* view, Executor* controller, {\cf18 int}& argc, {\cf18 char} *argv[], {\cf18 char} *env[]);\par
00056 \par
00057         {\cf17 static} {\cf18 int} shell_parser(Console *model, Display* view, Executor* controller, {\cf18 int}& argc, {\cf18 char} *argv[], {\cf18 char} *env[]);\par
00058 \};\par
00059 \par
00060 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
inc/ProcessManager.h \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v inc/ProcessManager.h}
{\xe \v inc/ProcessManager.h}
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BD\'F8\'B3\'CC\'B9\'DC\'C0\'ED }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Heap.h"}\par
{\f2 #include "config.h"}\par
{\f2 #include <set>}\par
{\f2 #include <unistd.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid ProcessManager.h \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_process_manager_8h__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'B4\'CB\'CD\'BC\'D5\'B9\'CA\'BE\'B8\'C3\'CE\'C4\'BC\'FE\'D6\'B1\'BD\'D3\'BB\'F2\'BC\'E4\'BD\'D3\'B5\'C4\'B1\'BB\'C4\'C4\'D0\'A9\'CE\'C4\'BC\'FE\'D2\'FD\'D3\'C3\'C1\'CB:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_process_manager_8h__dep__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C0\'E0\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b job_unit}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b ProcessManager}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BD\'F8\'B3\'CC\'B9\'DC\'C0\'ED \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-08-10\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b ProcessManager.h} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ProcessManager.h\par \pard\plain 
{\tc\tcl2 \v inc/ProcessManager.h}
{\xe \v inc/ProcessManager.h}
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #ifndef _PROCESS_MANAGER_H_}\par
00013 {\cf21 #define _PROCESS_MANAGER_H_}\par
00014 \par
00015 {\cf21 #include "Heap.h"}\par
00016 {\cf21 #include "config.h"}\par
00017 \par
00018 {\cf21 #include <set>}\par
00019 {\cf21 #include <unistd.h>}\par
00020 \par
00021 {\cf20 // \'D6\'C3\'D3\'DAconfig.h\'CD\'B7\'CE\'C4\'BC\'FE\'D6\'D0\'A3\'AC\'BC\'D3\'BF\'EC\'B1\'E0\'D2\'EB\'CB\'D9\'B6\'C8}\par
00022 {\cf20 // enum job_state                                  // \'BD\'F8\'B3\'CC\'D7\'B4\'CC\'AC}\par
00023 {\cf20 // \{}\par
00024 {\cf20 //     Running,                                    // \'D5\'FD\'D4\'DA\'D4\'CB\'D0\'D0}\par
00025 {\cf20 //     Stopped,                                    // \'CD\'A3\'D6\'B9\'D4\'CB\'D0\'D0}\par
00026 {\cf20 //     Done,                                       // \'CD\'EA\'B3\'C9\'D4\'CB\'D0\'D0}\par
00027 {\cf20 //     Terminated                                  // \'D6\'D5\'D6\'B9\'D4\'CB\'D0\'D0}\par
00028 {\cf20 // \};}\par
00029 \par
00030 {\cf17 class }job_unit\par
00031 \{\par
00032     {\cf17 public}:\par
00033         job_unit({\cf18 unsigned} {\cf18 int} _id, {\cf18 int} _pid, job_state _state, {\cf18 int} _argc, {\cf18 char} * _argv[]);\par
00034 \par
00035         {\cf20 // ~job_unit();}\par
00036 \par
00037         {\cf18 void} PrintJob({\cf18 int} output_fd = STDOUT_FILENO);\par
00038         \par
00039         {\cf20 /* \'CE\'AA\'C1\'CB\'CA\'B9\'D3\'C3\'BC\'AF\'BA\'CF\'A3\'AC\'CE\'D2\'C3\'C7\'D0\'E8\'D2\'AA\'D6\'D8\'D4\'D8job unit\'B5\'C4\'B4\'F3\'D0\'A1\'B1\'C8\'BD\'CF\'D4\'CB\'CB\'E3\'B7\'FB */}\par
00040         {\cf18 bool} operator== ( {\cf17 const} job_unit& rhs ){\cf17  const}\par
00041 {\cf17         }\{\par
00042             {\cf19 return} {\cf18 id} == rhs.id;\par
00043         \}\par
00044 \par
00045         {\cf18 bool} operator!= ( {\cf17 const} job_unit& rhs ){\cf17  const}\par
00046 {\cf17         }\{\par
00047             {\cf19 return} !(*{\cf17 this} == rhs);\par
00048         \}\par
00049 \par
00050         {\cf18 bool} operator< ( {\cf17 const} job_unit& rhs ){\cf17  const}\par
00051 {\cf17         }\{\par
00052             {\cf19 return} {\cf18 id} < rhs.id;\par
00053         \}\par
00054 \par
00055         {\cf18 bool} operator> ( {\cf17 const} job_unit& rhs ){\cf17  const}\par
00056 {\cf17         }\{\par
00057             {\cf19 return} rhs < *{\cf17 this};\par
00058         \}\par
00059 \par
00060         {\cf18 bool} operator<= ( {\cf17 const} job_unit& rhs ){\cf17  const}\par
00061 {\cf17         }\{\par
00062             {\cf19 return} !(rhs < *{\cf17 this});\par
00063         \}\par
00064 \par
00065         {\cf18 bool} operator>= ( {\cf17 const} job_unit& rhs ){\cf17  const}\par
00066 {\cf17         }\{\par
00067             {\cf19 return} !(*{\cf17 this} < rhs);\par
00068         \}\par
00069 \par
00070     {\cf20 // private:}\par
00071         {\cf18 unsigned} {\cf18 int} id;                            {\cf20 // \'BD\'F8\'B3\'CC\'C1\'D0\'B1\'EDid}\par
00072         pid_t pid;                                  {\cf20 // \'BD\'F8\'B3\'CC\'C1\'D0\'B1\'EDpid}\par
00073         job_state state;                            {\cf20 // \'BD\'F8\'B3\'CC\'C1\'D0\'B1\'ED\'D7\'B4\'CC\'AC}\par
00074         {\cf18 int} argc;                                   {\cf20 // \'BD\'F8\'B3\'CC\'C1\'D0\'B1\'ED\'B2\'CE\'CA\'FD}\par
00075         {\cf18 char} argv[MAX_ARGUMENT_NUMBER][BUFFER_SIZE];{\cf20 // \'BD\'F8\'B3\'CC\'C1\'D0\'B1\'ED\'B2\'CE\'CA\'FD}\par
00076 \};\par
00077 \par
00078 {\cf17 class }ProcessManager\par
00079 \{\par
00080     {\cf17 private}:\par
00081         {\cf20 // \'BD\'F8\'B3\'CC\'BF\'D8\'D6\'C6}\par
00082         Heap<unsigned int> *job_heap;                   {\cf20 // \'B9\'A4\'D7\'F7id\'B7\'D6\'C5\'E4\'B6\'D1}\par
00083         std::set<class job_unit> jobs;                 {\cf20 // \'BD\'F8\'B3\'CC\'C1\'D0\'B1\'ED\'A3\'AC\'B2\'C9\'D3\'C3STL\'BA\'EC\'BA\'DA\'CA\'F7\'CA\'B5\'CF\'D6}\par
00084 \par
00085     {\cf17 public}:\par
00086         ProcessManager({\cf20 /* args */});\par
00087         {\cf17 virtual} ~ProcessManager();\par
00088 \par
00089         {\cf18 void} PrintJobList({\cf18 int} output_fd = STDOUT_FILENO) {\cf17 const}; {\cf20 // \'B4\'F2\'D3\'A1\'BD\'F8\'B3\'CC\'C1\'D0\'B1\'ED}\par
00090 \par
00091         {\cf18 void} PrintJobListDone({\cf18 int} output_fd = STDOUT_FILENO); {\cf20 // \'B4\'F2\'D3\'A1\'D2\'D1\'CD\'EA\'B3\'C9\'B5\'C4\'BD\'F8\'B3\'CC\'C1\'D0\'B1\'ED}\par
00092 \par
00106         {\cf18 unsigned} {\cf18 int} JobInsert({\cf18 int} pid, job_state state, {\cf18 int} argc, {\cf18 char} *argv[]);\par
00107 \par
00117         {\cf18 void} JobRemove(job_unit * job);\par
00118         {\cf18 void} JobRemove(std::set<job_unit>::iterator& job);\par
00119 \par
00120         {\cf18 int} ForeGround({\cf18 unsigned} {\cf18 int} jobid);\par
00121         {\cf18 int} BackGround({\cf18 unsigned} {\cf18 int} jobid);\par
00122 \};\par
00123 \par
00124 {\cf21 #endif}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
main.cpp \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v main.cpp}
{\xe \v main.cpp}
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D6\'F7\'BA\'AF\'CA\'FD }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "myshell.h"}\par
{\f2 #include <stdio.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid main.cpp \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "main_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[], char **env)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D6\'F7\'BA\'AF\'CA\'FD \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-17\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b main.cpp} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v main\:main.cpp}
{\xe \v main.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int  {\i argc}, char *  {\i argv}[], char **  {\i env})}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b main.cpp} \'B5\'DA {\b 19} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "main_8cpp_a1aabce0760eec882190c6639111cdddb_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
main.cpp\par \pard\plain 
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // \'B3\'CC\'D0\'F2\'A3\'BA\'C3\'FC\'C1\'EE\'D0\'D0\'B1\'E0\'BC\'AD\'C6\'F7}\par
00002 {\cf20 // \'D7\'F7\'D5\'DF\'A3\'BA\'C7\'F1\'C8\'D5\'BA\'EA 3200105842}\par
00003 \par
00015 {\cf21 #include "myshell.h"}\par
00016 \par
00017 {\cf21 #include <stdio.h>}\par
00018 \par
00019 {\cf18 int} main({\cf18 int} argc, {\cf18 char} *argv[], {\cf18 char} **env)\par
00020 \{\par
00021     {\cf20 // \'BF\'AA\'CD\'B7\'CA\'E4\'B3\'F6\'C5\'D0\'B6\'CF\'B3\'CC\'D0\'F2\'CA\'C7\'B7\'F1\'D5\'FD\'B3\'A3\'BF\'AA\'CA\'BC\'A3\'AC\'BD\'F6\'D4\'DA\'B5\'F7\'CA\'D4\'CA\'B1\'CA\'B9\'D3\'C3}\par
00022     {\cf20 // puts("Welcome to MyShell ! \\n");}\par
00023 \par
00024     {\cf19 if} (SHELL::shell_setup(argc, argv, env) != 0)\par
00025         puts({\cf22 "shell setup failed."}); \par
00026 \par
00027     {\cf20 // \'C4\'A9\'CE\'B2\'CA\'E4\'B3\'F6\'C5\'D0\'B6\'CF\'B3\'CC\'D0\'F2\'CA\'C7\'B7\'F1\'D5\'FD\'B3\'A3\'BD\'E1\'CA\'F8\'A3\'AC\'BD\'F6\'D4\'DA\'B5\'F7\'CA\'D4\'CA\'B1\'CA\'B9\'D3\'C3}\par
00028     {\cf20 // puts("Bye~");}\par
00029 \par
00030     {\cf19 return} 0;\par
00031 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
README.md \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v README.md}
{\xe \v README.md}
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/common.cpp \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v src/common.cpp}
{\xe \v src/common.cpp}
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B9\'B2\'CF\'ED\'BA\'AF\'CA\'FD\'BF\'E2 }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "common.h"}\par
{\f2 #include <stdio.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid common.cpp \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "common_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b Argument_Display} (const int argc, char *const argv[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C3\'FC\'C1\'EE\'B2\'CE\'CA\'FD\'B4\'F2\'D3\'A1 \'CA\'D7\'D0\'D0\'CF\'D4\'CA\'BE\'B4\'AB\'C8\'EB\'B2\'CE\'CA\'FD\'B8\'F6\'CA\'FD \'BD\'D3\'CF\'C2\'C0\'B4\'D2\'BB\'D0\'D0\'D2\'BB\'B4\'CE\'CF\'D4\'CA\'BE\'C3\'FC\'C1\'EE\'D0\'D0\'D6\'D0\'B5\'C4\'B8\'F7\'B8\'F6\'B2\'CE\'CA\'FD\'A3\'AC\'D2\'D4\'BF\'D5\'B8\'F1\'B7\'D6\'BF\'AA }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
std::string & {\b String_Trim} (std::string &s)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C8\'A5\'B5\'F4\'D7\'D6\'B7\'FB\'B4\'AE\'C1\'BD\'B6\'CB\'BF\'D5\'B8\'F1 }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B9\'B2\'CF\'ED\'BA\'AF\'CA\'FD\'BF\'E2 \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-15\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.cpp} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v Argument_Display\:common.cpp}
{\xe \v common.cpp\:Argument_Display}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void Argument_Display (const int  {\i argc}, char *const  {\i argv}[])}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C3\'FC\'C1\'EE\'B2\'CE\'CA\'FD\'B4\'F2\'D3\'A1 \'CA\'D7\'D0\'D0\'CF\'D4\'CA\'BE\'B4\'AB\'C8\'EB\'B2\'CE\'CA\'FD\'B8\'F6\'CA\'FD \'BD\'D3\'CF\'C2\'C0\'B4\'D2\'BB\'D0\'D0\'D2\'BB\'B4\'CE\'CF\'D4\'CA\'BE\'C3\'FC\'C1\'EE\'D0\'D0\'D6\'D0\'B5\'C4\'B8\'F7\'B8\'F6\'B2\'CE\'CA\'FD\'A3\'AC\'D2\'D4\'BF\'D5\'B8\'F1\'B7\'D6\'BF\'AA }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argc} \cell }{\'B2\'CE\'CA\'FD\'B8\'F6\'CA\'FD \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i argv} \cell }{\'B2\'CE\'CA\'FD\'C1\'D0\'B1\'ED \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-15 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.cpp} \'B5\'DA {\b 16} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "common_8cpp_a7b6ca73d8ddfa874f4c518907878a50e_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v String_Trim\:common.cpp}
{\xe \v common.cpp\:String_Trim}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
std::string & String_Trim (std::string &  {\i s})}}
\par
{\bkmkstart AAAAAAAACR}
{\bkmkend AAAAAAAACR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C8\'A5\'B5\'F4\'D7\'D6\'B7\'FB\'B4\'AE\'C1\'BD\'B6\'CB\'BF\'D5\'B8\'F1 }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i s} \cell }{\'D0\'E8\'D2\'AA\'C8\'A5\'B3\'FD\'BF\'D5\'B8\'F1\'B5\'C4\'D7\'D6\'B7\'FB\'B4\'AE \cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B7\'B5\'BB\'D8\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
std::string& \'C8\'A5\'B3\'FD\'CD\'EA\'BF\'D5\'B8\'F1\'B5\'C4\'D7\'D6\'B7\'FB\'B4\'AE \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-17 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b common.cpp} \'B5\'DA {\b 27} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "common_8cpp_a8d405369fdbd9d568f19c4a92d27c71f_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
common.cpp\par \pard\plain 
{\tc\tcl2 \v src/common.cpp}
{\xe \v src/common.cpp}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #include "common.h"}\par
00013 \par
00014 {\cf21 #include <stdio.h>}\par
00015 \par
00016 {\cf18 void} Argument_Display({\cf17 const} {\cf18 int} argc, {\cf18 char}* {\cf17 const} argv[])\par
00017 \{\par
00018     printf({\cf22 "argc: %d\\n"}, argc);\par
00019     {\cf19 for} ({\cf18 int} i = 0; i < argc; ++i)\par
00020     \{\par
00021         printf({\cf22 "%s "}, argv[i]);\par
00022     \}\par
00023     putchar({\cf23 '\\n'});\par
00024     {\cf19 return};\par
00025 \}\par
00026 \par
00027 std::string& String_Trim(std::string &s) \par
00028 \{\par
00029     {\cf19 if} (s.empty()) {\cf20 // \'C8\'E7\'B9\'FBs\'CE\'AA\'BF\'D5}\par
00030     \{\par
00031         {\cf19 return} s;   {\cf20 // \'D4\'F2\'B2\'BB\'B1\'D8\'B4\'A6\'C0\'ED}\par
00032     \}\par
00033  \par
00034     s.erase(0,s.find_first_not_of({\cf22 " "}));    {\cf20 // \'C8\'A5\'B3\'FD\'D7\'D6\'B7\'FB\'B4\'AE\'C7\'B0\'B5\'C4\'BF\'D5\'B8\'F1}\par
00035     s.erase(s.find_last_not_of({\cf22 " "}) + 1);   {\cf20 // \'C8\'A5\'B3\'FD\'D7\'D6\'B7\'FB\'B4\'AE\'BA\'F3\'B5\'C4\'BF\'D5\'B8\'F1}\par
00036     {\cf19 return} s;\par
00037 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Console.cpp \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v src/Console.cpp}
{\xe \v src/Console.cpp}
{\bkmkstart AAAAAAAACS}
{\bkmkend AAAAAAAACS}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Console.h"}\par
{\f2 #include "BinaryHeap.h"}\par
{\f2 #include "ProcessManager.h"}\par
{\f2 #include <pwd.h>}\par
{\f2 #include <wait.h>}\par
{\f2 #include <assert.h>}\par
{\f2 #include <signal.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <unistd.h>}\par
{\f2 #include <iostream>}\par
{\f2 #include <exception>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Console.cpp \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_console_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b SignalHandler} (int signal_)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'C5\'BA\'C5\'BF\'D8\'D6\'C6\'D3\'EB\'B4\'A6\'C0\'ED }{
}\par
}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B1\'E4\'C1\'BF\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b Console} * {\b cp} = nullptr\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-03\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.cpp} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v SignalHandler\:Console.cpp}
{\xe \v Console.cpp\:SignalHandler}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void SignalHandler (int  {\i signal_})}}
\par
{\bkmkstart AAAAAAAACT}
{\bkmkend AAAAAAAACT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D0\'C5\'BA\'C5\'BF\'D8\'D6\'C6\'D3\'EB\'B4\'A6\'C0\'ED }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B2\'CE\'CA\'FD\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{{\i signal_} \cell }{\cell }
{\row }
}
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-21 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s82\li720\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.cpp} \'B5\'DA {\b 49} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B1\'E4\'C1\'BF\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v cp\:Console.cpp}
{\xe \v Console.cpp\:cp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b Console}* cp = nullptr{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACU}
{\bkmkend AAAAAAAACU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Console.cpp} \'B5\'DA {\b 30} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Console.cpp\par \pard\plain 
{\tc\tcl2 \v src/Console.cpp}
{\xe \v src/Console.cpp}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #include "Console.h"}\par
00013 {\cf21 #include "BinaryHeap.h"}\par
00014 {\cf21 #include "ProcessManager.h"}\par
00015 \par
00016 {\cf21 #include <pwd.h>}\par
00017 {\cf21 #include <wait.h>}\par
00018 {\cf21 #include <assert.h>}\par
00019 {\cf21 #include <signal.h>}\par
00020 {\cf21 #include <string.h>}\par
00021 {\cf21 #include <stdlib.h>}\par
00022 {\cf21 #include <unistd.h>}\par
00023 {\cf21 #include <iostream>}\par
00024 {\cf21 #include <exception>}\par
00025 \par
00026 {\cf18 int} Console::input_std_fd;\par
00027 {\cf18 int} Console::output_std_fd;\par
00028 {\cf18 int} Console::error_std_fd;\par
00029 pid_t Console::child_process_id = -1;\par
00030 {\cf17 static} Console* cp = {\cf17 nullptr};   {\cf20 // \'CE\'AA\'C1\'CB\'C4\'DC\'B9\'BB\'D4\'DA\'D3\'D1\'D4\'AA\'BA\'AF\'CA\'FD\'D6\'D0\'D2\'FD\'D3\'C3\'BF\'D8\'D6\'C6\'CC\'A8\'A3\'AC\'D4\'DA\'B4\'CB\'B4\'A6\'C9\'E8\'D6\'C3\'B1\'BE\'B5\'D8\'B1\'E4\'C1\'BF\'D2\'D4\'C0\'FB\'D3\'DA\'D0\'C5\'BA\'C5\'B4\'A6\'C0\'ED}\par
00031 \par
00032 Console::Console({\cf20 /* args */})\par
00033 \{\par
00034     [[maybe_unused]] {\cf18 int} ret;\par
00035     ret = init();       {\cf20 // \'B3\'F5\'CA\'BC\'BB\'AF}\par
00036     assert(ret == 0);   {\cf20 // \'C5\'D0\'B6\'CF\'B3\'F5\'CA\'BC\'BB\'AF\'CA\'C7\'B7\'F1\'B3\'C9\'B9\'A6}\par
00037 \par
00038     process_manager = {\cf17 new} ProcessManager();\par
00039     cp = {\cf17 this};\par
00040 \par
00041     {\cf19 return};\par
00042 \}\par
00043 \par
00044 Console::~Console()\par
00045 \{\par
00046     {\cf17 delete} process_manager;\par
00047 \}\par
00048 \par
00049 {\cf18 void} SignalHandler({\cf18 int} signal_)\par
00050 \{\par
00051     {\cf19 switch} (signal_)\par
00052     \{\par
00053         {\cf19 case} SIGINT:    {\cf20 // Ctrl C \'BD\'BB\'BB\'A5\'D7\'A2\'D2\'E2\'D0\'C5\'BA\'C5}\par
00054 {\cf21             #ifdef _DEBUG_}\par
00055             printf({\cf22 "Ctrl + C\\n"});\par
00056 {\cf21             #endif}\par
00057             {\cf19 if} (write(STDOUT_FILENO, {\cf22 "\\n"}, 1) < 0)\par
00058                 {\cf19 throw} std::exception();\par
00059             {\cf20 // \'B5\'B1kill\'B5\'C4pid < 0\'CA\'B1  \'C8\'A1|pid|\'B7\'A2\'B8\'F8\'B6\'D4\'D3\'A6\'BD\'F8\'B3\'CC\'D7\'E9\'A1\'A3}\par
00060             {\cf20 // kill(-getpid(), SIGINT);}\par
00061             \par
00062             {\cf20 // \'D7\'D3\'BD\'F8\'B3\'CC\'B5\'C4CTRL C\'D6\'D8\'D6\'C3\'C1\'CB\'A3\'AC\'D3\'C9\'D7\'D3\'BD\'F8\'B3\'CC\'B4\'A6\'C0\'ED\'D6\'D0\'B6\'CF}\par
00063             {\cf19 break};\par
00064         \par
00065         {\cf19 case} SIGTSTP:    {\cf20 // Ctrl Z \'BC\'FC\'C5\'CC\'D6\'D0\'B6\'CF}\par
00066 {\cf21             #ifdef _DEBUG_}\par
00067             printf({\cf22 "Ctrl + Z\\n"});\par
00068 {\cf21             #endif}\par
00069             {\cf19 if} (write(STDOUT_FILENO, {\cf22 "\\n"}, 1) < 0)\par
00070                 {\cf19 throw} std::exception();\par
00071             \par
00072             {\cf19 if} (Console::child_process_id >= 0)\par
00073             \{\par
00074                 setpgid(Console::child_process_id, 0);\par
00075                 kill(-Console::child_process_id, SIGTSTP);\par
00076             \par
00077                 {\cf18 unsigned} {\cf18 int} jobid = cp->AddJob(Console::child_process_id, Stopped, cp->argc, ({\cf18 char} **)cp->argv);\par
00078                 \par
00079                 {\cf20 // \'B4\'F2\'D3\'A1\'B5\'B1\'C7\'B0\'BD\'F8\'B3\'CC}\par
00080                 {\cf18 char} buffer[BUFFER_SIZE];\par
00081                 snprintf(buffer, BUFFER_SIZE-1, {\cf22 "[%u] %d\\n"}, jobid, Console::child_process_id);\par
00082                 {\cf19 if} (write(cp->output_std_fd, buffer, strlen(buffer)) == -1)\par
00083                     {\cf19 throw} std::exception();\par
00084             \par
00085                 snprintf(buffer, BUFFER_SIZE-1, {\cf22 "[%u]%c\\tStopped\\t\\t\\t\\t\\t"}, jobid, {\cf23 ' '});\par
00086                 {\cf19 if} (write(cp->output_std_fd, buffer, strlen(buffer)) == -1)\par
00087                     {\cf19 throw} std::exception();\par
00088 \par
00089                 {\cf20 // \'B2\'CE\'CA\'FD\'B4\'F2\'D3\'A1}\par
00090                 {\cf19 if} (cp->argc > 0)\par
00091                 \{\par
00092                     {\cf20 // \'C8\'B7\'B1\'A3\'D0\'D0\'C4\'A9\'CE\'DE\'B6\'E0\'D3\'E0\'B5\'C4\'BF\'D5\'B8\'F1}\par
00093                     {\cf19 if} (write(cp->output_std_fd, cp->argv[0], strlen(cp->argv[0])) == -1)\par
00094                         {\cf19 throw} std::exception();\par
00095                     {\cf19 for} ({\cf18 int} i = 1; i < cp->argc; ++i)\par
00096                     \{\par
00097                         {\cf19 if} (write(cp->output_std_fd, {\cf22 " "}, 1) == -1)    {\cf20 // \'B4\'F2\'D3\'A1\'BF\'D5\'B8\'F1}\par
00098                             {\cf19 throw} std::exception();\par
00099 \par
00100                         {\cf20 // \'B4\'F2\'D3\'A1\'B2\'CE\'CA\'FD}\par
00101                         {\cf19 if} (write(cp->output_std_fd, cp->argv[i], strlen(cp->argv[i])) == -1)\par
00102                             {\cf19 throw} std::exception();\par
00103                     \}\par
00104                 \}\par
00105                 {\cf19 if} (write(cp->output_std_fd, {\cf22 "\\n"}, 1) == -1)\par
00106                     {\cf19 throw} std::exception();\par
00107 \par
00108                 Console::child_process_id = -1;\par
00109             \}\par
00110             {\cf19 break};\par
00111         \par
00112         {\cf19 case} SIGCHLD:   {\cf20 // \'D7\'D3\'BD\'F8\'B3\'CC\'BD\'E1\'CA\'F8}\par
00113             {\cf20 // \'B8\'B8\'BD\'F8\'B3\'CC\'CA\'D5\'B5\'BD\'D7\'D3\'BD\'F8\'B3\'CC\'CD\'CB\'B3\'F6\'C3\'FC\'C1\'EE\'BA\'F3\'A3\'AC\'BB\'D8\'CA\'D5\'D7\'D3\'BD\'F8\'B3\'CC}\par
00114             {\cf20 // waitpid(-1, NULL, WNOHANG);}\par
00115             {\cf19 break};\par
00116 \par
00117         {\cf19 default}:\par
00118             {\cf19 break};\par
00119     \}\par
00120     \par
00121 \}\par
00122 \par
00123 {\cf18 int} Console::init()\par
00124 \{\par
00125     {\cf19 try}\par
00126     \{\par
00127         {\cf20 // \'BB\'F1\'C8\'A1\'D3\'C3\'BB\'A7\'C3\'FB\'B3\'C6}\par
00128         {\cf17 struct }passwd *pw = getpwuid(getuid());\par
00129         {\cf19 if} (pw == {\cf17 nullptr})\par
00130         \{\par
00131             {\cf19 throw} {\cf22 "get user database entry error"};\par
00132         \}\par
00133         memset(user_name, 0, BUFFER_SIZE);\par
00134         strncpy(user_name, pw->pw_name, BUFFER_SIZE-1);\par
00135 \par
00136         {\cf20 // \'BB\'F1\'C8\'A1\'D6\'F7\'BB\'FA\'C3\'FB\'B3\'C6}\par
00137         {\cf18 int} ret;\par
00138         ret = gethostname(host_name, BUFFER_SIZE-1);\par
00139         {\cf19 if} (ret != 0)\par
00140         \{\par
00141             {\cf19 throw} {\cf22 "Error when getting host name"};\par
00142         \}\par
00143         \par
00144         {\cf20 // \'BB\'F1\'C8\'A1\'B5\'B1\'C7\'B0\'B9\'A4\'D7\'F7\'C4\'BF\'C2\'BC}\par
00145         {\cf18 char} *result;\par
00146         result = getcwd(current_working_dictionary, BUFFER_SIZE);\par
00147         {\cf19 if} (result == NULL)\par
00148         \{\par
00149             {\cf19 throw} {\cf22 "Error when getting current working dictionary"};\par
00150         \}\par
00151 \par
00152         {\cf20 // \'BB\'F1\'C8\'A1\'D6\'F7\'C4\'BF\'C2\'BC}\par
00153         memset(home, 0, BUFFER_SIZE);\par
00154         strncpy(home, getenv({\cf22 "HOME"}), BUFFER_SIZE-1);\par
00155 \par
00156         {\cf20 // \'C9\'E8\'D6\'C3shell\'BB\'B7\'BE\'B3\'B1\'E4\'C1\'BF}\par
00157         strncpy(shell_path_env, current_working_dictionary, BUFFER_SIZE);\par
00158         strncat(shell_path_env, {\cf22 "/myshell"}, BUFFER_SIZE);\par
00159         setenv({\cf22 "shell"}, shell_path_env, 1);\par
00160 \par
00161         {\cf20 // \'C9\'E8\'D6\'C3\'D1\'DA\'C2\'EB}\par
00162         umask_ = umask(022);  {\cf20 // \'BB\'F1\'C8\'A1\'C4\'AC\'C8\'CF\'D1\'DA\'C2\'EB}\par
00163         umask(umask_); {\cf20 // \'B8\'C4\'BB\'D8\'D4\'AD\'C0\'B4\'D1\'DA\'C2\'EB}\par
00164         \par
00165         {\cf20 // \'C9\'E8\'D6\'C3\'C4\'AC\'C8\'CF\'CE\'C4\'BC\'FE\'C3\'E8\'CA\'F6\'B7\'FB}\par
00166         input_file_descriptor = STDIN_FILENO;\par
00167         output_file_descriptor = STDOUT_FILENO;\par
00168         error_file_descriptor = STDERR_FILENO;\par
00169 \par
00170         {\cf20 // \'C9\'E8\'D6\'C3\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC}\par
00171         redirect_input = {\cf17 false};\par
00172         redirect_output = {\cf17 false};\par
00173         redirect_error = {\cf17 false};\par
00174 \par
00175         {\cf20 // \'B1\'B8\'B7\'DDSTD IO}\par
00176         input_std_fd = dup(STDIN_FILENO);\par
00177         output_std_fd = dup(STDOUT_FILENO);\par
00178         error_std_fd = dup(STDERR_FILENO);\par
00179 \par
00180         {\cf20 // \'BB\'F1\'C8\'A1\'BD\'F8\'B3\'CC}\par
00181         process_id = getpid();\par
00182         child_process_id = -1;  {\cf20 // \'D4\'DD\'CE\'DE\'D7\'D3\'BD\'F8\'B3\'CC}\par
00183 \par
00184         {\cf20 // signal(SIGINT, SignalHandler);  // Ctrl + C}\par
00185         signal(SIGTSTP, SignalHandler); {\cf20 // Ctrl + Z}\par
00186         signal(SIGCHLD, SignalHandler); {\cf20 // \'D7\'D3\'BD\'F8\'B3\'CC\'BD\'E1\'CA\'F8\'CA\'B1\'B7\'A2\'CB\'CD\'B8\'F8\'B8\'B8\'BD\'F8\'B3\'CC\'B5\'C4\'D0\'C5\'BA\'C5}\par
00187 \par
00188         {\cf20 // \'C6\'C1\'C4\'BBshell\'B4\'D3\'BA\'F3\'CC\'A8\'B5\'F7\'D3\'C3tcsetpcgrp\'CA\'B1\'CA\'D5\'B5\'BD\'B5\'C4\'D0\'C5\'BA\'C5}\par
00189         signal(SIGTTIN, SIG_IGN);   {\cf20 // \'C6\'C1\'B1\'CESIGTTIN\'D0\'C5\'BA\'C5 }\par
00190         signal(SIGTTOU, SIG_IGN);   {\cf20 // \'C6\'C1\'B1\'CESIGTTOU\'D0\'C5\'BA\'C5 }\par
00191     \}\par
00192     {\cf19 catch}({\cf17 const} std::exception& e)\par
00193     \{\par
00194         std::cerr << e.what() << {\cf23 '\\n'};\par
00195         {\cf19 return} 1;\par
00196     \}\par
00197     \par
00198     {\cf19 return} 0;\par
00199 \}\par
00200 \par
00201 {\cf18 void} Console::ConsoleJobList(){\cf17  const}\par
00202 {\cf17 }\{\par
00203     {\cf20 /* \'CF\'D4\'CA\'BE\'B9\'A4\'D7\'F7\'C1\'D0\'B1\'ED\'A3\'AC\'D2\'D4\'B4\'F2\'D3\'A1\'D3\'EB\'D6\'D8\'B6\'A8\'CF\'F2\'B4\'A6\'A1\'A3 */}\par
00204     process_manager->PrintJobList(STDOUT_FILENO);\par
00205 \}\par
00206 \par
00207 {\cf18 void} Console::ConsoleJobListDone()\par
00208 \{\par
00209     {\cf20 /* \'CA\'E4\'B3\'F6\'D3\'A6\'CF\'D4\'CA\'BE\'D4\'DA\'C6\'C1\'C4\'BB\'C9\'CF\'A3\'AC\'CE\'DE\'C2\'DB\'C8\'E7\'BA\'CE\'D6\'D8\'B6\'A8\'CF\'F2\'A1\'A3 */}\par
00210     process_manager->PrintJobListDone(output_std_fd);\par
00211 \}\par
00212 \par
00213 {\cf18 unsigned} {\cf18 int} Console::AddJob({\cf18 int} pid, job_state state, {\cf18 int} argc, {\cf18 char} *argv[])\par
00214 \{\par
00215     {\cf19 return} process_manager->JobInsert(pid, state, argc, argv);\par
00216 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Display.cpp \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v src/Display.cpp}
{\xe \v src/Display.cpp}
{\bkmkstart AAAAAAAACV}
{\bkmkend AAAAAAAACV}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "Display.h"}\par
{\f2 #include "Console.h"}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <fcntl.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <unistd.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Display.cpp \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_display_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-03\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Display.cpp} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Display.cpp\par \pard\plain 
{\tc\tcl2 \v src/Display.cpp}
{\xe \v src/Display.cpp}
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #include "Display.h"}\par
00013 {\cf21 #include "Console.h"}\par
00014 \par
00015 {\cf21 #include <stdio.h>}\par
00016 {\cf21 #include <fcntl.h>}\par
00017 {\cf21 #include <string.h>}\par
00018 {\cf21 #include <unistd.h>}\par
00019 \par
00020 Display::Display(Console* console)\par
00021 : console_(console), perform(true), buffer_({\cf22 ""})\par
00022 \{\par
00023 \}\par
00024 \par
00025 Display::~Display()\par
00026 \{\par
00027 \}\par
00028 \par
00029 {\cf18 int} Display::InputCommand({\cf18 char} *input, {\cf17 const} {\cf18 int} len) \par
00030 \{\par
00031     tcsetpgrp(STDIN_FILENO, getpid());\par
00032     \par
00033     {\cf20 // \'B3\'F5\'CA\'BC\'BB\'AF\'CA\'E4\'C8\'EB\'BB\'BA\'B3\'E5\'C6\'F7\'D3\'EB\'CF\'E0\'B9\'D8\'B1\'E4\'C1\'BF}\par
00034     {\cf18 char} ch;\par
00035     {\cf18 int} i = 0;\par
00036     memset(input, 0, len);\par
00037 \par
00038     {\cf20 // \'D1\'AD\'BB\'B7\'B6\'C1\'C8\'EB\'D7\'D6\'B7\'FB}\par
00039     {\cf19 do}\par
00040     \{\par
00041         ssize_t state = read(console_->input_file_descriptor, &ch, 1);\par
00042         {\cf19 if} (state == 0)\par
00043         \{\par
00044             {\cf20 // \'B6\'C1\'B5\'BD\'C1\'CBEOF\'A3\'AC\'BD\'E1\'CA\'F8}\par
00045             {\cf19 if} (i == 0) {\cf20 // \'C8\'E7\'B9\'FB\'B4\'CB\'CA\'B1\'BB\'BA\'B3\'E5\'C6\'F7\'D6\'D0\'CA\'B2\'C3\'B4\'C4\'DA\'C8\'DD\'D2\'B2\'C3\'BB\'D3\'D0}\par
00046                 {\cf19 return} 0;   {\cf20 // \'D6\'B1\'BD\'D3\'B7\'B5\'BB\'D8}\par
00047             {\cf19 else}    {\cf20 // \'D5\'E2\'CA\'C7\'CE\'C4\'B1\'BE\'CE\'B4\'BC\'D3\'C8\'EB\'BB\'BB\'D0\'D0\'B5\'C4\'D7\'EE\'BA\'F3\'D2\'BB\'D0\'D0}\par
00048             \{\par
00049                 input[i++] = {\cf23 '\\n'};  {\cf20 // \'CA\'D6\'B6\'AF\'BC\'D3\'C8\'EB\'BB\'BB\'D0\'D0}\par
00050                 {\cf19 return} i;           {\cf20 // \'BD\'AB\'D7\'EE\'BA\'F3\'D2\'BB\'D0\'D0\'C3\'FC\'C1\'EE\'B4\'A6\'C0\'ED\'CD\'EA\'B1\'CF}\par
00051             \}\par
00052         \}\par
00053         {\cf19 else} {\cf19 if} (state == -1)\par
00054         \{\par
00055             {\cf19 throw} {\cf22 "Read Input Error"};\par
00056         \}\par
00057         \par
00058 \par
00059         {\cf19 if} (ch == {\cf23 '\\\\'}) {\cf20 // \'C8\'E7\'B9\'FB\'B6\'C1\'B5\'BD\'BB\'BB\'D0\'D0\'CA\'E4\'C8\'EB\\\'C3\'FC\'C1\'EE\'BE\'CD\'CC\'F8\'B9\'FD\'BC\'CC\'D0\'F8}\par
00060         \{\par
00061             ch = getchar(); {\cf20 // \'BD\'AB\'CB\'E6\'BA\'F3\'B5\'C4\'BB\'BB\'D0\'D0\'B7\'FB\'B6\'C1\'C8\'EB}\par
00062             {\cf19 continue};\par
00063         \}\par
00064 \par
00065         {\cf19 if} (ch == {\cf23 ';'})  {\cf20 // \'BD\'AB\'A3\'BB\'CA\'D3\'CE\'AA\'BB\'BB\'D0\'D0\'B7\'FB\'A3\'AC\'B1\'E3\'D3\'DAlexer\'BA\'CDparser\'B4\'A6\'C0\'ED}\par
00066         \{\par
00067             ch = {\cf23 '\\n'};\par
00068             perform = {\cf17 false};\par
00069         \}\par
00070             \par
00071         input[i++] = ch;\par
00072 \par
00073         {\cf19 if} (i == len)   {\cf20 // \'B4\'EF\'B5\'BD\'D7\'EE\'B4\'F3\'B3\'A4\'B6\'C8\'C1\'CB}\par
00074         \{\par
00075             buffer_ = {\cf22 "\\e[1;31mERROR\\e[0m input compand exceeds maximum length. \'CA\'E4\'C8\'EB\'C3\'FC\'C1\'EE\'B5\'C4\'B3\'A4\'B6\'C8\'B3\'AC\'B9\'FD\'C1\'CB\'D4\'CA\'D0\'ED\'B5\'C4\'D7\'EE\'B4\'F3\'B3\'A4\'B6\'C8"};\par
00076             memset(input, 0, len);  {\cf20 // \'C7\'E5\'BF\'D5\'BB\'BA\'B3\'E5\'C7\'F8\'CA\'E4\'C8\'EB}\par
00077             {\cf19 return} -1;\par
00078         \}\par
00079     \} {\cf19 while} (ch != {\cf23 '\\n'});\par
00080 \par
00081 {\cf21     #ifdef _DEBUG_}\par
00082     printf({\cf22 "input: %s"}, input);\par
00083 {\cf21     #endif}\par
00084 \par
00085     {\cf19 return} i;\par
00086 \}\par
00087 \par
00088 {\cf18 void} Display::render()\par
00089 \{\par
00090     buffer_ = {\cf22 ""};   {\cf20 // \'C3\'BF\'C2\'D6\'D1\'AD\'BB\'B7\'C7\'B0\'BD\'AB\'CA\'E4\'B3\'F6\'BB\'BA\'B3\'E5\'C7\'F8\'C7\'E5\'BF\'D5}\par
00091 \par
00092     {\cf20 // \'C8\'E7\'B9\'FB\'B2\'BB\'CA\'C7\'B4\'D3\'B1\'EA\'D7\'BC\'CA\'E4\'C8\'EB\'D6\'D0\'CA\'E4\'C8\'EB\'BB\'F2\'CA\'C7\'B2\'BB\'CA\'C7\'BD\'AB\'C4\'DA\'C8\'DD\'CA\'E4\'B3\'F6\'B5\'BD\'B1\'EA\'D7\'BC\'CA\'E4\'B3\'F6\'B5\'C4\'BB\'B0\'A3\'AC}\par
00093     {\cf19 if} (console_->input_file_descriptor != STDIN_FILENO ||\par
00094         console_->output_file_descriptor != STDOUT_FILENO)\par
00095         {\cf19 return}; {\cf20 // \'BE\'CD\'B2\'BB\'D0\'E8\'D2\'AA\'B4\'F2\'D3\'A1\'CC\'E1\'CA\'BE\'B7\'FB}\par
00096     \par
00097     {\cf19 if} (!perform)\par
00098     \{\par
00099         perform = {\cf17 true};\par
00100         {\cf19 return};\par
00101     \}\par
00102 \par
00103     {\cf18 int} sret = 0;\par
00104     {\cf17 const} {\cf18 size_t} len = strlen(console_->home);\par
00105     {\cf19 if} (strlen(console_->current_working_dictionary) >= len)\par
00106     \{\par
00107         {\cf18 size_t} i = 0; \par
00108         {\cf19 while} (i < len)\par
00109         \{\par
00110             {\cf19 if} (console_->current_working_dictionary[i] != console_->home[i])\par
00111                 {\cf19 break};\par
00112             ++i;\par
00113         \}\par
00114         {\cf19 if} (i == len)\par
00115             sret = i;\par
00116     \}\par
00117     \par
00118     {\cf18 char} buffer[BUFFER_SIZE];   {\cf20 // \'B4\'F2\'D3\'A1\'BB\'BA\'B3\'E5\'C7\'F8}\par
00119     sret = sret \par
00120         ? snprintf(buffer, BUFFER_SIZE, {\cf22 "\\e[1;32m%s@%s\\e[0m:\\e[1;34m~%s\\e[0m> "}, \\\par
00121         console_->user_name, console_->host_name, console_->current_working_dictionary+sret)\par
00122         : snprintf(buffer, BUFFER_SIZE, {\cf22 "\\e[1;32m%s@%s\\e[0m:\\e[1;34m%s\\e[0m> "}, \\\par
00123         console_->user_name, console_->host_name, console_->current_working_dictionary);\par
00124     {\cf19 if} (sret == -1)\par
00125     \{\par
00126         {\cf19 throw} {\cf22 "Error when writing into output buffer"};\par
00127     \}\par
00128 \par
00129     ssize_t ret;\par
00130     ret = write(console_->output_file_descriptor, buffer, strlen(buffer));\par
00131     {\cf19 if} (ret == -1)\par
00132     \{\par
00133         {\cf19 throw} {\cf22 "Error when writing from buffer"};\par
00134     \}\par
00135 \par
00136     {\cf19 return};\par
00137 \}\par
00138 \par
00139 {\cf18 void} Display::prompt(){\cf17  const}\par
00140 {\cf17 }\{\par
00141     {\cf19 if} (write(console_->output_file_descriptor, {\cf22 "> "}, 2) == -1)\par
00142     \{\par
00143         {\cf19 throw} std::exception();\par
00144     \}\par
00145 \}\par
00146 \par
00147 {\cf18 void} Display::message({\cf17 const} {\cf18 char} * msg)\par
00148 \{\par
00149     buffer_ += std::string(msg);\par
00150 \}\par
00151 \par
00152 {\cf18 void} Display::show(){\cf17  const}\par
00153 {\cf17 }\{\par
00154     ssize_t ret;\par
00155     ret = write(console_->output_file_descriptor, buffer_.c_str(), buffer_.length());\par
00156     {\cf19 if} (ret == -1)\par
00157     \{\par
00158         {\cf19 throw} {\cf22 "Error when showing buffer in Display"};\par
00159     \}\par
00160 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Executor.cpp \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v src/Executor.cpp}
{\xe \v src/Executor.cpp}
{\bkmkstart AAAAAAAACW}
{\bkmkend AAAAAAAACW}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "common.h"}\par
{\f2 #include "myshell.h"}\par
{\f2 #include "Console.h"}\par
{\f2 #include "Display.h"}\par
{\f2 #include "Executor.h"}\par
{\f2 #include "ProcessManager.h"}\par
{\f2 #include <vector>}\par
{\f2 #include <sstream>}\par
{\f2 #include <fcntl.h>}\par
{\f2 #include <assert.h>}\par
{\f2 #include <dirent.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <unistd.h>}\par
{\f2 #include <sys/stat.h>}\par
{\f2 #include <sys/wait.h>}\par
{\f2 #include <sys/types.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Executor.cpp \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_executor_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b test_tty} (const char *file_name)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B1\'E4\'C1\'BF\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const char * {\b OperandArray} []\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-04\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v test_tty\:Executor.cpp}
{\xe \v Executor.cpp\:test_tty}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static bool test_tty (const char *  {\i file_name}){\f2 [inline]}, {\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACX}
{\bkmkend AAAAAAAACX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B2\'E2\'CA\'D4\'D6\'D5\'B6\'CB\'C1\'AA\'CF\'B5 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 841} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_executor_8cpp_af06d386f27818725b8dd8903e2289036_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B1\'E4\'C1\'BF\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v OperandArray\:Executor.cpp}
{\xe \v Executor.cpp\:OperandArray}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const char* OperandArray[]{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACY}
{\bkmkend AAAAAAAACY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b \'B3\'F5\'CA\'BC\'D6\'B5:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid = \par
\{\par
    {\cf22 "bg"}, {\cf22 "cd"}, {\cf22 "clr"}, {\cf22 "dir"}, {\cf22 "echo"}, {\cf22 "exec"}, {\cf22 "exit"}, {\cf22 "fg"},\par
    {\cf22 "help"}, {\cf22 "jobs"}, {\cf22 "myshell"}, {\cf22 "pwd"}, {\cf22 "set"}, {\cf22 "test"}, {\cf22 "time"}, {\cf22 "umask"}\par
\}\par
}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B6\'A8\'D2\'E5\'C3\'FC\'C1\'EE\'D7\'D6\'B7\'FB\'B4\'AE\'CA\'FD\'D7\'E9 \par
}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Executor.cpp} \'B5\'DA {\b 36} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Executor.cpp\par \pard\plain 
{\tc\tcl2 \v src/Executor.cpp}
{\xe \v src/Executor.cpp}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #include "common.h"}\par
00013 {\cf21 #include "myshell.h"}\par
00014 {\cf21 #include "Console.h"}\par
00015 {\cf21 #include "Display.h"}\par
00016 {\cf21 #include "Executor.h"}\par
00017 {\cf21 #include "ProcessManager.h"}\par
00018 \par
00019 {\cf21 #include <vector>}\par
00020 {\cf21 #include <sstream>}\par
00021 \par
00022 {\cf21 #include <fcntl.h>}\par
00023 {\cf21 #include <assert.h>}\par
00024 {\cf21 #include <dirent.h>}\par
00025 {\cf21 #include <string.h>}\par
00026 {\cf21 #include <unistd.h>}\par
00027 \par
00028 {\cf21 #include <sys/stat.h>}\par
00029 {\cf21 #include <sys/wait.h>}\par
00030 {\cf21 #include <sys/types.h>}\par
00031 \par
00033 {\cf17 static} {\cf17 inline} {\cf18 bool} test_tty({\cf17 const} {\cf18 char} * file_name);\par
00034 \par
00036 {\cf17 static} {\cf17 const} {\cf18 char}* OperandArray[] = \par
00037 \{\par
00038     {\cf22 "bg"}, {\cf22 "cd"}, {\cf22 "clr"}, {\cf22 "dir"}, {\cf22 "echo"}, {\cf22 "exec"}, {\cf22 "exit"}, {\cf22 "fg"},\par
00039     {\cf22 "help"}, {\cf22 "jobs"}, {\cf22 "myshell"}, {\cf22 "pwd"}, {\cf22 "set"}, {\cf22 "test"}, {\cf22 "time"}, {\cf22 "umask"}\par
00040 \};\par
00041 \par
00042 Executor::Executor(Console *model, Display *view)\par
00043 : console_(model), display_(view)\par
00044 \{\par
00045     assert(console_ != {\cf17 nullptr});\par
00046     assert(display_ != {\cf17 nullptr});\par
00047 \par
00049     {\cf18 int} i = 0;\par
00050 \par
00051     FunctionArray[i] = &Executor::execute_bg;       ++i;\par
00052     FunctionArray[i] = &Executor::execute_cd;       ++i;\par
00053     FunctionArray[i] = &Executor::execute_clr;      ++i;\par
00054     FunctionArray[i] = &Executor::execute_dir;      ++i;\par
00055     FunctionArray[i] = &Executor::execute_echo;     ++i;\par
00056     FunctionArray[i] = &Executor::execute_exec;     ++i;\par
00057     FunctionArray[i] = &Executor::execute_exit;     ++i;\par
00058     FunctionArray[i] = &Executor::execute_fg;       ++i;\par
00059 \par
00060     FunctionArray[i] = &Executor::execute_help;     ++i;\par
00061     FunctionArray[i] = &Executor::execute_jobs;     ++i;\par
00062     FunctionArray[i] = &Executor::execute_myshell;  ++i;\par
00063     FunctionArray[i] = &Executor::execute_pwd;      ++i;\par
00064     FunctionArray[i] = &Executor::execute_set;      ++i;\par
00065     FunctionArray[i] = &Executor::execute_test;     ++i;\par
00066     FunctionArray[i] = &Executor::execute_time;     ++i;\par
00067     FunctionArray[i] = &Executor::execute_umask;    ++i;\par
00068 \par
00069     {\cf19 return};\par
00070 \}\par
00071 \par
00072 Executor::~Executor()\par
00073 \{\par
00074 \}\par
00075 \par
00076 sh_err_t Executor::execute({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00077 {\cf17 }\{\par
00078     {\cf19 if} (argc == 0)\par
00079         {\cf19 return} SH_SUCCESS;  {\cf20 // \'C3\'BB\'D3\'D0\'CA\'E4\'C8\'EB\'C3\'FC\'C1\'EE\'D4\'F2\'CE\'DE\'D0\'E8\'B4\'A6\'C0\'ED}\par
00080     {\cf19 else} {\cf19 if} (argv == {\cf17 nullptr} || argv[0] == {\cf17 nullptr})\par
00081     \{\par
00082         assert({\cf17 false});\par
00083         {\cf19 return} SH_FAILED;   {\cf20 // \'BD\'E2\'CE\'F6\'BF\'C9\'C4\'DC\'B2\'FA\'C9\'FA\'C1\'CB\'B4\'ED\'CE\'F3}\par
00084     \}\par
00085 \par
00086     {\cf20 /* \'B9\'D2\'C6\'F0\'C3\'FC\'C1\'EE\'B4\'A6\'C0\'ED */}\par
00087     {\cf18 int}& argc_ = {\cf17 const_cast<}{\cf18 int}&{\cf17 >}(argc);\par
00088     {\cf19 if} (strcmp(argv[argc - 1], {\cf22 "&"}) == 0)    {\cf20 // \'BA\'F3\'CC\'A8\'B9\'D2\'C6\'F0}\par
00089     \{\par
00090         --argc_;\par
00091         {\cf19 if} (argc == 0)  {\cf20 // \'B2\'CE\'CA\'FD\'B4\'ED\'CE\'F3}\par
00092             {\cf19 return} SH_ARGS;\par
00093 \par
00094         pid_t pid;\par
00095         {\cf19 if} ((pid = fork()) < 0)\par
00096         \{ \par
00097             {\cf20 /* \'B4\'ED\'CE\'F3\'B4\'A6\'C0\'ED */}\par
00098             {\cf19 throw} {\cf22 "Fork Error, \'B4\'ED\'CE\'F3\'D6\'D5\'D6\'B9"};\par
00099         \}\par
00100         {\cf19 else} {\cf19 if} (pid == 0)\par
00101         \{\par
00102             {\cf20 /* \'D7\'D3\'BD\'F8\'B3\'CC */}  \par
00103             setenv({\cf22 "parent"}, console_->shell_path_env, 1);  {\cf20 // \'C9\'E8\'D6\'C3\'B5\'F7\'D3\'C3\'D7\'D3\'BD\'F8\'B3\'CC\'B5\'C4\'B8\'B8\'BD\'F8\'B3\'CC}\par
00104             Console::child_process_id = getpid();\par
00105 \par
00106 {\cf21             #ifdef _DEBUG_}\par
00107             printf({\cf22 "child pid: %d\\n"}, console_->process_id);\par
00108 {\cf21             #endif}\par
00109 \par
00110             setpgid(0, 0);\par
00111             signal(SIGINT, SIG_DFL);    {\cf20 // \'BB\'D6\'B8\'B4Ctrl C\'D0\'C5\'BA\'C5}\par
00112             signal(SIGTSTP, SIG_DFL);   {\cf20 // \'BB\'D6\'B8\'B4Ctrl Z\'D0\'C5\'BA\'C5}\par
00113 \par
00114             {\cf18 char} **&argv_ = {\cf17 const_cast<}{\cf18 char} **&{\cf17 >}(argv);\par
00115             argv_[argc] = NULL;\par
00116 {\cf21             #ifdef _DEBUG_}\par
00117             Argument_Display(argc, argv);\par
00118 {\cf21             #endif}\par
00119 \par
00120             {\cf20 // \'D6\'B4\'D0\'D0\'C3\'FC\'C1\'EE}\par
00121             shell_function(argc, argv, env);\par
00122 \par
00123             {\cf20 // \'D6\'B4\'D0\'D0\'CD\'EA\'B3\'C9\'CA\'B1\'CD\'CB\'B3\'F6}\par
00124             {\cf19 return} SH_EXIT;\par
00125         \}\par
00126         {\cf19 else}\par
00127         \{\par
00128             {\cf20 /* \'B8\'B8\'BD\'F8\'B3\'CC */}\par
00129 {\cf21             #ifdef _DEBUG_}\par
00130             printf({\cf22 "parent pid: %d\\n"}, pid);\par
00131 {\cf21             #endif}\par
00132 \par
00133             {\cf20 // \'CC\'ED\'BC\'D3\'BD\'F8\'B3\'CC\'C1\'D0\'B1\'ED}\par
00134             {\cf18 char} **&argv_ = {\cf17 const_cast<}{\cf18 char} **&{\cf17 >}(argv);\par
00135             argv_[argc] = NULL;\par
00136             {\cf18 unsigned} {\cf18 int} jobid = console_->AddJob(pid, Running, argc_, argv_);\par
00137             {\cf20 // console_->process_id = getpid();    // \'BF\'C9\'D2\'D4\'BF\'B4\'B5\'BD\'A3\'AC\'D5\'E2\'C0\'EF\'B5\'C4pid\'CA\'C7\'C3\'BB\'D3\'D0\'B8\'C4\'B1\'E4\'B5\'C4}\par
00138             console_->child_process_id = pid;\par
00139             \par
00140             {\cf20 // \'B4\'F2\'D3\'A1\'B5\'B1\'C7\'B0\'BD\'F8\'B3\'CC}\par
00141             {\cf18 char} buffer[32];\par
00142             snprintf(buffer, 32, {\cf22 "[%u] %d\\n"}, jobid, pid);\par
00143             {\cf19 if} (write(console_->output_std_fd, buffer, strlen(buffer)) == -1)\par
00144                 {\cf19 throw} std::exception();\par
00145             \par
00146             {\cf20 // setpgid(pid, pid);}\par
00147 \par
00148             {\cf20 // // \'BD\'AB\'C7\'B0\'B6\'CB\'C9\'E8\'D6\'C3\'CE\'AA\'D7\'D3\'BD\'F8\'B3\'CC}\par
00149             {\cf20 // tcsetpgrp(STDIN_FILENO, pid);}\par
00150             {\cf20 // tcsetpgrp(STDOUT_FILENO, pid);}\par
00151             {\cf20 // tcsetpgrp(STDERR_FILENO, pid);}\par
00152             \par
00153             {\cf20 // int status;}\par
00154             {\cf20 // waitpid(pid, &status, WNOHANG);}\par
00155 \par
00156             {\cf20 // // \'BD\'AB\'C7\'B0\'B6\'CB\'C9\'E8\'D6\'C3\'CE\'AA\'B8\'B8\'BD\'F8\'B3\'CC}\par
00157             {\cf20 // tcsetpgrp(STDIN_FILENO, getpid());}\par
00158             {\cf20 // tcsetpgrp(STDOUT_FILENO, getpid());}\par
00159             {\cf20 // tcsetpgrp(STDERR_FILENO, getgid());}\par
00160 \par
00161             {\cf19 return} SH_SUCCESS;\par
00162         \}\par
00163     \}\par
00164     \par
00165     {\cf19 return} shell_function(argc, argv, env);\par
00166 \}\par
00167 \par
00168 sh_err_t Executor::shell_function({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00169 {\cf17 }\{\par
00170     {\cf17 const} {\cf18 char} *op = argv[0];\par
00171     console_->argc = argc;\par
00172     {\cf19 for} ({\cf18 int} i = 0; i < argc; ++i)\par
00173         strncpy(console_->argv[i], argv[i], BUFFER_SIZE);\par
00174 \par
00175 {\cf21 #ifdef _DEBUG_}\par
00176     Argument_Display(argc, argv);\par
00177 \par
00178     {\cf20 // \'D2\'D4\'CF\'C2\'C3\'FC\'C1\'EE\'B2\'BB\'D2\'AA\'C7\'F3\'CA\'B5\'CF\'D6\'A3\'AC\'BD\'F6\'B9\'A9\'C1\'B7\'CF\'B0\'CA\'B9\'D3\'C3}\par
00179     {\cf19 if} (strcmp(op, {\cf22 "date"}) == 0)\par
00180     \{\par
00181         {\cf19 return} execute_date(argc, argv, env);\par
00182     \}\par
00183     {\cf19 else} {\cf19 if} (strcmp(op, {\cf22 "clear"}) == 0)\par
00184     \{\par
00185         {\cf19 return} execute_clear(argc, argv, env);\par
00186     \}\par
00187     {\cf19 else} {\cf19 if} (strcmp(op, {\cf22 "env"}) == 0)\par
00188     \{\par
00189         {\cf19 return} execute_env(argc, argv, env);\par
00190     \}\par
00191     {\cf19 else} {\cf19 if} (strcmp(op, {\cf22 "who"}) == 0)\par
00192     \{\par
00193         {\cf19 return} execute_who(argc, argv, env);\par
00194     \}\par
00195     {\cf19 else} {\cf19 if} (strcmp(op, {\cf22 "mkdir"}) == 0)\par
00196     \{\par
00197         {\cf19 return} execute_mkdir(argc, argv, env);\par
00198     \}\par
00199     {\cf19 else} {\cf19 if} (strcmp(op, {\cf22 "rmdir"}) == 0)\par
00200     \{\par
00201         {\cf19 return} execute_rmdir(argc, argv, env);\par
00202     \}\par
00203 {\cf21 #endif}\par
00204 \par
00206     {\cf18 int} index = Binary_Search(0, {\cf17 sizeof}(OperandArray)/{\cf17 sizeof}(OperandArray[0]), op, OperandArray, strcmp);\par
00207 {\cf21 #ifdef _DEBUG_}\par
00208     printf({\cf22 "index: %d op: %s\\n"}, index, OperandArray[index>=0?index:0]);\par
00209 {\cf21 #endif}\par
00210 \par
00211     {\cf19 if} (index >= 0 && index < FunctionNumber)   {\cf20 // \'D5\'D2\'B5\'BD\'C1\'CB}\par
00212     \{\par
00213         MemFuncPtr FunctionPointer = FunctionArray[index];  {\cf20 // \'D5\'D2\'B5\'BD\'B6\'D4\'D3\'A6\'B5\'C4\'BA\'AF\'CA\'FD\'D6\'B8\'D5\'EB}\par
00214         {\cf19 return} (*this.*FunctionPointer)(argc, argv, env);   {\cf20 // \'D6\'B4\'D0\'D0\'C4\'DA\'B2\'BF\'BA\'AF\'CA\'FD}\par
00215     \}\par
00216     \par
00217 \par
00218     {\cf20 // \'C6\'E4\'CB\'FB\'B5\'C4\'C3\'FC\'C1\'EE\'D0\'D0\'CA\'E4\'C8\'EB\'B1\'BB\'BD\'E2\'CA\'CD\'CE\'AA\'B3\'CC\'D0\'F2\'B5\'F7\'D3\'C3\'A3\'AC}\par
00219     {\cf20 // shell \'B4\'B4\'BD\'A8\'B2\'A2\'D6\'B4\'D0\'D0\'D5\'E2\'B8\'F6\'B3\'CC\'D0\'F2\'A3\'AC\'B2\'A2\'D7\'F7\'CE\'AA\'D7\'D4\'BC\'BA\'B5\'C4\'D7\'D3\'BD\'F8\'B3\'CC}\par
00220     pid_t pid = getpid(); {\cf20 // \'BB\'F1\'C8\'A1\'B5\'B1\'C7\'B0\'BD\'F8\'B3\'CCid\'A3\'AC\'D3\'C3\'D3\'DA\'B4\'A6\'C0\'ED\'B8\'B8\'BD\'F8\'B3\'CC\'D0\'D0\'CE\'AA}\par
00221     {\cf19 if} ((pid = vfork()) < 0)\par
00222     \{ \par
00223         {\cf20 /* \'B4\'ED\'CE\'F3\'B4\'A6\'C0\'ED */}\par
00224         {\cf19 throw} {\cf22 "Fork Error, \'B4\'ED\'CE\'F3\'D6\'D5\'D6\'B9"};\par
00225     \}\par
00226     {\cf19 else} {\cf19 if} (pid == 0)\par
00227     \{\par
00228         {\cf20 /* \'D7\'D3\'BD\'F8\'B3\'CC */}  \par
00229         setenv({\cf22 "parent"}, console_->shell_path_env, 1);  {\cf20 // \'C9\'E8\'D6\'C3\'B5\'F7\'D3\'C3\'D7\'D3\'BD\'F8\'B3\'CC\'B5\'C4\'B8\'B8\'BD\'F8\'B3\'CC}\par
00230         {\cf18 int} status_code = execvp(argv[0], argv);        {\cf20 // \'D4\'DA\'D7\'D3\'BD\'F8\'B3\'CC\'D6\'AE\'D6\'D0\'D6\'B4\'D0\'D0}\par
00231 \par
00232         {\cf19 if} (status_code == -1)\par
00233         \{\par
00234             {\cf19 throw} {\cf22 "Execvp Error, terminated incorrectly"};\par
00235         \}\par
00236 \par
00237         {\cf19 return} SH_UNDEFINED; {\cf20 // \'CE\'B4\'CA\'B6\'B1\'F0\'B5\'C4\'C3\'FC\'C1\'EE}\par
00238     \}\par
00239     {\cf19 else}\par
00240     \{\par
00241         {\cf20 /* \'B8\'B8\'BD\'F8\'B3\'CC */}\par
00242         console_->child_process_id = pid;   {\cf20 // \'C9\'E8\'D6\'C3\'D7\'D3\'BD\'F8\'B3\'CCpid\'A3\'AC\'D3\'C3\'D3\'DACtrl+Z\'D0\'C5\'BA\'C5\'B4\'A6\'C0\'ED}\par
00243         wait(NULL); {\cf20 // \'B5\'C8\'B4\'FD\'D7\'D3\'BD\'F8\'B3\'CC\'BD\'E1\'CA\'F8\'BA\'F3\'D4\'D9\'BC\'CC\'D0\'F8\'D6\'B4\'D0\'D0\'A3\'AC\'B1\'A3\'D6\'A4\'D6\'B4\'D0\'D0\'CB\'B3\'D0\'F2\'B2\'BB\'BB\'EC\'C2\'D2}\par
00244         console_->child_process_id = -1;\par
00245         {\cf19 return} SH_SUCCESS;\par
00246     \}\par
00247 \par
00248     {\cf19 return} SH_FAILED;\par
00249 \}\par
00250 \par
00251 sh_err_t Executor::execute_cd({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00252 {\cf17 }\{\par
00253     assert(strcmp(argv[0], {\cf22 "cd"})==0 && {\cf22 "unexpected node type"});\par
00254 \par
00255     std::string path;\par
00256     {\cf19 if} (argc == 1)\par
00257     \{\par
00258         {\cf20 // \'C4\'AC\'C8\'CF\'CE\'DE\'B2\'CE\'CA\'FD\'CA\'B1\'CE\'AA\'D6\'F7\'C4\'BF\'C2\'BC}\par
00259         path = console_->home;\par
00260     \}\par
00261     {\cf19 else} {\cf19 if} (argc == 2)\par
00262     \{\par
00263         path = argv[1];\par
00264         \par
00265 {\cf21         #ifdef _DEBUG_}\par
00266         printf({\cf22 "char: %c %d\\n"}, path[0], (path[0] == {\cf23 '~'}));\par
00267 {\cf21         #endif}\par
00268 \par
00269         {\cf19 if} (path[0] == {\cf23 '~'}) {\cf20 // \'B6\'D4\'D3\'DA~\'C4\'BF\'C2\'BC\'D0\'E8\'D2\'AA\'CC\'D8\'CA\'E2\'C5\'D0\'B6\'CF}\par
00270         \{\par
00271             {\cf20 // \'BD\'AB~\'CC\'E6\'BB\'BB\'CE\'AA\'D6\'F7\'C4\'BF\'C2\'BC}\par
00272             path.replace(0, 1, console_->home);\par
00273         \}\par
00274 \par
00275 {\cf21         #ifdef _DEBUG_}\par
00276         printf({\cf22 "Argv: %s\\nHome: %s\\nPath: %s\\n"}, argv[1], console_->home, path.c_str());\par
00277 {\cf21         #endif}\par
00278     \}\par
00279     {\cf19 else}\par
00280     \{\par
00281         {\cf19 return} SH_ARGS; {\cf20 // \'B2\'CE\'CA\'FD\'B4\'ED\'CE\'F3}\par
00282     \}\par
00283 \par
00284     {\cf20 // \'B8\'FC\'B8\'C4\'C4\'BF\'C2\'BC}\par
00285     {\cf18 int} ret = chdir(path.c_str());\par
00286     {\cf19 if} (ret != 0)   {\cf20 // \'B4\'F2\'BF\'AA\'C4\'BF\'C2\'BC\'D2\'EC\'B3\'A3}\par
00287     \{\par
00288         {\cf19 throw} ((std::string){\cf22 "cd: \'CE\'DE\'B7\'A8\'B4\'F2\'BF\'AA\'C2\'B7\'BE\'B6 "} + path);\par
00289     \}\par
00290 \par
00291     {\cf20 // \'D6\'D8\'D0\'C2\'C9\'E8\'D6\'C3\'BF\'D8\'D6\'C6\'CC\'A8\'BB\'B7\'BE\'B3\'D3\'EB\'CF\'B5\'CD\'B3\'BB\'B7\'BE\'B3\'B1\'E4\'C1\'BF}\par
00292     {\cf19 if} (getcwd(console_->current_working_dictionary, BUFFER_SIZE) != {\cf17 nullptr} )\par
00293         setenv({\cf22 "PWD"}, console_->current_working_dictionary, 1);\par
00294     {\cf19 else}\par
00295         {\cf19 throw} {\cf22 "get cwd error"};\par
00296 \par
00297     {\cf19 return} SH_SUCCESS;\par
00298 \}\par
00299 \par
00300 sh_err_t Executor::execute_pwd({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00301 {\cf17 }\{\par
00302     assert(strcmp(argv[0], {\cf22 "pwd"})==0 && {\cf22 "unexpected node type"});\par
00303     display_->message(console_->current_working_dictionary);\par
00304     display_->message({\cf22 "\\n"});\par
00305     {\cf19 return} SH_SUCCESS;\par
00306 \}\par
00307 \par
00308 sh_err_t Executor::execute_time({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00309 {\cf17 }\{\par
00310     assert(strcmp(argv[0], {\cf22 "time"})==0 && {\cf22 "unexpected node type"});\par
00311 \par
00312     {\cf20 // \'CF\'E0\'B5\'B1\'D3\'DAenv\'C3\'FC\'C1\'EE\'A3\'AC\'B4\'D3\'BC\'E6\'C8\'DD\'D0\'D4\'B5\'C4\'BD\'C7\'B6\'C8\'B3\'F6\'B7\'A2\'A3\'AC\'D5\'E2\'C0\'EF\'D1\'A1\'D4\'F1\'B5\'F7\'D3\'C3env\'C3\'FC\'C1\'EE\'D2\'D4\'BC\'E6\'C8\'DDLinux\'D3\'C3\'BB\'A7\'D0\'E8\'C7\'F3\'D2\'D4\'BC\'B0\'BA\'F3\'D0\'F8\'BF\'AA\'B7\'A2}\par
00313     {\cf19 return} execute_date(argc, argv, env);\par
00314 \}\par
00315 \par
00316 sh_err_t Executor::execute_clr({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00317 {\cf17 }\{\par
00318     assert(strcmp(argv[0], {\cf22 "clr"})==0 && {\cf22 "unexpected node type"});\par
00319     \par
00320     {\cf20 // \'CF\'E0\'B5\'B1\'D3\'DAclear\'C3\'FC\'C1\'EE\'A3\'AC\'B4\'D3\'BC\'E6\'C8\'DD\'D0\'D4\'B5\'C4\'BD\'C7\'B6\'C8\'B3\'F6\'B7\'A2\'A3\'AC\'D5\'E2\'C0\'EF\'D1\'A1\'D4\'F1\'B5\'F7\'D3\'C3env\'C3\'FC\'C1\'EE\'D2\'D4\'BC\'E6\'C8\'DDLinux\'D3\'C3\'BB\'A7\'D0\'E8\'C7\'F3\'D2\'D4\'BC\'B0\'BA\'F3\'D0\'F8\'BF\'AA\'B7\'A2}\par
00321     {\cf19 return} execute_clear(argc, argv, env);\par
00322 \}\par
00323 \par
00324 sh_err_t Executor::execute_dir({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00325 {\cf17 }\{\par
00326     assert(strcmp(argv[0], {\cf22 "dir"})==0 && {\cf22 "unexpected node type"});\par
00327     \par
00328     std::string real_path;\par
00329     {\cf19 if} (argc == 1)\par
00330     \{\par
00331         {\cf20 // \'C4\'AC\'C8\'CF\'CE\'DE\'B2\'CE\'CA\'FD\'CA\'B1\'CE\'AA\'B5\'B1\'C7\'B0\'C4\'BF\'C2\'BC}\par
00332         real_path = console_->current_working_dictionary;\par
00333     \}\par
00334     {\cf19 else} {\cf19 if} (argc == 2)\par
00335     \{\par
00336         real_path = argv[1];\par
00337         {\cf19 if} (real_path[0] == {\cf23 '~'}) {\cf20 // \'B6\'D4\'D3\'DA~\'C4\'BF\'C2\'BC\'D0\'E8\'D2\'AA\'CC\'D8\'CA\'E2\'C5\'D0\'B6\'CF}\par
00338         \{\par
00339             {\cf20 // \'BD\'AB~\'CC\'E6\'BB\'BB\'CE\'AA\'D6\'F7\'C4\'BF\'C2\'BC}\par
00340             real_path.replace(0, 1, console_->home);\par
00341         \}\par
00342     \}\par
00343     {\cf19 else}\par
00344     \{\par
00345         {\cf19 return} SH_ARGS; {\cf20 // \'B2\'CE\'CA\'FD\'B4\'ED\'CE\'F3}\par
00346     \}\par
00347     \par
00348     {\cf18 int} ret;                {\cf20 // \'D3\'C3\'D3\'DA\'BD\'D3\'CA\'DC\'B7\'B5\'BB\'D8\'D6\'B5}\par
00349     DIR *direction_pointer; {\cf20 // \'C4\'BF\'C2\'BC\'D6\'B8\'D5\'EB}\par
00350     {\cf19 if} ((direction_pointer = opendir(real_path.c_str())) == NULL)\par
00351     \{\par
00352         {\cf19 throw} ((std::string){\cf22 "dir: \'CE\'DE\'B7\'A8\'B4\'F2\'BF\'AA\'C2\'B7\'BE\'B6 "} + real_path);\par
00353     \}\par
00354 \par
00355     {\cf20 // \'C1\'D9\'CA\'B1\'BD\'AB\'BD\'F8\'B3\'CC\'C4\'BF\'C2\'BC\'B5\'F7\'D5\'FB\'CE\'AA\'D6\'B8\'B6\'A8\'C4\'BF\'C2\'BC}\par
00356     ret = chdir(real_path.c_str());\par
00357     {\cf19 if} (ret != 0)   {\cf20 // \'B4\'F2\'BF\'AA\'C4\'BF\'C2\'BC\'D2\'EC\'B3\'A3}\par
00358     \{\par
00359         {\cf19 throw} ((std::string){\cf22 "dir: \'CE\'DE\'B7\'A8\'B4\'F2\'BF\'AA\'C2\'B7\'BE\'B6 "} + real_path);\par
00360     \}\par
00361 \par
00362     {\cf17 struct }dirent *entry;   {\cf20 // \'C4\'BF\'C2\'BC\'C4\'DA\'C8\'DD}\par
00363     {\cf19 while} ((entry = readdir(direction_pointer)) != NULL)\par
00364     \{\par
00365         {\cf17 struct }stat stat_buffer;    {\cf20 // \'B4\'E6\'B4\'A2stat\'BD\'E1\'B9\'B9}\par
00366         lstat(entry->d_name, &stat_buffer); {\cf20 // \'B8\'F9\'BE\'DD\'CE\'C4\'BC\'FE\'C3\'FB\'BB\'F1\'B5\'C3\'CE\'C4\'BC\'FEstat\'BD\'E1\'B9\'B9}\par
00367 \par
00368         {\cf18 char} buffer[BUFFER_SIZE];\par
00369         {\cf19 if} (S_ISDIR(stat_buffer.st_mode))   {\cf20 // \'BC\'EC\'B2\'E2\'B8\'C3\'CA\'FD\'BE\'DD\'CF\'EE\'CA\'C7\'B7\'F1\'CA\'C7\'D2\'BB\'B8\'F6\'C4\'BF\'C2\'BC}\par
00370         \{\par
00371             {\cf20 // \'CA\'FD\'BE\'DD\'CF\'EE\'CA\'C7\'D2\'BB\'B8\'F6\'C4\'BF\'C2\'BC}\par
00372 \par
00373             {\cf19 if} (strcmp({\cf22 "."}, entry->d_name) == 0 ||\par
00374                 strcmp({\cf22 ".."}, entry->d_name) == 0)\par
00375             \{\par
00376                 {\cf20 // \'C8\'E7\'B9\'FB\'CA\'C7.\'BB\'F2\'D5\'DF..\'C4\'BF\'C2\'BC\'A3\'AC\'D4\'F2\'B2\'BB\'CF\'D4\'CA\'BE}\par
00377                 {\cf19 continue};\par
00378             \}\par
00379 \par
00380             {\cf20 // \'C4\'BF\'C2\'BC\'D3\'C3\'C0\'B6\'C9\'AB\'CF\'D4\'CA\'BE}\par
00381             snprintf(buffer, BUFFER_SIZE, {\cf22 "\\033[34m%s\\033[0m  "}, entry->d_name);\par
00382             {\cf19 if} (console_->redirect_output == {\cf17 false}) \par
00383                 display_->message(buffer);\par
00384             {\cf19 else}\par
00385             \{\par
00386                 display_->message(entry->d_name);\par
00387                 display_->message({\cf22 "  "});\par
00388             \}\par
00389         \}\par
00390         {\cf19 else}\par
00391         \{\par
00392             {\cf20 // \'C6\'D5\'CD\'A8\'CE\'C4\'BC\'FE}\par
00393             {\cf19 switch} (entry->d_type)\par
00394             \{\par
00395                 {\cf19 case} DT_UNKNOWN:    {\cf20 // \'C4\'BF\'C2\'BC\'CE\'C4\'BC\'FE\'CE\'B4\'D6\'AA\'CE\'C4\'BC\'FE\'D3\'C3\'BA\'EC\'C9\'AB}\par
00396                     snprintf(buffer, BUFFER_SIZE, {\cf22 "\\033[31m%s\\033[0m  "}, entry->d_name);\par
00397                     {\cf19 break};\par
00398                 \par
00399                 {\cf19 case} DT_REG:        {\cf20 // \'C4\'BF\'C2\'BC\'CE\'C4\'BC\'FE\'C6\'D5\'CD\'A8\'CE\'C4\'BC\'FE\'D3\'C3\'B0\'D7\'C9\'AB}\par
00400                     {\cf19 if} (access(entry->d_name, X_OK) == 0)    {\cf20 // \'BF\'C9\'D6\'B4\'D0\'D0\'CE\'C4\'BC\'FE\'B3\'FD\'CD\'E2\'A3\'AC\'D3\'C3\'C2\'CC\'C9\'AB}\par
00401                         snprintf(buffer, BUFFER_SIZE, {\cf22 "\\033[32m%s\\033[0m  "}, entry->d_name);\par
00402                     {\cf19 else}\par
00403                         snprintf(buffer, BUFFER_SIZE, {\cf22 "\\033[37m%s\\033[0m  "}, entry->d_name);\par
00404                     {\cf19 break};\par
00405 \par
00406                 {\cf19 default}:            {\cf20 // \'C6\'E4\'CB\'FB\'CE\'C4\'BC\'FE\'D3\'C3\'C7\'E0\'C9\'AB}\par
00407                     snprintf(buffer, BUFFER_SIZE, {\cf22 "\\033[36m%s\\033[0m  "}, entry->d_name);\par
00408                     {\cf19 break};\par
00409             \}\par
00410             {\cf19 if} (console_->redirect_output == {\cf17 false}) \par
00411                 display_->message(buffer);\par
00412             {\cf19 else}\par
00413             \{\par
00414                 display_->message(entry->d_name);\par
00415                 display_->message({\cf22 "  "});\par
00416             \}\par
00417         \}\par
00418     \}\par
00419     display_->message({\cf22 "\\n"});\par
00420 \par
00421     {\cf20 // \'BD\'E1\'CA\'F8\'CA\'B1\'BD\'AB\'C4\'BF\'C2\'BC\'B8\'FC\'B8\'C4\'BB\'D8\'B5\'B1\'C7\'B0\'C4\'BF\'C2\'BC}\par
00422     ret = chdir(console_->current_working_dictionary);\par
00423     {\cf19 if} (ret != 0)   {\cf20 // \'B4\'F2\'BF\'AA\'C4\'BF\'C2\'BC\'D2\'EC\'B3\'A3}\par
00424     \{\par
00425         {\cf19 throw} ((std::string){\cf22 "dir: \'CE\'DE\'B7\'A8\'B4\'F2\'BF\'AA\'C2\'B7\'BE\'B6 "} + real_path);\par
00426     \}\par
00427 \par
00428     ret = closedir(direction_pointer);\par
00429     {\cf19 if} (ret == -1)  {\cf20 // \'B9\'D8\'B1\'D5\'C4\'BF\'C2\'BC\'C1\'F7\'D2\'EC\'B3\'A3}\par
00430     \{\par
00431         {\cf19 throw} {\cf22 "dir: \'B9\'D8\'B1\'D5\'C4\'BF\'C2\'BC\'C1\'F7\'D2\'EC\'B3\'A3"};\par
00432     \}\par
00433 \par
00434     {\cf19 return} SH_SUCCESS;\par
00435 \}\par
00436 \par
00437 sh_err_t Executor::execute_set({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00438 {\cf17 }\{\par
00439     assert(strcmp(argv[0], {\cf22 "set"})==0 && {\cf22 "unexpected node type"});\par
00440     \par
00441     {\cf20 // \'CF\'E0\'B5\'B1\'D3\'DAenv\'C3\'FC\'C1\'EE\'A3\'AC\'B4\'D3\'BC\'E6\'C8\'DD\'D0\'D4\'B5\'C4\'BD\'C7\'B6\'C8\'B3\'F6\'B7\'A2\'A3\'AC\'D5\'E2\'C0\'EF\'D1\'A1\'D4\'F1\'B5\'F7\'D3\'C3env\'C3\'FC\'C1\'EE\'D2\'D4\'BC\'E6\'C8\'DDLinux\'D3\'C3\'BB\'A7\'D0\'E8\'C7\'F3}\par
00442     {\cf19 return} execute_env(argc, argv, env);\par
00443 \}\par
00444 \par
00445 sh_err_t Executor::execute_echo({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00446 {\cf17 }\{\par
00447     assert(strcmp(argv[0], {\cf22 "echo"})==0 && {\cf22 "unexpected node type"});\par
00448 \par
00449     {\cf19 for} ({\cf18 int} i = 1; i < argc; ++i)\par
00450     \{\par
00451         {\cf20 // \'B6\'E0\'B8\'F6\'BF\'D5\'B8\'F1\'BA\'CD\'D6\'C6\'B1\'ED\'B7\'FB\'B1\'BB\'CB\'F5\'BC\'F5\'CE\'AA\'D2\'BB\'B8\'F6\'BF\'D5\'B8\'F1}\par
00452         {\cf19 if} (i > 1)\par
00453             display_->message({\cf22 " "});\par
00454 \par
00455         display_->message(argv[i]);\par
00456     \}\par
00457     display_->message({\cf22 "\\n"});\par
00458 \par
00459     {\cf19 return} SH_SUCCESS;\par
00460 \}\par
00461 \par
00462 sh_err_t Executor::execute_help({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00463 {\cf17 }\{\par
00464     assert(strcmp(argv[0], {\cf22 "help"})==0 && {\cf22 "unexpected node type"});\par
00465 \par
00466     FILE* fp = fopen({\cf22 "README.md"}, {\cf22 "r"});\par
00467     {\cf19 if} (fp == {\cf17 nullptr})\par
00468     \{\par
00469         {\cf19 return} SH_FAILED;\par
00470     \}\par
00471 \par
00472     {\cf18 char} buffer[BUFFER_SIZE*2];\par
00473     {\cf19 if} (fgets(buffer, BUFFER_SIZE, fp) == {\cf17 nullptr})\par
00474         {\cf19 return} SH_FAILED;    {\cf20 // \'BA\'F6\'C2\'D4\'CA\'D7\'D0\'D0}\par
00475 \par
00476     {\cf18 size_t} size = fread(buffer, 1, BUFFER_SIZE*2, fp);\par
00477     {\cf19 if} (size < 0)\par
00478     \{\par
00479         {\cf19 return} SH_FAILED;\par
00480     \}\par
00481 \par
00482     {\cf19 if} (fclose(fp) == -1)\par
00483     \{\par
00484         {\cf19 throw} std::exception();\par
00485     \}\par
00486 \par
00487     display_->message(buffer);\par
00488     display_->message({\cf22 "\\n"});\par
00489 \par
00490     {\cf19 return} SH_SUCCESS;\par
00491 \}\par
00492 \par
00493 sh_err_t Executor::execute_exit({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00494 {\cf17 }\{\par
00495     assert(strcmp(argv[0], {\cf22 "exit"})==0 && {\cf22 "unexpected node type"});\par
00496     {\cf19 return} SH_EXIT;\par
00497 \}\par
00498 \par
00499 sh_err_t Executor::execute_date({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00500 {\cf17 }\{\par
00501     {\cf20 // assert(strcmp(argv[0], "date")==0 && "unexpected node type");}\par
00502 \par
00503     {\cf20 //\'BB\'F1\'C8\'A1\'B5\'B1\'C7\'B0\'CA\'B1\'BC\'E4}\par
00504     time_t t = time(NULL);\par
00505     {\cf17 struct }tm *ptr = localtime(&t);\par
00506 \par
00507     {\cf20 //\'C9\'FA\'B3\'C9\'B7\'B5\'BB\'D8\'D0\'C5\'CF\'A2}\par
00508     {\cf20 // char weekday[16], month[16];}\par
00509     {\cf18 char} date[256];\par
00510     {\cf20 // strftime(weekday, 16, "%A", ptr);}\par
00511     {\cf20 // strftime(month, 16, "%B", ptr);}\par
00512     strftime(date, 256, {\cf22 "%c"}, ptr);\par
00513 \par
00514     {\cf20 // char buffer[BUFFER_SIZE];}\par
00515     {\cf20 // snprintf(buffer, BUFFER_SIZE, "%s %s %s\\n", weekday, month, date);}\par
00516 \par
00517     {\cf20 // display_->message(buffer);}\par
00518     display_->message(date);\par
00519     display_->message({\cf22 "\\n"});\par
00520 \par
00521     {\cf19 return} SH_SUCCESS;\par
00522 \}\par
00523 \par
00524 sh_err_t Executor::execute_clear({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00525 {\cf17 }\{\par
00526     display_->message({\cf22 "\\x1b[H\\x1b[2J"});    {\cf20 // \'CA\'E4\'B3\'F6\'C7\'E5\'C6\'C1\'BF\'D8\'D6\'C6 \\x1b[H\\x1b[2J}\par
00527 \par
00528     {\cf19 return} SH_SUCCESS;\par
00529 \}\par
00530 \par
00531 sh_err_t Executor::execute_env({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00532 {\cf17 }\{\par
00533     {\cf17 extern} {\cf18 char} **environ; {\cf20 //env variables}\par
00534     {\cf18 char} ***update_env = {\cf17 const_cast<}{\cf18 char} ***{\cf17 >}(&env);\par
00535     *update_env = environ;\par
00536 \par
00537     {\cf19 while}(*env)\par
00538     \{\par
00539         {\cf18 char} buffer[BUFFER_SIZE];\par
00540         snprintf(buffer, BUFFER_SIZE, {\cf22 "%s\\n"}, *env++);\par
00541         display_->message(buffer);\par
00542     \}\par
00543 \par
00544     {\cf19 return} SH_SUCCESS;\par
00545 \}\par
00546 \par
00547 sh_err_t Executor::execute_who({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00548 {\cf17 }\{\par
00549     assert(strcmp(argv[0], {\cf22 "who"})==0 && {\cf22 "unexpected node type"});\par
00550     display_->message(console_->user_name);\par
00551     display_->message({\cf22 "\\n"});\par
00552     {\cf19 return} SH_SUCCESS;\par
00553 \}\par
00554 \par
00555 sh_err_t Executor::execute_mkdir({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00556 {\cf17 }\{\par
00557     assert(strcmp(argv[0], {\cf22 "mkdir"})==0 && {\cf22 "unexpected node type"});\par
00558     \par
00559     {\cf17 const} {\cf18 char} * path = argv[1];\par
00560     {\cf19 if} (mkdir(path, S_IRWXU) == 0)\par
00561     \{\par
00562         {\cf19 return} SH_SUCCESS;\par
00563     \}\par
00564     {\cf19 else}\par
00565     \{\par
00566         {\cf19 return} SH_FAILED;\par
00567     \}\par
00568 \par
00569 \}\par
00570 \par
00571 sh_err_t Executor::execute_rmdir({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00572 {\cf17 }\{\par
00573     assert(strcmp(argv[0], {\cf22 "rmdir"})==0 && {\cf22 "unexpected node type"});\par
00574 \par
00575     {\cf19 if} (rmdir(argv[1]) == 0)\par
00576     \{\par
00577         {\cf19 return} SH_SUCCESS;\par
00578     \}\par
00579     {\cf19 else}\par
00580     \{\par
00581         {\cf19 return} SH_FAILED;\par
00582     \}\par
00583 \}\par
00584 \par
00585 sh_err_t Executor::execute_bg({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00586 {\cf17 }\{\par
00587     assert(strcmp(argv[0], {\cf22 "bg"})==0 && {\cf22 "unexpected node type"});\par
00588 \par
00589     {\cf19 if} (argc == 1)\par
00590         {\cf19 return} SH_SUCCESS;\par
00591     \par
00592     {\cf18 unsigned} {\cf18 int} job_id = String_to_Number<unsigned int>(argv[1]);\par
00593     {\cf18 int} {\cf18 id} = console_->process_manager->BackGround(job_id);\par
00594     {\cf19 if} ({\cf18 id} == 0)\par
00595     \{\par
00596         {\cf18 char} buffer[BUFFER_SIZE];\par
00597         snprintf(buffer, BUFFER_SIZE, {\cf22 "bg: job %u already in background\\n"}, job_id);\par
00598         display_->message(buffer);\par
00599     \}\par
00600         \par
00601     {\cf19 if} ({\cf18 id} == -1)\par
00602     \{\par
00603         {\cf18 char} buffer[BUFFER_SIZE];\par
00604         snprintf(buffer, BUFFER_SIZE, {\cf22 "bg: %u : no such job\\n"}, job_id);\par
00605         display_->message(buffer);\par
00606     \}\par
00607 \par
00608     {\cf19 return} SH_SUCCESS;\par
00609 \}\par
00610 \par
00611 sh_err_t Executor::execute_fg({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00612 {\cf17 }\{\par
00613     assert(strcmp(argv[0], {\cf22 "fg"})==0 && {\cf22 "unexpected node type"});\par
00614 \par
00615     {\cf19 if} (argc == 1)\par
00616         {\cf19 return} SH_SUCCESS;\par
00617     \par
00618     {\cf18 unsigned} {\cf18 int} job_id = String_to_Number<unsigned int>(argv[1]);\par
00619     {\cf18 int} {\cf18 id} = console_->process_manager->ForeGround(job_id);\par
00620     {\cf19 if} ({\cf18 id} == -1)\par
00621     \{\par
00622         {\cf18 char} buffer[BUFFER_SIZE];\par
00623         snprintf(buffer, BUFFER_SIZE, {\cf22 "bg: %u : no such job\\n"}, job_id);\par
00624         display_->message(buffer);\par
00625     \}\par
00626 \par
00627     {\cf19 return} SH_SUCCESS;\par
00628 \}\par
00629 \par
00630 sh_err_t Executor::execute_jobs({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00631 {\cf17 }\{\par
00632     assert(strcmp(argv[0], {\cf22 "jobs"})==0 && {\cf22 "unexpected node type"});\par
00633 \par
00634     console_->ConsoleJobList();\par
00635 \par
00636     {\cf19 return} SH_SUCCESS;\par
00637 \}\par
00638 \par
00639 sh_err_t Executor::execute_exec({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00640 {\cf17 }\{\par
00641     assert(strcmp(argv[0], {\cf22 "exec"})==0 && {\cf22 "unexpected node type"});\par
00642 \par
00643     {\cf20 // \'D6\'BB\'D3\'D0\'D2\'BB\'B8\'F6\'B2\'CE\'CA\'FD\'CA\'B1\'B2\'BB\'D7\'F6\'B4\'A6\'C0\'ED}\par
00644     {\cf19 if} (argc == 1)\par
00645         {\cf19 return} SH_SUCCESS;\par
00646 \par
00647     {\cf18 int} status_code = execvp(argv[1], argv+1);        {\cf20 // \'D4\'DA\'D7\'D3\'BD\'F8\'B3\'CC\'D6\'AE\'D6\'D0\'D6\'B4\'D0\'D0}\par
00648 \par
00649     {\cf19 if} (status_code == -1)\par
00650     \{\par
00651         {\cf19 throw} {\cf22 "Execvp Error, terminated incorrectly"};\par
00652     \}\par
00653 \par
00654     {\cf19 return} SH_UNDEFINED; {\cf20 // \'CE\'B4\'CA\'B6\'B1\'F0\'B5\'C4\'C3\'FC\'C1\'EE}\par
00655 \}\par
00656 \par
00657 sh_err_t Executor::execute_test({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00658 {\cf17 }\{\par
00659     assert(strcmp(argv[0], {\cf22 "test"})==0 && {\cf22 "unexpected node type"});\par
00660 \par
00661     {\cf18 bool} ret = {\cf17 false};\par
00662     {\cf19 if} (argc == 1)  {\cf20 // \'BF\'D5\'D7\'D6\'B7\'FB\'B4\'AE\'A3\'ACfalse}\par
00663     \{\par
00664         ret = {\cf17 false};\par
00665     \} \par
00666     {\cf19 else} {\cf19 if} (argc == 2) {\cf20 // \'B5\'A5\'C4\'BF\'D4\'CB\'CB\'E3}\par
00667     \{\par
00668         {\cf19 if} (strcmp(argv[1], {\cf22 "!"}) == 0 || strcmp(argv[1], {\cf22 "-z"}) == 0)\par
00669             ret = {\cf17 true};\par
00670         {\cf19 else}\par
00671             ret = {\cf17 false};\par
00672     \}\par
00673     {\cf19 else} \par
00674     \{\par
00675         {\cf19 if} (strcmp(argv[1], {\cf22 "!"}))   {\cf20 // \'B5\'DA\'B6\'FE\'B8\'F6\'B2\'CE\'CA\'FD\'B2\'BB\'CA\'C7\'A3\'A1}\par
00676         \{\par
00677             {\cf19 if} (argc == 3 || argc == 4) {\cf20 // \'CB\'AB\'C4\'BF\'D4\'CB\'CB\'E3}\par
00678             \{\par
00679                 {\cf20 // \'CE\'C4\'BC\'FE\'B2\'E2\'CA\'D4 \'D3\'EB \'B2\'BF\'B7\'D6\'D7\'D6\'B7\'FB\'B4\'AE\'B2\'E2\'CA\'D4}\par
00680                 ret = Executor::test_file_state(argc, argv)\par
00681                     | Executor::test_number_compare(argc, argv)\par
00682                     | Executor::test_string_compare(argc, argv);\par
00683             \}\par
00684             {\cf19 else}\par
00685             \{\par
00686                 {\cf19 return} SH_ARGS;\par
00687             \}\par
00688         \}\par
00689     \}\par
00690 \par
00691     {\cf19 if} (console_->GetOutputRedirect() == {\cf17 false}) {\cf20 // \'C8\'E7\'B9\'FB\'CA\'C7\'D4\'DA\'D6\'D5\'B6\'CB\'CF\'D4\'CA\'BE\'BE\'CD\'B2\'FA\'C9\'FA\'D5\'FD\'CE\'F3\'CC\'E1\'CA\'BE}\par
00692     \{\par
00693         {\cf19 if} (ret)\par
00694             display_->message({\cf22 "true\\n"});\par
00695         {\cf19 else}\par
00696             display_->message({\cf22 "false\\n"});\par
00697     \}\par
00698 \par
00699     {\cf19 return} SH_SUCCESS;\par
00700 \}\par
00701 \par
00702 sh_err_t Executor::execute_umask({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00703 {\cf17 }\{\par
00704     assert(strcmp(argv[0], {\cf22 "umask"})==0 && {\cf22 "unexpected node type"});\par
00705 \par
00706     {\cf19 if} (argc == 1)\par
00707     \{\par
00708         {\cf20 // \'C3\'BB\'D3\'D0\'B2\'CE\'CA\'FD\'A3\'AC\'CF\'D4\'CA\'BE\'B5\'B1\'C7\'B0\'D1\'DA\'C2\'EB}\par
00709         {\cf18 char} buffer[16];\par
00710         snprintf(buffer, 16, {\cf22 "%04o\\n"}, console_->umask_);   {\cf20 // \'D2\'D4\'B0\'CB\'BD\'F8\'D6\'C6\'CF\'D4\'CA\'BE\'A3\'AC0\'B2\'B9\'C6\'EB}\par
00711         display_->message(buffer);\par
00712     \}\par
00713     {\cf19 else} {\cf19 if} (argc == 2) {\cf20 // \'D3\'D0\'D2\'BB\'B8\'F6\'CA\'E4\'C8\'EB\'B5\'C4\'B2\'CE\'CA\'FD}\par
00714     \{\par
00715         {\cf20 // \'CA\'B9\'D3\'C3\'BA\'AF\'CA\'FD\'C4\'A3\'B0\'E5\'CA\'B5\'CF\'D6\'BD\'F8\'D6\'C6\'D7\'AA\'BB\'BB}\par
00716         console_->umask_ = String_to_Number<mode_t>(argv[1]);\par
00717         \par
00718         {\cf19 if} (argv[1][0] == {\cf23 '0'})\par
00719         \{\par
00720             {\cf19 if} (strlen(argv[1]) >= 2 && argv[1][1] == {\cf23 'x'})  {\cf20 // \'CA\'AE\'C1\'F9\'BD\'F8\'D6\'C6}\par
00721                 console_->umask_ = Hexadecimal_to_Decimal(console_->umask_);\par
00722             {\cf19 else}                                            {\cf20 // \'B0\'CB\'BD\'F8\'D6\'C6}\par
00723                 console_->umask_ = Octal_to_Decimal(console_->umask_);\par
00724         \}\par
00725         \par
00726 {\cf21         #ifdef _DEBUG_}\par
00727         printf({\cf22 "mask: %04u %04o\\n"}, console_->umask_, console_->umask_);\par
00728 {\cf21         #endif}\par
00729         umask(console_->umask_);\par
00730     \}\par
00731     {\cf19 else}\par
00732     \{\par
00733         {\cf19 return} SH_ARGS; {\cf20 // \'B2\'CE\'CA\'FD\'B4\'ED\'CE\'F3}\par
00734     \}\par
00735 \par
00736     {\cf19 return} SH_SUCCESS;\par
00737 \}\par
00738 \par
00739 sh_err_t Executor::execute_myshell({\cf17 const} {\cf18 int} argc, {\cf18 char} * {\cf17 const} argv[], {\cf18 char} * {\cf17 const} env[]){\cf17  const}\par
00740 {\cf17 }\{\par
00741     assert(strcmp(argv[0], {\cf22 "myshell"})==0 && {\cf22 "unexpected node type"});\par
00742 \par
00743     std::vector<std::string> FileList;\par
00744     {\cf19 if} (argc == 1)\par
00745     \{\par
00746         {\cf20 /*\'C8\'E7\'B9\'FBshell \'B1\'BB\'B5\'F7\'D3\'C3\'CA\'B1\'C3\'BB\'D3\'D0\'CA\'B9\'D3\'C3\'B2\'CE\'CA\'FD\'A3\'AC}\par
00747 {\cf20         \'CB\'FC\'BB\'E1\'D4\'DA\'C6\'C1\'C4\'BB\'C9\'CF\'CF\'D4\'CA\'BE\'CC\'E1\'CA\'BE\'B7\'FB\'C7\'EB\'C7\'F3\'D3\'C3\'BB\'A7\'CA\'E4\'C8\'EB*/}\par
00748         {\cf19 while} (1)   {\cf20 // \'D1\'AD\'BB\'B7\'D6\'B1\'B5\'BD\'D3\'C3\'BB\'A7\'D3\'D0\'CA\'E4\'C8\'EB}\par
00749         \{\par
00750             display_->prompt();\par
00751 \par
00752             {\cf18 int} len;\par
00753             {\cf18 char} input[BUFFER_SIZE];\par
00754             len = display_->InputCommand(input, BUFFER_SIZE);\par
00755             \par
00756             {\cf19 if} (len == 1 || len < 0)\par
00757                 {\cf19 continue};   {\cf20 // \'B7\'C7\'D3\'D0\'D0\'A7\'CA\'E4\'C8\'EB}\par
00758             {\cf19 if} (len == 0)\par
00759                 {\cf19 return} SH_EXIT; {\cf20 // EOF}\par
00760 \par
00761 {\cf21             #ifdef _DEBUG_}\par
00762             printf({\cf22 "len: %d\\n"}, len);\par
00763 {\cf21             #endif}\par
00764             input[len-1] = {\cf23 '\\0'}; {\cf20 // \'C8\'A5\'B5\'F4\'C4\'A9\'CE\'B2\'B5\'C4\\n}\par
00765 \par
00766             {\cf18 int}& argc_ = {\cf17 const_cast<}{\cf18 int}&{\cf17 >}(argc);        {\cf20 // \'D2\'FD\'D3\'C3}\par
00767             {\cf20 // char **argv_ = const_cast<char **>(argv);   // \'D6\'B8\'D5\'EB}\par
00768 \par
00769             std::istringstream line(input); {\cf20 // \'D7\'D6\'B7\'FB\'B4\'AE\'C1\'F7}\par
00770             std::string word;               {\cf20 // \'B7\'D6\'B8\'EE\'B3\'F6\'B5\'C4\'D7\'D6\'B7\'FB\'B4\'AE}\par
00771 \par
00772             {\cf19 while} (std::getline(line, word, {\cf23 ' '}))\par
00773             \{\par
00774                 word = String_Trim(word);   {\cf20 // \'B2\'C3\'BC\'F4}\par
00775                 {\cf19 if} (word == {\cf22 ""})\par
00776                     {\cf19 continue};\par
00777                 \par
00778                 ++argc_;\par
00779                 FileList.emplace_back(word);  {\cf20 // \'D0\'E8\'D2\'AA\'C9\'EE\'BF\'BD\'B1\'B4}\par
00780             \}\par
00781 \par
00782             {\cf19 if} (argc == 1)\par
00783                 {\cf19 continue};   {\cf20 // \'CE\'B4\'C4\'DC\'B6\'C1\'B5\'BD\'D3\'D0\'D0\'A7\'CA\'E4\'C8\'EB}\par
00784 \par
00785 {\cf21             #ifdef _DEBUG_}\par
00786             Argument_Display(argc, argv);   {\cf20 // \'B5\'F7\'CA\'D4}\par
00787 {\cf21             #endif}\par
00788 \par
00789             {\cf19 break};\par
00790         \}\par
00791     \}\par
00792     {\cf19 else}\par
00793     \{\par
00794         {\cf19 for} ({\cf18 int} i = 1; i < argc; ++i) {\cf20 // \'CB\'B3\'D0\'F2\'D6\'B4\'D0\'D0}\par
00795             FileList.push_back(argv[i]);    {\cf20 // \'BD\'AB\'B2\'CE\'CA\'FD\'BC\'D3\'C8\'EB\'CF\'F2\'C1\'BF\'C1\'D0\'B1\'ED}\par
00796     \}\par
00797 \par
00798     assert(argc > 1);   {\cf20 // \'C5\'D0\'B6\'CF}\par
00799 \par
00800     {\cf18 int} input_fd = console_->input_file_descriptor; {\cf20 // \'B4\'E6\'B4\'A2\'B5\'B1\'C7\'B0\'BF\'D8\'D6\'C6\'CC\'A8\'B5\'C4\'CA\'E4\'C8\'EBfd}\par
00801     {\cf19 for} (std::string File : FileList)\par
00802     \{\par
00803         {\cf19 try}\par
00804         \{\par
00805             {\cf18 int} fd = open(File.c_str(), O_RDONLY);   {\cf20 // \'B4\'F2\'BF\'AA\'CE\'C4\'BC\'FE}\par
00806             {\cf19 if} (fd < 0) {\cf20 // \'B4\'F2\'BF\'AA\'B4\'ED\'CE\'F3\'B4\'A6\'C0\'ED}\par
00807             \{\par
00808                 {\cf19 throw} std::exception();\par
00809             \}\par
00810 \par
00811 {\cf21             #ifdef _DEBUG_}\par
00812             fprintf(stdout, {\cf22 "FD: %d Input: %d Output: %d\\n"}, fd, console_->input_file_descriptor, console_->output_file_descriptor);\par
00813 {\cf21             #endif}\par
00814 \par
00815             console_->input_file_descriptor = fd;   {\cf20 // \'B8\'FC\'B8\'C4\'CA\'E4\'C8\'EB}\par
00816             \par
00817             {\cf20 // \'D6\'B4\'D0\'D0\'D1\'AD\'BB\'B7}\par
00818             SHELL::shell_loop(console_, display_, {\cf17 const_cast<}Executor *{\cf17 >}({\cf17 this}), {\cf17 const_cast<}{\cf18 char} **{\cf17 >}(env));\par
00819 \par
00820             {\cf18 int} state_code = close(fd); {\cf20 // \'B9\'D8\'B1\'D5\'CE\'C4\'BC\'FE}\par
00821             {\cf19 if} (state_code != 0)    {\cf20 // \'B9\'D8\'B1\'D5\'B4\'ED\'CE\'F3\'B4\'A6\'C0\'ED}\par
00822             \{\par
00823                 {\cf19 throw} std::exception();\par
00824             \}\par
00825         \}\par
00826         {\cf19 catch}(...)\par
00827         \{\par
00828             puts({\cf22 "every thing"});\par
00829             std::string msg = {\cf22 "\\e[1;31m[ERROR]\\e[0m"};\par
00830             msg = msg + {\cf22 "myshell"} + {\cf22 ": ("} + File + {\cf22 ") "} + strerror(errno) + {\cf22 "\\n"};\par
00831             display_->message(msg.c_str());\par
00832         \}\par
00833         \par
00834     \}\par
00835 \par
00836     console_->input_file_descriptor = input_fd; {\cf20 // \'BB\'D6\'B8\'B4\'BF\'D8\'D6\'C6\'CC\'A8\'B5\'C4input fd}\par
00837 \par
00838     {\cf19 return} SH_SUCCESS;\par
00839 \}\par
00840 \par
00841 {\cf17 static} {\cf17 inline} {\cf18 bool} test_tty({\cf17 const} {\cf18 char} * file_name)\par
00842 \{\par
00843     {\cf19 try}\par
00844     \{\par
00845         {\cf18 int} fd = open(file_name, S_IREAD);  {\cf20 // \'B4\'F2\'BF\'AA\'CE\'C4\'BC\'FE\'BB\'F1\'C8\'A1\'CE\'C4\'BC\'FE\'C3\'E8\'CA\'F6\'B7\'FB}\par
00846         {\cf18 bool} tty = isatty(fd);              {\cf20 // \'C5\'D0\'B6\'CF\'CA\'C7\'B7\'F1\'CE\'AA\'D6\'D5\'B6\'CB}\par
00847         close(fd);                          {\cf20 // \'B9\'D8\'B1\'D5\'CE\'C4\'BC\'FE}\par
00848         {\cf19 return} tty;\par
00849     \}\par
00850     {\cf19 catch}(...)\par
00851     \{\par
00852         {\cf19 return} {\cf17 false};                       {\cf20 // \'C8\'E7\'B9\'FB\'D3\'D0\'C8\'CE\'BA\'CE\'D6\'D0\'B6\'CF\'D4\'F2\'B7\'B5\'BB\'D8false}\par
00853     \}\par
00854 \}\par
00855 \par
00856 {\cf18 bool} Executor::test_file_state({\cf17 const} {\cf18 int} argc, {\cf17 const} {\cf18 char} * {\cf17 const} argv[])\par
00857 \{\par
00858     assert(argc == 3 || argc == 4);\par
00859 \par
00860     {\cf19 if} (argc == 3)\par
00861     \{\par
00862         {\cf17 struct }stat file_stat;\par
00863 \par
00864         {\cf19 if} (lstat(argv[2], &file_stat) < 0) {\cf20 // \'CE\'C4\'BC\'FE\'B2\'BB\'B4\'E6\'D4\'DA}\par
00865         \{\par
00866             {\cf19 return} {\cf17 false};   {\cf20 // \'B2\'BB\'B4\'E6\'D4\'DA\'D2\'BB\'B6\'A8\'CA\'C7false}\par
00867         \}\par
00868 \par
00869         {\cf20 // \'B6\'D4\'CE\'C4\'BC\'FE\'B2\'E2\'CA\'D4\'B2\'CE\'CA\'FD\'BD\'F8\'D0\'D0\'C5\'D0\'B6\'CF}\par
00870         {\cf19 switch} (String_Hash(argv[1]))   {\cf20 // \'CE\'AA\'C1\'CB\'D0\'CE\'CA\'BD\'C9\'CF\'B5\'C4\'D3\'C5\'D1\'C5\'A3\'AC\'CA\'B9\'D3\'C3switch\'D3\'EF\'BE\'E4}\par
00871         \{\par
00872             {\cf20 /* \'B4\'E6\'D4\'DA\'D0\'D4\'C5\'D0\'B6\'CF */}\par
00873             {\cf19 case} String_Hash({\cf22 "-e"}):  {\cf20 // \'B4\'E6\'D4\'DA\'C5\'D0\'B6\'CF}\par
00874                 {\cf19 return} {\cf17 true};\par
00875             \par
00876             {\cf20 /* \'CE\'C4\'BC\'FE\'C0\'E0\'D0\'CD\'C5\'D0\'B6\'CF */}\par
00877             {\cf19 case} String_Hash({\cf22 "-f"}):  {\cf20 // \'C6\'D5\'CD\'A8\'CE\'C4\'BC\'FE}\par
00878                 {\cf19 return} S_ISREG(file_stat.st_mode);\par
00879             \par
00880             {\cf19 case} String_Hash({\cf22 "-d"}):  {\cf20 // \'C4\'BF\'C2\'BC\'CE\'C4\'BC\'FE}\par
00881                 {\cf19 return} S_ISDIR(file_stat.st_mode);\par
00882             \par
00883             {\cf19 case} String_Hash({\cf22 "-c"}):  {\cf20 // \'D7\'D6\'B7\'FB\'CC\'D8\'CA\'E2\'CE\'C4\'BC\'FE}\par
00884                 {\cf19 return} S_ISCHR(file_stat.st_mode);\par
00885             \par
00886             {\cf19 case} String_Hash({\cf22 "-b"}):  {\cf20 // \'BF\'E9\'CC\'D8\'CA\'E2\'CE\'C4\'BC\'FE}\par
00887                 {\cf19 return} S_ISBLK(file_stat.st_mode);\par
00888             \par
00889             {\cf19 case} String_Hash({\cf22 "-p"}):  {\cf20 // \'B9\'DC\'B5\'C0\'CE\'C4\'BC\'FE}\par
00890                 {\cf19 return} S_ISFIFO(file_stat.st_mode);\par
00891             \par
00892             {\cf19 case} String_Hash({\cf22 "-L"}):  {\cf20 // \'B7\'FB\'BA\'C5\'C1\'B4\'BD\'D3\'CE\'C4\'BC\'FE}\par
00893                 {\cf19 return} S_ISLNK(file_stat.st_mode);\par
00894             \par
00895             {\cf19 case} String_Hash({\cf22 "-S"}):  {\cf20 // \'CC\'D7\'BD\'D3\'D7\'D6\'CE\'C4\'BC\'FE}\par
00896                 {\cf19 return} S_ISSOCK(file_stat.st_mode);\par
00897             \par
00898             {\cf20 /* \'CE\'C4\'BC\'FE\'C8\'A8\'CF\'DE\'C5\'D0\'B6\'CF */}\par
00899             {\cf19 case} String_Hash({\cf22 "-r"}):  {\cf20 // \'D6\'BB\'B6\'C1\'CE\'C4\'BC\'FE}\par
00900                 {\cf19 return} access(argv[1], R_OK);\par
00901             \par
00902             {\cf19 case} String_Hash({\cf22 "-w"}):  {\cf20 // \'BF\'C9\'D0\'B4\'CE\'C4\'BC\'FE}\par
00903                 {\cf19 return} access(argv[1], W_OK);\par
00904             \par
00905             {\cf19 case} String_Hash({\cf22 "-x"}):  {\cf20 // \'BF\'C9\'D6\'B4\'D0\'D0\'CE\'C4\'BC\'FE}\par
00906                 {\cf19 return} access(argv[1], X_OK);\par
00907 \par
00908             {\cf19 case} String_Hash({\cf22 "-O"}):  {\cf20 // \'CB\'F9\'D3\'D0\'D5\'DF\'CE\'C4\'BC\'FE}\par
00909                 {\cf19 return} file_stat.st_uid == getuid();\par
00910             \par
00911             {\cf19 case} String_Hash({\cf22 "-G"}):  {\cf20 // \'D7\'E9 \'CE\'C4\'BC\'FE}\par
00912                 {\cf19 return} file_stat.st_gid == getgid();\par
00913             \par
00914             {\cf20 /* \'CE\'C4\'BC\'FE\'CA\'F4\'D0\'D4\'C5\'D0\'B6\'CF */}\par
00915             {\cf19 case} String_Hash({\cf22 "-u"}):  {\cf20 // \'D3\'C3\'BB\'A7\'CE\'BB\'CA\'F4\'D0\'D4SUID}\par
00916                 {\cf19 return} S_ISUID & file_stat.st_mode;\par
00917             \par
00918             {\cf19 case} String_Hash({\cf22 "-g"}):  {\cf20 // \'D7\'E9\'CE\'BB\'CA\'F4\'D0\'D4GUID}\par
00919                 {\cf19 return} S_ISGID & file_stat.st_mode;\par
00920             \par
00921             {\cf19 case} String_Hash({\cf22 "-k"}):  {\cf20 // Sticky bit\'CA\'F4\'D0\'D4}\par
00922                 {\cf19 return} S_ISVTX & file_stat.st_mode;\par
00923             \par
00924             {\cf19 case} String_Hash({\cf22 "-s"}):  {\cf20 // \'CE\'C4\'BC\'FE\'B3\'A4\'B6\'C8\'B7\'C70}\par
00925                 {\cf19 return} file_stat.st_size > 0;\par
00926             \par
00927             {\cf19 case} String_Hash({\cf22 "-t"}):  {\cf20 // \'CE\'C4\'BC\'FE\'C3\'E8\'CA\'F6\'B7\'FB\'C1\'AA\'CF\'B5\'D6\'D5\'B6\'CB}\par
00928                 {\cf19 return} test_tty(argv[2]);\par
00929             \par
00930             {\cf20 /* \'C6\'E4\'CB\'FB\'C7\'E9\'BF\'F6\'B7\'B5\'BB\'D8\'B4\'ED\'CE\'F3 */}\par
00931             {\cf19 default}:\par
00932                 {\cf19 return} {\cf17 false};\par
00933         \}\par
00934     \}\par
00935     {\cf19 else}\par
00936     \{\par
00937         {\cf17 struct }stat file_stat1, file_stat2;\par
00938 \par
00939         {\cf19 if} (lstat(argv[1], &file_stat1) < 0) {\cf20 // \'CE\'C4\'BC\'FE\'B2\'BB\'B4\'E6\'D4\'DA}\par
00940         \{\par
00941             {\cf19 return} {\cf17 false};   {\cf20 // \'B2\'BB\'B4\'E6\'D4\'DA\'D2\'BB\'B6\'A8\'CA\'C7false}\par
00942         \}\par
00943         {\cf19 if} (lstat(argv[3], &file_stat2) < 0) {\cf20 // \'CE\'C4\'BC\'FE\'B2\'BB\'B4\'E6\'D4\'DA}\par
00944         \{\par
00945             {\cf19 return} {\cf17 false};   {\cf20 // \'B2\'BB\'B4\'E6\'D4\'DA\'D2\'BB\'B6\'A8\'CA\'C7false}\par
00946         \}\par
00947 \par
00948         {\cf20 // \'B6\'D4\'CE\'C4\'BC\'FE\'B2\'E2\'CA\'D4\'B2\'CE\'CA\'FD\'BD\'F8\'D0\'D0\'C5\'D0\'B6\'CF}\par
00949         {\cf19 switch} (String_Hash(argv[2]))   {\cf20 // \'CE\'AA\'C1\'CB\'D0\'CE\'CA\'BD\'C9\'CF\'B5\'C4\'D3\'C5\'D1\'C5\'A3\'AC\'CA\'B9\'D3\'C3switch\'D3\'EF\'BE\'E4}\par
00950         \{\par
00951             {\cf19 case} String_Hash({\cf22 "-nt"}):    {\cf20 // \'C5\'D0\'B6\'CFfile1\'CA\'C7\'B7\'F1\'B1\'C8file2\'D0\'C2}\par
00952                 {\cf19 return} test_timespec_newer(file_stat1.st_mtim, file_stat2.st_mtim);\par
00953             \par
00954             {\cf19 case} String_Hash({\cf22 "-ot"}):    {\cf20 // \'C5\'D0\'B6\'CFfile1\'CA\'C7\'B7\'F1\'B1\'C8file2\'BE\'C9}\par
00955                 {\cf19 return} test_timespec_older(file_stat1.st_mtim, file_stat2.st_mtim);\par
00956             \par
00957             {\cf19 case} String_Hash({\cf22 "-ef"}):    {\cf20 // \'C5\'D0\'B6\'CFfile1\'D3\'EBfile2\'CA\'C7\'B7\'F1\'CE\'AA\'CD\'AC\'D2\'BB\'B8\'F6\'CE\'C4\'BC\'FE}\par
00958                 {\cf19 return} file_stat1.st_ino == file_stat2.st_ino;\par
00959             \par
00960             {\cf19 default}:                    {\cf20 /* \'C6\'E4\'CB\'FB\'C7\'E9\'BF\'F6\'B7\'B5\'BB\'D8\'B4\'ED\'CE\'F3 */}\par
00961                 {\cf19 return} {\cf17 false};\par
00962         \}\par
00963     \}\par
00964 \}\par
00965 \par
00966 {\cf18 bool} Executor::test_number_compare({\cf17 const} {\cf18 int} argc, {\cf17 const} {\cf18 char} * {\cf17 const} argv[])\par
00967 \{\par
00968     {\cf19 if} (argc != 4)\par
00969         {\cf19 return} {\cf17 false};\par
00970 \par
00971     \par
00972     {\cf18 int} number1 = String_to_Number<int>(argv[1]);\par
00973     {\cf18 int} number2 = String_to_Number<int>(argv[2]);\par
00974 \par
00975     {\cf20 // \'B6\'D4\'D5\'FB\'CA\'FD\'B2\'E2\'CA\'D4\'B2\'CE\'CA\'FD\'BD\'F8\'D0\'D0\'C5\'D0\'B6\'CF}\par
00976     {\cf19 switch} (String_Hash(argv[2]))   {\cf20 // \'CE\'AA\'C1\'CB\'D0\'CE\'CA\'BD\'C9\'CF\'B5\'C4\'D3\'C5\'D1\'C5\'A3\'AC\'CA\'B9\'D3\'C3switch\'D3\'EF\'BE\'E4}\par
00977     \{\par
00978         {\cf19 case} String_Hash({\cf22 "-eq"}):\par
00979         {\cf19 case} String_Hash({\cf22 "=="}):     {\cf20 // \'C5\'D0\'B6\'CFnumber1\'CA\'C7\'B7\'F1\'D3\'EBnumber2\'CF\'E0\'B5\'C8}\par
00980             {\cf19 return} number1 == number2;\par
00981         \par
00982         {\cf19 case} String_Hash({\cf22 "-ne"}):\par
00983         {\cf19 case} String_Hash({\cf22 "!="}):     {\cf20 // \'C5\'D0\'B6\'CFnumber1\'CA\'C7\'B7\'F1\'D3\'EBnumber2\'B2\'BB\'CF\'E0\'B5\'C8}\par
00984             {\cf19 return} number1 != number2;\par
00985         \par
00986         {\cf19 case} String_Hash({\cf22 "-ge"}):\par
00987         {\cf19 case} String_Hash({\cf22 ">="}):     {\cf20 // \'C5\'D0\'B6\'CFnumber1\'CA\'C7\'B7\'F1\'B4\'F3\'D3\'DA\'B5\'C8\'D3\'DAnumber2}\par
00988             {\cf19 return} number1 >= number2;\par
00989         \par
00990         {\cf19 case} String_Hash({\cf22 "-gt"}):\par
00991         {\cf19 case} String_Hash({\cf22 ">"}):      {\cf20 // \'C5\'D0\'B6\'CFnumber1\'CA\'C7\'B7\'F1\'B4\'F3\'D3\'DAnumber2}\par
00992             {\cf19 return} number1 > number2;\par
00993         \par
00994         {\cf19 case} String_Hash({\cf22 "-le"}):\par
00995         {\cf19 case} String_Hash({\cf22 "<="}):     {\cf20 // \'C5\'D0\'B6\'CFnumber1\'CA\'C7\'B7\'F1\'D0\'A1\'D3\'DA\'B5\'C8\'D3\'DAnumber2}\par
00996             {\cf19 return} number1 <= number2;\par
00997         \par
00998         {\cf19 case} String_Hash({\cf22 "-lt"}):\par
00999         {\cf19 case} String_Hash({\cf22 "<"}):      {\cf20 // \'C5\'D0\'B6\'CFnumber1\'CA\'C7\'B7\'F1\'D0\'A1\'D3\'DAnumber2}\par
01000             {\cf19 return} number1 < number2;\par
01001         \par
01002         {\cf19 default}:                    {\cf20 /* \'C6\'E4\'CB\'FB\'C7\'E9\'BF\'F6\'B7\'B5\'BB\'D8\'B4\'ED\'CE\'F3 */}\par
01003             {\cf19 return} {\cf17 false};\par
01004     \}\par
01005     \par
01006 \}\par
01007 \par
01008 {\cf18 bool} Executor::test_string_compare({\cf17 const} {\cf18 int} argc, {\cf17 const} {\cf18 char} * {\cf17 const} argv[])\par
01009 \{\par
01010     assert(argc == 3 || argc == 4);\par
01011 \par
01012     {\cf19 if} (argc == 3)\par
01013     \{\par
01014         {\cf20 // \'B6\'D4\'D7\'D6\'B7\'FB\'B4\'AE\'B2\'E2\'CA\'D4\'B2\'CE\'CA\'FD\'BD\'F8\'D0\'D0\'C5\'D0\'B6\'CF}\par
01015         {\cf19 switch} (String_Hash(argv[1]))   {\cf20 // \'CE\'AA\'C1\'CB\'D0\'CE\'CA\'BD\'C9\'CF\'B5\'C4\'D3\'C5\'D1\'C5\'A3\'AC\'CA\'B9\'D3\'C3switch\'D3\'EF\'BE\'E4}\par
01016         \{\par
01017             {\cf20 /* \'B4\'E6\'D4\'DA\'D0\'D4\'C5\'D0\'B6\'CF */}\par
01018             {\cf19 case} String_Hash({\cf22 "-n"}):  {\cf20 // \'B4\'E6\'D4\'DA\'C5\'D0\'B6\'CF}\par
01019                 {\cf19 return} {\cf17 true};\par
01020                         \par
01021             {\cf20 /* \'C6\'E4\'CB\'FB\'C7\'E9\'BF\'F6\'B7\'B5\'BB\'D8\'B4\'ED\'CE\'F3 */}\par
01022             {\cf19 default}:\par
01023                 {\cf19 return} {\cf17 false};\par
01024         \}\par
01025     \}\par
01026     {\cf19 else}\par
01027     \{\par
01028         {\cf20 // \'B6\'D4\'D7\'D6\'B7\'FB\'B4\'AE\'B2\'E2\'CA\'D4\'B2\'CE\'CA\'FD\'BD\'F8\'D0\'D0\'C5\'D0\'B6\'CF}\par
01029         {\cf19 switch} (String_Hash(argv[2]))   {\cf20 // \'CE\'AA\'C1\'CB\'D0\'CE\'CA\'BD\'C9\'CF\'B5\'C4\'D3\'C5\'D1\'C5\'A3\'AC\'CA\'B9\'D3\'C3switch\'D3\'EF\'BE\'E4}\par
01030         \{\par
01031             {\cf19 case} String_Hash({\cf22 "="}):     {\cf20 // \'C5\'D0\'B6\'CFstring1\'CA\'C7\'B7\'F1\'D3\'EBstring2\'CF\'E0\'B5\'C8}\par
01032                 {\cf19 return} !strcmp(argv[1], argv[3]);\par
01033             \par
01034             {\cf19 case} String_Hash({\cf22 "!="}):     {\cf20 // \'C5\'D0\'B6\'CFstring1\'CA\'C7\'B7\'F1\'D3\'EBstring2\'B2\'BB\'CF\'E0\'B5\'C8}\par
01035                 {\cf19 return} strcmp(argv[1], argv[3]);\par
01036             \par
01037             {\cf19 case} String_Hash({\cf22 "\\\\>"}):      {\cf20 // \'C5\'D0\'B6\'CFstring1\'CA\'C7\'B7\'F1\'B4\'F3\'D3\'DAstring2}\par
01038                 {\cf19 return} strcmp(argv[1], argv[3]) > 0;\par
01039             \par
01040             {\cf19 case} String_Hash({\cf22 "\\\\<"}):      {\cf20 // \'C5\'D0\'B6\'CFstring1\'CA\'C7\'B7\'F1\'D0\'A1\'D3\'DAstring2}\par
01041                 {\cf19 return} strcmp(argv[1], argv[3]) < 0;\par
01042             \par
01043             {\cf19 default}:\par
01044                 {\cf19 return} {\cf17 false};\par
01045         \}\par
01046     \}\par
01047 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/lexer.l \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v src/lexer.l}
{\xe \v src/lexer.l}
{\bkmkstart AAAAAAAACZ}
{\bkmkend AAAAAAAACZ}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'EA\'B6\'A8\'D2\'E5\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAX_ARGUMENT_NUMBER}\~ 128\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b yylex} (void)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b yywrap} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b yy_lexer} (int *argc, char ***argv)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B1\'E4\'C1\'BF\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
char * {\b _argvector} [{\b MAX_ARGUMENT_NUMBER}]\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b _argcounter} = 0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'EA\'B6\'A8\'D2\'E5\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v MAX_ARGUMENT_NUMBER\:lexer.l}
{\xe \v lexer.l\:MAX_ARGUMENT_NUMBER}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAX_ARGUMENT_NUMBER\~ 128}}
\par
{\bkmkstart AAAAAAAADA}
{\bkmkend AAAAAAAADA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b lexer.l} \'B5\'DA {\b 2} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v yy_lexer\:lexer.l}
{\xe \v lexer.l\:yy_lexer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int yy_lexer (int *  {\i argc}, char ***  {\i argv})}}
\par
{\bkmkstart AAAAAAAADB}
{\bkmkend AAAAAAAADB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b lexer.l} \'B5\'DA {\b 43} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "lexer_8l_a9f781b288aca983c195e3cb10e359247_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "lexer_8l_a9f781b288aca983c195e3cb10e359247_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v yylex\:lexer.l}
{\xe \v lexer.l\:yylex}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int yylex (void )}}
\par
{\bkmkstart AAAAAAAADC}
{\bkmkend AAAAAAAADC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b lexer.l} \'B5\'DA {\b 12} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "lexer_8l_a9a7bd1b3d14701eb97c03f3ef34deff1_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
{\xe \v yywrap\:lexer.l}
{\xe \v lexer.l\:yywrap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int yywrap ()}}
\par
{\bkmkstart AAAAAAAADD}
{\bkmkend AAAAAAAADD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b lexer.l} \'B5\'DA {\b 38} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'B1\'E4\'C1\'BF\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v _argcounter\:lexer.l}
{\xe \v lexer.l\:_argcounter}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int _argcounter = 0}}
\par
{\bkmkstart AAAAAAAADE}
{\bkmkend AAAAAAAADE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b lexer.l} \'B5\'DA {\b 4} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
{\xe \v _argvector\:lexer.l}
{\xe \v lexer.l\:_argvector}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
char* _argvector[{\b MAX_ARGUMENT_NUMBER}]}}
\par
{\bkmkstart AAAAAAAADF}
{\bkmkend AAAAAAAADF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b lexer.l} \'B5\'DA {\b 3} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
lexer.l\par \pard\plain 
{\tc\tcl2 \v src/lexer.l}
{\xe \v src/lexer.l}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 %\{\par
00002 {\cf21     #define MAX_ARGUMENT_NUMBER 128}\par
00003     {\cf18 char} *_argvector[MAX_ARGUMENT_NUMBER];  {\cf20 // \'BD\'E2\'CE\'F6\'B2\'CE\'CA\'FD}\par
00004     {\cf18 int} _argcounter = 0;                    {\cf20 // \'B2\'CE\'CA\'FD\'B8\'F6\'CA\'FD}\par
00005 %\}\par
00006 \par
00007 WORD    [a-zA-Z0-9\\/\\.\\-~]+\par
00008 STRINGLITERAL \\"(\\\\.|[^\\\\"])*\\"\par
00009 REDIRCT [0-9><]+\par
00010 SPECIAL [()|&*!]\par
00011 \par
00012 %%\par
00013     _argcounter = 0; \par
00014     _argvector[0] = NULL; \par
00015 \par
00016 {\cf22 \{WORD\}|\{SPECIAL\}|\{REDIRCT\}|\{STRINGLITERAL\}} \{\par
00017     {\cf19 if}(_argcounter < MAX_ARGUMENT_NUMBER-1) \par
00018     \{\par
00019         _argvector[_argcounter++] = ({\cf18 char} *)strdup(yytext);\par
00020         _argvector[_argcounter] = NULL;\par
00021     \}\par
00022 \}\par
00023 \par
00024 {\cf22 \\n}  {\cf19 return} ({\cf18 int})_argvector; {\cf20 // \'BD\'E2\'CE\'F6\'B5\'BD\'BB\'BB\'D0\'D0\'B7\'FB\'CA\'B1\'BD\'E1\'CA\'F8}\par
00025 \par
00026 {\cf22 [ \\t]+}\par
00027 \par
00028 {\cf22 \\#[^\\n]*}    ;   {\cf20 // \'BA\'F6\'C2\'D4\'D2\'D4#\'BF\'AA\'CD\'B7\'B5\'C4\'D7\'A2\'CA\'CD}\par
00029 \par
00030 {\cf22 .} \{\par
00031   {\cf18 char} str[128] = \{0\};\par
00032   sprintf(str, {\cf22 "Unrecognized token [%s] in input sql."}, yytext);\par
00033 {\cf20 //   ParserSetError(str);}\par
00034 \}\par
00035 \par
00036 %%\par
00037 \par
00038 {\cf18 int} yywrap()\par
00039 \{\par
00040     {\cf19 return} 1;\par
00041 \}\par
00042 \par
00043 {\cf18 int} yy_lexer({\cf18 int} *argc, {\cf18 char} ***argv)\par
00044 \{\par
00045     yylex();\par
00046     \par
00047     *argc = _argcounter;\par
00048     *argv = _argvector;\par
00049     \par
00050     {\cf19 return} 0;\par
00051 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/myshell.cpp \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v src/myshell.cpp}
{\xe \v src/myshell.cpp}
{\bkmkstart AAAAAAAADG}
{\bkmkend AAAAAAAADG}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
myshell\'B3\'CC\'D0\'F2\'B5\'C4main\'BA\'AF\'CA\'FD\'A3\'AC\'B8\'BA\'D4\'F0\'B5\'F7\'D3\'C3\'B8\'F7\'B8\'F6\'BD\'D3\'BF\'DA\'B2\'A2\'CA\'B5\'CF\'D6myshell\'B9\'A6\'C4\'DC }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "lexer.h"}\par
{\f2 #include "myshell.h"}\par
{\f2 #include "common.h"}\par
{\f2 #include "Parser.h"}\par
{\f2 #include "Console.h"}\par
{\f2 #include "Display.h"}\par
{\f2 #include "Executor.h"}\par
{\f2 #include <exception>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid myshell.cpp \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "myshell_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C3\'FC\'C3\'FB\'BF\'D5\'BC\'E4\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b SHELL}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b yy_lexer} (int *argc, char ***argv)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b SHELL::shell_setup} (int argc, char *argv[], char *env[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'C6\'F4\'B6\'AFshell }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b SHELL::shell_loop} ({\b Console} *model, {\b Display} *view, {\b Executor} *controller, char *env[])\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'BD\'F8\'C8\'EBshell\'D1\'AD\'BB\'B7 }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
myshell\'B3\'CC\'D0\'F2\'B5\'C4main\'BA\'AF\'CA\'FD\'A3\'AC\'B8\'BA\'D4\'F0\'B5\'F7\'D3\'C3\'B8\'F7\'B8\'F6\'BD\'D3\'BF\'DA\'B2\'A2\'CA\'B5\'CF\'D6myshell\'B9\'A6\'C4\'DC \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-02\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b myshell.cpp} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v yy_lexer\:myshell.cpp}
{\xe \v myshell.cpp\:yy_lexer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int yy_lexer (int *  {\i argc}, char ***  {\i argv})}}
\par
{\bkmkstart AAAAAAAADH}
{\bkmkend AAAAAAAADH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b lexer.l} \'B5\'DA {\b 43} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'BA\'AF\'CA\'FD\'B5\'F7\'D3\'C3\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "myshell_8cpp_a9f781b288aca983c195e3cb10e359247_cgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "myshell_8cpp_a9f781b288aca983c195e3cb10e359247_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
myshell.cpp\par \pard\plain 
{\tc\tcl2 \v src/myshell.cpp}
{\xe \v src/myshell.cpp}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 // \'B3\'CC\'D0\'F2\'A3\'BA\'C3\'FC\'C1\'EE\'D0\'D0\'B1\'E0\'BC\'AD\'C6\'F7}\par
00002 {\cf20 // \'D7\'F7\'D5\'DF\'A3\'BA\'C7\'F1\'C8\'D5\'BA\'EA 3200105842}\par
00003 \par
00015 {\cf20 // #define _DEBUG_}\par
00016 \par
00017 {\cf17 extern} {\cf22 "C"} \par
00018 \{\par
00019 {\cf21     #include "lexer.h"}\par
00020     {\cf18 int} yy_lexer({\cf18 int} *argc, {\cf18 char} ***argv);\par
00021 \}\par
00022 \par
00023 {\cf21 #include "myshell.h"}\par
00024 {\cf21 #include "common.h"}\par
00025 {\cf21 #include "Parser.h"}\par
00026 {\cf21 #include "Console.h"}\par
00027 {\cf21 #include "Display.h"}\par
00028 {\cf21 #include "Executor.h"}\par
00029 \par
00030 {\cf21 #include <exception>}\par
00031 \par
00032 \par
00033 {\cf17 namespace }SHELL\par
00034 \{\par
00035     {\cf18 int} shell_setup({\cf18 int} argc, {\cf18 char} *argv[], {\cf18 char} *env[])\par
00036     \{\par
00037         {\cf20 // \'B4\'B4\'BD\'A8\'C4\'A3\'D0\'CD}\par
00038         Console *model = {\cf17 new} Console;\par
00039         {\cf19 if} (model == {\cf17 nullptr})\par
00040         \{\par
00041             fprintf(stderr, {\cf22 "\\e[1;31m[ERROR]\\e[0m %s: %s\\n"}, strerror(errno), {\cf22 "Out of Space for Console model"});\par
00042             {\cf19 return} 1;\par
00043         \}\par
00044 \par
00045         {\cf20 // \'B4\'B4\'BD\'A8\'CA\'D3\'CD\'BC}\par
00046         Display *view = {\cf17 new} Display(model);\par
00047         {\cf19 if} (view == {\cf17 nullptr})\par
00048         \{\par
00049             fprintf(stderr, {\cf22 "\\e[1;31m[ERROR]\\e[0m %s: %s\\n"}, strerror(errno), {\cf22 "Out of Space for Display view"});\par
00050             {\cf19 return} 1;\par
00051         \}\par
00052 \par
00053         {\cf20 // \'B4\'B4\'BD\'A8\'BF\'D8\'D6\'C6}\par
00054         Executor *controller = {\cf17 new} Executor(model, view);\par
00055         {\cf19 if} (controller == {\cf17 nullptr})\par
00056         \{\par
00057             fprintf(stderr, {\cf22 "\\e[1;31m[ERROR]\\e[0m %s: %s\\n"}, strerror(errno), {\cf22 "Out of Space for Executor controller"});\par
00058             {\cf19 return} 1;\par
00059         \}\par
00060 \par
00061         SHELL::shell_loop(model, view, controller, env);\par
00062         \par
00063         {\cf20 // \'BB\'D8\'CA\'D5\'C4\'DA\'B4\'E6\'A3\'ACMVC\'C4\'A3\'D0\'CD}\par
00064         {\cf17 delete} model;\par
00065         {\cf17 delete} view;\par
00066         {\cf17 delete} controller;\par
00067 \par
00068         {\cf19 return} 0;\par
00069     \}\par
00070 \par
00071     {\cf18 int} shell_loop(Console* model, Display* view, Executor* controller, {\cf18 char} *env[])\par
00072     \{\par
00073         {\cf19 try}\par
00074         \{\par
00075             {\cf19 while} (1)\par
00076             \{\par
00077                 {\cf20 // \'CF\'D4\'CA\'BE\'CC\'E1\'CA\'BE\'B7\'FB}\par
00078                 view->render();\par
00079 \par
00080                 {\cf20 // \'B4\'D3\'CA\'E4\'C8\'EB\'B6\'C1\'C8\'EB\'C3\'FC\'C1\'EE}\par
00081                 {\cf18 char} input[BUFFER_SIZE];\par
00082                 {\cf18 int} input_len = view->InputCommand(input, BUFFER_SIZE);\par
00083                 \par
00084                 {\cf19 if} (input_len == 0)   {\cf20 // \'CA\'E4\'C8\'EB\'CD\'EA\'B1\'CF}\par
00085                     {\cf19 return} 0;\par
00086                 {\cf19 if} (input_len < 0)   {\cf20 // \'CA\'E4\'C8\'EB\'D2\'EC\'B3\'A3}\par
00087                     {\cf19 continue};\par
00088 \par
00089                 {\cf20 // \'B4\'D3\'CA\'E4\'C8\'EB\'D6\'D0\'B4\'B4\'BD\'A8buffer}\par
00090                 YY_BUFFER_STATE bp = yy_scan_string(input);\par
00091                 {\cf19 if} (bp == {\cf17 nullptr})\par
00092                 \{\par
00093                     {\cf19 throw} {\cf22 "Failed to create yy buffer state."};\par
00094                 \}\par
00095 \par
00096                 yy_switch_to_buffer(bp);\par
00097 \par
00098                 {\cf20 // \'BD\'F8\'D0\'D0\'B7\'D6\'B4\'CA\'BD\'E2\'CE\'F6\'B4\'A6\'C0\'ED}\par
00099                 {\cf18 int} argument_counter = 0;\par
00100                 {\cf18 char} **argument_vector = {\cf17 nullptr};\par
00101                 yy_lexer(&argument_counter, &argument_vector);\par
00102                 \par
00103 {\cf21                 #ifdef _DEBUG_}\par
00104                 Argument_Display(argument_counter, argument_vector);\par
00105 {\cf21                 #endif}\par
00106 \par
00107                 model->ResetChildPid();\par
00108 \par
00109                 {\cf20 /* \'CA\'E4\'B3\'F6\'CD\'EA\'B3\'C9\'B5\'C4\'BD\'F8\'B3\'CC\'A3\'AC\'BC\'B4\'CA\'B9\'CA\'C7\'BF\'D5\'D6\'B8\'C1\'EE\'D2\'B2\'D3\'A6\'C8\'E7\'B4\'CB\'A1\'A3 */}\par
00110                 model->ConsoleJobListDone();\par
00111 \par
00112                 {\cf19 if} (argument_counter == 0)\par
00113                     {\cf19 continue};\par
00114                 \par
00115                 {\cf18 bool} exit_state = Parser::shell_pipe(model, view, controller, argument_counter, argument_vector, env);\par
00116 \par
00117                 {\cf20 // view->show();   // \'CF\'D4\'CA\'BE\'CA\'E4\'B3\'F6\'D0\'C5\'CF\'A2}\par
00118 \par
00119                 yylex_destroy();    {\cf20 // \'CA\'CD\'B7\'C5\'B4\'CA\'B7\'A8\'B7\'D6\'CE\'F6\'C6\'F7\'D5\'BC\'D3\'C3\'B5\'C4\'BF\'D5\'BC\'E4\'A3\'AC\'B7\'C0\'D6\'B9\'C4\'DA\'B4\'E6\'D0\'B9\'C2\'B6}\par
00120 \par
00121                 {\cf19 if} (exit_state == {\cf17 true})\par
00122                     {\cf19 break};\par
00123             \}\par
00124         \}\par
00125         {\cf19 catch}({\cf17 const} {\cf18 char} * message)\par
00126         \{\par
00127             fprintf(stderr, {\cf22 "\\e[1;31m[ERROR]\\e[0m %s: %s\\n"}, strerror(errno), message);\par
00128         \}\par
00129         {\cf19 catch}({\cf17 const} std::exception& e)\par
00130         \{\par
00131             fprintf(stderr, {\cf22 "\\e[1;31m[ERROR]\\e[0m %s: %s\\n"}, strerror(errno), e.what());\par
00132         \}\par
00133         {\cf19 catch}(...)\par
00134         \{\par
00135             fprintf(stderr, {\cf22 "\\e[1;31m[ERROR]\\e[0m %s\\n"}, strerror(errno));\par
00136         \}\par
00137 \par
00138         {\cf19 return} 0;\par
00139     \}\par
00140 \par
00141 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/Parser.cpp \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v src/Parser.cpp}
{\xe \v src/Parser.cpp}
{\bkmkstart AAAAAAAADI}
{\bkmkend AAAAAAAADI}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D3\'EF\'B7\'A8\'B7\'D6\'CE\'F6 }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "common.h"}\par
{\f2 #include "Parser.h"}\par
{\f2 #include "Console.h"}\par
{\f2 #include "Display.h"}\par
{\f2 #include "Executor.h"}\par
{\f2 #include <fcntl.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <unistd.h>}\par
{\f2 #include <exception>}\par
{\f2 #include <sys/wait.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Parser.cpp \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_parser_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const char * {\b shell_error_message} ({\b sh_err_t} err)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B8\'F9\'BE\'DD\'B4\'ED\'CE\'F3\'C0\'E0\'D0\'CD\'B8\'F8\'B3\'F6\'B4\'ED\'CE\'F3\'D0\'C5\'CF\'A2 }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EA\'CF\'B8\'C3\'E8\'CA\'F6\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'D3\'EF\'B7\'A8\'B7\'D6\'CE\'F6 \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'D7\'F7\'D5\'DF\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
\'C7\'F1\'C8\'D5\'BA\'EA ({\f2 3200105842@zju.edu.cn}) \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'B1\'BE\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
0.1 \par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C8\'D5\'C6\'DA\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
2022-07-19\par
}}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'B0\'E6\'C8\'A8\'CB\'F9\'D3\'D0\par}\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid {\s17 \sa60 \sb30
Copyright (c) 2022 \par
}}}{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Parser.cpp} \'D6\'D0\'B6\'A8\'D2\'E5.}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'BA\'AF\'CA\'FD\'CB\'B5\'C3\'F7\par
\pard\plain 
{\xe \v shell_error_message\:Parser.cpp}
{\xe \v Parser.cpp\:shell_error_message}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
static const char * shell_error_message ({\b sh_err_t}  {\i err}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAADJ}
{\bkmkend AAAAAAAADJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\'B8\'F9\'BE\'DD\'B4\'ED\'CE\'F3\'C0\'E0\'D0\'CD\'B8\'F8\'B3\'F6\'B4\'ED\'CE\'F3\'D0\'C5\'CF\'A2 }}\par
{
\'D4\'DA\'CE\'C4\'BC\'FE {\b Parser.cpp} \'B5\'DA {\b 353} \'D0\'D0\'B6\'A8\'D2\'E5.}\par
\'D5\'E2\'CA\'C7\'D5\'E2\'B8\'F6\'BA\'AF\'CA\'FD\'B5\'C4\'B5\'F7\'D3\'C3\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_parser_8cpp_a932249bb0892f7c0083bf15e27fb4885_icgraph.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Parser.cpp\par \pard\plain 
{\tc\tcl2 \v src/Parser.cpp}
{\xe \v src/Parser.cpp}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 \par
00012 {\cf21 #include "common.h"}\par
00013 {\cf21 #include "Parser.h"}\par
00014 {\cf21 #include "Console.h"}\par
00015 {\cf21 #include "Display.h"}\par
00016 {\cf21 #include "Executor.h"}\par
00017 \par
00018 {\cf21 #include <fcntl.h>}\par
00019 {\cf21 #include <string.h>}\par
00020 {\cf21 #include <unistd.h>}\par
00021 {\cf21 #include <exception>}\par
00022 {\cf21 #include <sys/wait.h>}\par
00023 \par
00025 {\cf17 static} {\cf17 const} {\cf18 char} * shell_error_message(sh_err_t err);\par
00026 \par
00027 {\cf18 bool} Parser::shell_pipe(Console *model, Display* view, Executor* controller, {\cf18 int}& argc, {\cf18 char} *argv[], {\cf18 char} *env[])\par
00028 \{\par
00029     {\cf18 int} count = 0;\par
00030     {\cf18 char} *args[MAX_ARGUMENT_NUMBER];\par
00031 \par
00032     {\cf18 int} input_fd = model->GetInputFD();     {\cf20 // \'BC\'C7\'C2\'BC\'CF\'C2\'D4\'AD\'CA\'BC\'CA\'E4\'C8\'EB}\par
00033     {\cf18 int} output_fd = model->GetOutputFD();   {\cf20 // \'BC\'C7\'C2\'BC\'CF\'C2\'D4\'AD\'CA\'BC\'CA\'E4\'B3\'F6}\par
00034 \par
00035     {\cf18 int} i = 0;\par
00036     {\cf19 do}\par
00037     \{\par
00038         {\cf19 if} (strcmp(argv[i], {\cf22 "|"}) != 0)   {\cf20 // \'B2\'BB\'CA\'C7\'B9\'DC\'B5\'C0\'B7\'FB}\par
00039         \{\par
00040             args[count] = argv[i];\par
00041             count++;\par
00042         \}\par
00043         {\cf19 else}\par
00044         \{\par
00045             args[count] = NULL; {\cf20 // \'C3\'FC\'C1\'EE\'BD\'E1\'CA\'F8}\par
00046 \par
00047             {\cf18 int} channel[2]; \par
00048             {\cf20 // channel[0] : read}\par
00049             {\cf20 // channel[1] : write}\par
00050             {\cf19 if} (pipe(channel) == -1)\par
00051                 {\cf19 throw} {\cf22 "Pipe Error, \'B4\'ED\'CE\'F3\'D6\'D5\'D6\'B9"};\par
00052             \par
00053 {\cf21             #ifdef _DEBUG_}\par
00054             printf({\cf22 "channel: read %d write %d\\n"}, channel[0], channel[1]);\par
00055 {\cf21             #endif}\par
00056 \par
00057             pid_t pid = fork(); {\cf20 // \'B7\'D6\'C1\'D1\'BD\'F8\'B3\'CC\'A3\'ACfork\'B7\'B5\'BB\'D8\'B5\'C4\'CA\'C7\'D7\'D3\'BD\'F8\'B3\'CC\'B5\'C4pid}\par
00058             {\cf19 if} (pid < 0)\par
00059             \{ \par
00060                 {\cf20 /* \'B4\'ED\'CE\'F3\'B4\'A6\'C0\'ED */}\par
00061                 {\cf19 throw} {\cf22 "Fork Error, \'B4\'ED\'CE\'F3\'D6\'D5\'D6\'B9"};\par
00062             \}\par
00063             {\cf19 else} {\cf19 if} (pid == 0)\par
00064             \{\par
00065                 {\cf20 /* \'D7\'D3\'BD\'F8\'B3\'CC */}  \par
00066                 setenv({\cf22 "parent"}, getenv({\cf22 "shell"}), 1);  {\cf20 // \'C9\'E8\'D6\'C3\'B5\'F7\'D3\'C3\'D7\'D3\'BD\'F8\'B3\'CC\'B5\'C4\'B8\'B8\'BD\'F8\'B3\'CC}\par
00067                 close(channel[0]);  {\cf20 // \'B9\'D8\'B1\'D5\'B6\'C1\'BD\'F8\'B3\'CC}\par
00068                 {\cf18 int} fd = channel[1];\par
00069 \par
00070                 model->SetOutputFD(fd);\par
00071                 model->SetOutputRedirect();\par
00072 \par
00073                 dup2(fd, STDOUT_FILENO); {\cf20 // \'D6\'D8\'B6\'A8\'CF\'F2\'B1\'EA\'D7\'BC\'CA\'E4\'B3\'F6\'D6\'C1channel[1]}\par
00074 \par
00075                 shell_execute(model, view, controller, count, args, env);\par
00076                 \par
00077                 {\cf20 /* \'D4\'DAshell execute\'C0\'EF\'B0\'FC\'BA\'AC\'C1\'CB\'D6\'D8\'B6\'A8\'CF\'F2\'BA\'F3\'CE\'C4\'BC\'FE\'B5\'C4\'B9\'D8\'B1\'D5\'B5\'C8\'B2\'D9\'D7\'F7\'A3\'AC\'B4\'CB\'B4\'A6\'BF\'C9\'D2\'D4\'B2\'BB\'B1\'D8\'D4\'D9\'B4\'CE\'B9\'D8\'B1\'D5 */}\par
00078 \par
00079                 {\cf19 return} EXIT;\par
00080             \}\par
00081             {\cf19 else}\par
00082             \{\par
00083                 {\cf20 /* \'B8\'B8\'BD\'F8\'B3\'CC */}\par
00084                 wait(NULL); {\cf20 // \'CE\'AA\'B1\'A3\'B3\'D6\'C2\'DF\'BC\'AD\'A3\'AC\'D0\'E8\'D2\'AA\'B5\'C8\'D7\'D3\'BD\'F8\'B3\'CC\'CA\'E4\'B3\'F6\'D6\'AE\'BA\'F3\'D4\'D9\'BC\'CC\'D0\'F8}\par
00085                 \par
00086                 close(channel[1]);\par
00087                 {\cf18 int} fd = channel[0];\par
00088 \par
00089                 model->SetInputFD(fd);\par
00090                 model->SetInputRedirect();\par
00091 \par
00092                 dup2(fd, STDIN_FILENO); {\cf20 // \'D6\'D8\'B6\'A8\'CF\'F2\'B1\'EA\'D7\'BC\'CA\'E4\'C8\'EB\'D6\'C1fd}\par
00093 \par
00094                 count = 0;\par
00095             \}\par
00096 \par
00097         \}\par
00098 \par
00099         ++i;\par
00100     \} {\cf19 while} (i < argc);\par
00101 \par
00102 {\cf21     #ifdef _DEBUG_}\par
00103     printf({\cf22 "Parent Process\\n"});\par
00104 {\cf21     #endif}\par
00105     {\cf20 /* \'D7\'EE\'BA\'F3\'D2\'BB\'CC\'F5\'C3\'FC\'C1\'EE\'D2\'B2\'D2\'AA\'D6\'B4\'D0\'D0 */}\par
00106     args[count] = NULL; {\cf20 // \'C3\'FC\'C1\'EE\'BD\'E1\'CA\'F8}\par
00107     {\cf18 bool} exit_state = shell_execute(model, view, controller, count, args, env);\par
00108 \par
00109 {\cf21     #ifdef _DEBUG_}\par
00110     printf({\cf22 "pipe: Input %d Output %d Error %d\\n"}, model->GetInputFD(), model->GetOutputFD(), model->GetErrorFD());\par
00111 {\cf21     #endif}\par
00112 \par
00113     {\cf20 /* \'CE\'DE\'C2\'DB\'D6\'D8\'B6\'A8\'CF\'F2\'C8\'E7\'BA\'CE\'B7\'A2\'C9\'FA\'A3\'AC\'D7\'EE\'BA\'F3\'BD\'AB\'C6\'E4\'BB\'B9\'D4\'AD\'CE\'AA\'B1\'BE\'C0\'B4\'B5\'C4\'D7\'B4\'CC\'AC}\par
00114 {\cf20        \'BF\'C9\'C4\'DC\'D6\'B4\'D0\'D0\'CA\'B1\'D2\'D1\'B9\'D8\'B1\'D5\'CE\'C4\'BC\'FE\'A3\'AC\'B5\'AB\'CE\'B4\'D5\'FD\'C8\'B7\'C9\'E8\'D6\'C3\'D4\'AD\'CA\'BC\'D7\'B4\'CC\'AC */}\par
00115     {\cf19 if} (model->GetInputFD() != input_fd)    {\cf20 // \'C8\'E7\'B9\'FB\'B7\'A2\'C9\'FA\'C1\'CB\'CA\'E4\'C8\'EB\'D6\'D8\'B6\'A8\'CF\'F2\'C7\'D2\'CE\'B4\'B9\'D8\'B1\'D5}\par
00116     \{\par
00117         {\cf20 // dup2(model->GetSTDIN(), STDIN_FILENO);}\par
00118         model->SetInputFD(input_fd);  {\cf20 // \'BB\'D6\'B8\'B4\'CA\'E4\'C8\'EB}\par
00119         {\cf20 // model->ResetInputRedirect();    // \'BB\'D6\'B8\'B4\'D7\'B4\'CC\'AC}\par
00120     \}\par
00121 \par
00122     {\cf19 if} (model->GetOutputFD() != output_fd)    {\cf20 // \'C8\'E7\'B9\'FB\'B7\'A2\'C9\'FA\'C1\'CB\'CA\'E4\'B3\'F6\'D6\'D8\'B6\'A8\'CF\'F2}\par
00123     \{\par
00124         {\cf20 // dup2(model->GetSTDOUT(), STDOUT_FILENO);}\par
00125         model->SetOutputFD(output_fd);  {\cf20 // \'BB\'D6\'B8\'B4\'CA\'E4\'B3\'F6}\par
00126         {\cf20 // model->ResetOutputRedirect();    // \'BB\'D6\'B8\'B4\'D7\'B4\'CC\'AC}\par
00127     \}\par
00128 \par
00129     {\cf19 return} exit_state;\par
00130 \}\par
00131 \par
00132 {\cf18 int} Parser::shell_parser(Console *model, Display* view, Executor* controller, {\cf18 int}& argc, {\cf18 char} *argv[], {\cf18 char} *env[])\par
00133 \{\par
00134     {\cf19 if} (argc == 0)\par
00135         {\cf19 return} 0;   {\cf20 // \'CE\'DE\'B2\'CE\'A3\'AC\'B2\'BB\'D0\'E8\'B4\'A6\'C0\'ED}\par
00136     \par
00137     {\cf19 for} ({\cf18 int} index = argc-1; index > 0; --index)    {\cf20 // \'B4\'D3\'C4\'A9\'CE\'B2\'BF\'AA\'CA\'BC\'CD\'F9\'C7\'B0\'C9\'A8\'C3\'E8\'A3\'AC\'B5\'DA\'D2\'BB\'B8\'F6\'B2\'BB\'B1\'D8\'C9\'A8}\par
00138     \{\par
00139         std::string arg(argv[index]);    {\cf20 // \'CA\'B9\'D3\'C3string\'C0\'E0\'B4\'A6\'C0\'ED}\par
00140         \par
00144         {\cf19 if} (arg == {\cf22 "<"} || arg == {\cf22 "0<"})\par
00145         \{\par
00146             {\cf19 if} (index + 1 == argc)  {\cf20 // \'D6\'D8\'B6\'A8\'CF\'F2\'B7\'FB\'BA\'C5\'CA\'C7\'D7\'EE\'BA\'F3\'D2\'BB\'B8\'F6\'CA\'E4\'C8\'EB}\par
00147             \{\par
00148                 {\cf19 throw} {\cf22 "\'D3\'EF\'B7\'A8\'BD\'E2\'CE\'F6\'B4\'ED\'CE\'F3"};\par
00149             \}\par
00150 \par
00151             {\cf19 if} (model->GetInputRedirect())      {\cf20 // \'C8\'E7\'B9\'FB\'D2\'D1\'BE\'AD\'C9\'E8\'D6\'C3\'C1\'CB\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC\'C1\'CB}\par
00152             \{\par
00153                 {\cf19 throw} {\cf22 "\'B6\'E0\'D6\'D8\'D6\'D8\'B6\'A8\'CF\'F2\'B4\'ED\'CE\'F3"};\par
00154             \}\par
00155 \par
00156             {\cf17 const} {\cf18 char} * input_file = argv[index + 1];\par
00157             {\cf18 int} fd = open(input_file, O_RDONLY);\par
00158             {\cf19 if} (fd < 0)\par
00159                 {\cf19 throw} std::exception();\par
00160                             \par
00161             model->SetInputFD(fd);\par
00162             model->SetInputRedirect();\par
00163 \par
00164             dup2(fd, STDIN_FILENO); {\cf20 // \'D6\'D8\'B6\'A8\'CF\'F2\'B1\'EA\'D7\'BC\'CA\'E4\'C8\'EB\'D6\'C1fd}\par
00165 \par
00166             {\cf19 for} ({\cf18 int} jump = index + 2; jump < argc; ++jump)\par
00167                 argv[jump-2] = argv[jump];\par
00168             argc = argc - 2;\par
00169             argv[argc] = NULL;\par
00170         \}\par
00171 \par
00173         {\cf19 if} (arg == {\cf22 ">"} || arg == {\cf22 "1>"})\par
00174         \{\par
00175             {\cf19 if} (index + 1 == argc)  {\cf20 // \'D6\'D8\'B6\'A8\'CF\'F2\'B7\'FB\'BA\'C5\'CA\'C7\'D7\'EE\'BA\'F3\'D2\'BB\'B8\'F6\'CA\'E4\'C8\'EB}\par
00176             \{\par
00177                 {\cf19 throw} {\cf22 "\'D3\'EF\'B7\'A8\'BD\'E2\'CE\'F6\'B4\'ED\'CE\'F3"};\par
00178             \}\par
00179 \par
00180             {\cf19 if} (model->GetOutputRedirect())      {\cf20 // \'C8\'E7\'B9\'FB\'D2\'D1\'BE\'AD\'C9\'E8\'D6\'C3\'C1\'CB\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC\'C1\'CB}\par
00181             \{\par
00182                 {\cf19 throw} {\cf22 "\'B6\'E0\'D6\'D8\'D6\'D8\'B6\'A8\'CF\'F2\'B4\'ED\'CE\'F3"};\par
00183             \}\par
00184 \par
00185             {\cf17 const} {\cf18 char} * output_file = argv[index + 1];\par
00186             {\cf18 int} fd = open(output_file, O_WRONLY | O_TRUNC | O_CREAT, 0777&(~model->GetMask()));\par
00187             {\cf19 if} (fd < 0)\par
00188                 {\cf19 throw} std::exception();                \par
00189             \par
00190             model->SetOutputFD(fd);\par
00191             model->SetOutputRedirect();\par
00192 \par
00193             dup2(fd, STDOUT_FILENO); {\cf20 // \'D6\'D8\'B6\'A8\'CF\'F2\'B1\'EA\'D7\'BC\'CA\'E4\'B3\'F6\'D6\'C1fd}\par
00194                 \par
00195             {\cf19 for} ({\cf18 int} jump = index + 2; jump < argc; ++jump)\par
00196                 argv[jump-2] = argv[jump];\par
00197             argc = argc - 2;\par
00198             argv[argc] = NULL;\par
00199         \}\par
00200 \par
00202         {\cf19 if} (arg == {\cf22 "2>"})\par
00203         \{\par
00204             {\cf19 if} (index + 1 == argc)  {\cf20 // \'D6\'D8\'B6\'A8\'CF\'F2\'B7\'FB\'BA\'C5\'CA\'C7\'D7\'EE\'BA\'F3\'D2\'BB\'B8\'F6\'CA\'E4\'C8\'EB}\par
00205             \{\par
00206                 {\cf19 throw} {\cf22 "\'D3\'EF\'B7\'A8\'BD\'E2\'CE\'F6\'B4\'ED\'CE\'F3"};\par
00207             \}\par
00208 \par
00209             {\cf19 if} (model->GetErrorRedirect())      {\cf20 // \'C8\'E7\'B9\'FB\'D2\'D1\'BE\'AD\'C9\'E8\'D6\'C3\'C1\'CB\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC\'C1\'CB}\par
00210             \{\par
00211                 {\cf19 throw} {\cf22 "\'B6\'E0\'D6\'D8\'D6\'D8\'B6\'A8\'CF\'F2\'B4\'ED\'CE\'F3"};\par
00212             \}\par
00213 \par
00214             {\cf17 const} {\cf18 char} * output_file = argv[index + 1];\par
00215             {\cf18 int} fd = open(output_file, O_WRONLY | O_TRUNC | O_CREAT, 0777&(~model->GetMask()));\par
00216             {\cf19 if} (fd < 0)\par
00217                 {\cf19 throw} std::exception();                \par
00218             \par
00219             model->SetErrorFD(fd);\par
00220             model->SetErrorRedirect();\par
00221 \par
00222             dup2(fd, STDERR_FILENO); {\cf20 // \'D6\'D8\'B6\'A8\'CF\'F2\'B1\'EA\'D7\'BC\'B4\'ED\'CE\'F3\'CA\'E4\'B3\'F6\'D6\'C1fd}\par
00223 \par
00224             {\cf19 for} ({\cf18 int} jump = index + 2; jump < argc; ++jump)\par
00225                 argv[jump-2] = argv[jump];\par
00226             argc = argc - 2;\par
00227             argv[argc] = NULL;\par
00228         \}\par
00229 \par
00231         {\cf19 if} (arg == {\cf22 ">>"} || arg == {\cf22 "1>>"})\par
00232         \{\par
00233             {\cf20 /* \'B4\'CA\'B7\'A8\'BD\'E2\'CE\'F6\'CA\'B1\'D3\'A6\'B8\'C3\'CA\'B6\'B1\'F0<\'BA\'CD>\'B7\'FB\'BA\'C5\'B5\'C4\'B1\'D5\'B0\'FC */}\par
00234 {\cf21             #ifdef _DEBUG_}\par
00235             Argument_Display(argc, argv);\par
00236 {\cf21             #endif}\par
00237             \par
00238             {\cf19 if} (index + 1 == argc)  {\cf20 // \'D6\'D8\'B6\'A8\'CF\'F2\'B7\'FB\'BA\'C5\'CA\'C7\'D7\'EE\'BA\'F3\'D2\'BB\'B8\'F6\'CA\'E4\'C8\'EB}\par
00239             \{\par
00240                 {\cf19 throw} {\cf22 "\'D3\'EF\'B7\'A8\'BD\'E2\'CE\'F6\'B4\'ED\'CE\'F3"};\par
00241             \}\par
00242 \par
00243             {\cf19 if} (model->GetOutputRedirect())      {\cf20 // \'C8\'E7\'B9\'FB\'D2\'D1\'BE\'AD\'C9\'E8\'D6\'C3\'C1\'CB\'D6\'D8\'B6\'A8\'CF\'F2\'D7\'B4\'CC\'AC\'C1\'CB}\par
00244             \{\par
00245                 {\cf19 throw} {\cf22 "\'B6\'E0\'D6\'D8\'D6\'D8\'B6\'A8\'CF\'F2\'B4\'ED\'CE\'F3"};\par
00246             \}\par
00247 \par
00248             {\cf17 const} {\cf18 char} * output_file = argv[index + 1];\par
00249             {\cf18 int} fd = open(output_file, O_WRONLY | O_APPEND | O_CREAT, 0777&(~model->GetMask()));\par
00250             {\cf19 if} (fd < 0)\par
00251                 {\cf19 throw} std::exception();                \par
00252             \par
00253             model->SetOutputFD(fd);\par
00254             model->SetOutputRedirect();\par
00255 \par
00256             dup2(fd, STDOUT_FILENO); {\cf20 // \'D6\'D8\'B6\'A8\'CF\'F2\'B1\'EA\'D7\'BC\'CA\'E4\'B3\'F6\'D6\'C1fd}\par
00257 \par
00258             {\cf19 for} ({\cf18 int} jump = index + 2; jump < argc; ++jump)\par
00259                 argv[jump-2] = argv[jump];\par
00260             argc = argc - 2;\par
00261             argv[argc] = NULL;\par
00262         \}\par
00263     \}\par
00264 \par
00265     {\cf19 return} 0;\par
00266 \}\par
00267 \par
00268 {\cf18 bool} Parser::shell_execute(Console *model, Display* view, Executor* controller, {\cf18 int}& argc, {\cf18 char} *argv[], {\cf18 char} *env[])\par
00269 \{\par
00270     {\cf20 // Argument_Display(argc, argv);}\par
00271 \par
00272     {\cf18 int} input_fd = model->GetInputFD();     {\cf20 // \'BC\'C7\'C2\'BC\'CF\'C2\'D4\'AD\'CA\'BC\'CA\'E4\'C8\'EB}\par
00273     {\cf18 int} output_fd = model->GetOutputFD();   {\cf20 // \'BC\'C7\'C2\'BC\'CF\'C2\'D4\'AD\'CA\'BC\'CA\'E4\'B3\'F6}\par
00274     {\cf18 int} error_fd = model->GetErrorFD();     {\cf20 // \'BC\'C7\'C2\'BC\'CF\'C2\'D4\'AD\'CA\'BC\'B4\'ED\'CE\'F3\'CA\'E4\'B3\'F6}\par
00275 \par
00276     {\cf20 // \'D6\'B4\'D0\'D0\'C3\'FC\'C1\'EE}\par
00277     {\cf19 try}\par
00278     \{\par
00279         {\cf20 // Parser \'D3\'EF\'B7\'A8\'B7\'D6\'CE\'F6}\par
00280         Parser::shell_parser(model, view, controller, argc, argv, env);\par
00281 \par
00282         {\cf20 // \'D6\'B4\'D0\'D0\'C3\'FC\'C1\'EE}\par
00283         sh_err_t err = controller->execute(argc, argv, env);\par
00284         \par
00285         {\cf20 // \'B8\'F9\'BE\'DD\'B7\'B5\'BB\'D8\'D7\'B4\'CC\'AC\'C5\'D0\'B6\'CF}\par
00286         {\cf19 if} (err == SH_EXIT)\par
00287         \{\par
00288             view->show(); {\cf20 // \'BD\'AB\'CD\'CB\'B3\'F6\'D0\'C5\'CF\'A2\'CF\'D4\'CA\'BE}\par
00289             {\cf19 return} {\cf17 true};\par
00290         \}\par
00291         {\cf19 else} {\cf19 if} (err != SH_SUCCESS)\par
00292         \{\par
00293             {\cf19 throw} err;\par
00294         \}\par
00295 \par
00296         view->show();      {\cf20 // \'CF\'D4\'CA\'BE\'CA\'E4\'B3\'F6\'D0\'C5\'CF\'A2}\par
00297         view->clear();     {\cf20 // \'C7\'E5\'BF\'D5\'BD\'E1\'B9\'FB}\par
00298     \}\par
00299     {\cf19 catch}({\cf17 const} std::exception& e)\par
00300     \{\par
00301         fprintf(stderr, {\cf22 "\\e[1;31m[ERROR]\\e[0m %s: %s\\n"}, strerror(errno), e.what());\par
00302     \}\par
00303     {\cf19 catch}({\cf17 const} sh_err_t e)\par
00304     \{\par
00305         fprintf(stderr, {\cf22 "\\e[1;31m[ERROR]\\e[0m MyShell: %s\\n"}, shell_error_message(e));\par
00306     \}\par
00307     {\cf19 catch}({\cf17 const} {\cf18 char} * message)\par
00308     \{\par
00309         fprintf(stderr, {\cf22 "\\e[1;31m[ERROR]\\e[0m %s: %s\\n"}, strerror(errno), message);\par
00310     \}\par
00311     {\cf19 catch}(...)\par
00312     \{\par
00313         fprintf(stderr, {\cf22 "\\e[1;31m[ERROR]\\e[0m %s\\n"}, strerror(errno));\par
00314     \}\par
00315 \par
00316     {\cf19 if} (model->GetInputRedirect())    {\cf20 // \'C8\'E7\'B9\'FB\'B7\'A2\'C9\'FA\'C1\'CB\'CA\'E4\'C8\'EB\'D6\'D8\'B6\'A8\'CF\'F2}\par
00317     \{\par
00318         {\cf18 int} state_code = close(model->GetInputFD()); {\cf20 // \'B9\'D8\'B1\'D5\'CE\'C4\'BC\'FE}\par
00319         {\cf19 if} (state_code != 0)                         {\cf20 // \'B9\'D8\'B1\'D5\'B4\'ED\'CE\'F3\'B4\'A6\'C0\'ED}\par
00320             {\cf19 throw} std::exception();\par
00321 \par
00322         dup2(model->GetSTDIN(), STDIN_FILENO);\par
00323         model->SetInputFD(input_fd);  {\cf20 // \'BB\'D6\'B8\'B4\'CA\'E4\'C8\'EB}\par
00324         model->ResetInputRedirect();    {\cf20 // \'BB\'D6\'B8\'B4\'D7\'B4\'CC\'AC}\par
00325     \}\par
00326 \par
00327     {\cf19 if} (model->GetOutputRedirect())    {\cf20 // \'C8\'E7\'B9\'FB\'B7\'A2\'C9\'FA\'C1\'CB\'CA\'E4\'B3\'F6\'D6\'D8\'B6\'A8\'CF\'F2}\par
00328     \{\par
00329         {\cf18 int} state_code = close(model->GetOutputFD()); {\cf20 // \'B9\'D8\'B1\'D5\'CE\'C4\'BC\'FE}\par
00330         {\cf19 if} (state_code != 0)                          {\cf20 // \'B9\'D8\'B1\'D5\'B4\'ED\'CE\'F3\'B4\'A6\'C0\'ED}\par
00331             {\cf19 throw} std::exception();\par
00332 \par
00333         dup2(model->GetSTDOUT(), STDOUT_FILENO);\par
00334         model->SetOutputFD(output_fd);  {\cf20 // \'BB\'D6\'B8\'B4\'CA\'E4\'B3\'F6}\par
00335         model->ResetOutputRedirect();    {\cf20 // \'BB\'D6\'B8\'B4\'D7\'B4\'CC\'AC}\par
00336     \}\par
00337 \par
00338     {\cf19 if} (model->GetErrorRedirect())    {\cf20 // \'C8\'E7\'B9\'FB\'B7\'A2\'C9\'FA\'C1\'CB\'B4\'ED\'CE\'F3\'CA\'E4\'B3\'F6\'D6\'D8\'B6\'A8\'CF\'F2}\par
00339     \{\par
00340         {\cf18 int} state_code = close(model->GetErrorFD()); {\cf20 // \'B9\'D8\'B1\'D5\'CE\'C4\'BC\'FE}\par
00341         {\cf19 if} (state_code != 0)                          {\cf20 // \'B9\'D8\'B1\'D5\'B4\'ED\'CE\'F3\'B4\'A6\'C0\'ED}\par
00342             {\cf19 throw} std::exception();\par
00343 \par
00344         dup2(model->GetSTDERR(), STDERR_FILENO);\par
00345         model->SetErrorFD(error_fd);  {\cf20 // \'BB\'D6\'B8\'B4\'B4\'ED\'CE\'F3\'CA\'E4\'B3\'F6}\par
00346         model->ResetErrorRedirect();    {\cf20 // \'BB\'D6\'B8\'B4\'D7\'B4\'CC\'AC}\par
00347     \}\par
00348 \par
00349     {\cf19 return} {\cf17 false};\par
00350 \}\par
00351 \par
00353 {\cf17 static} {\cf17 const} {\cf18 char} * shell_error_message(sh_err_t err)\par
00354 \{\par
00355     {\cf19 switch} (err)\par
00356     \{\par
00357         {\cf19 case} SH_FAILED:\par
00358             {\cf19 return} {\cf22 "Shell Failed. \'B4\'ED\'CE\'F3"};\par
00359         {\cf19 case} SH_UNDEFINED:\par
00360             {\cf19 return} {\cf22 "Undifined command. \'CE\'B4\'B6\'A8\'D2\'E5\'B5\'C4\'C3\'FC\'C1\'EE"};\par
00361         {\cf19 case} SH_ARGS:\par
00362             {\cf19 return} {\cf22 "Argument error. \'B2\'CE\'CA\'FD\'B4\'ED\'CE\'F3"};\par
00363         \par
00364         {\cf19 default}:\par
00365             {\cf19 return} {\cf22 "Unknown error. \'CE\'B4\'D6\'AA\'B4\'ED\'CE\'F3"};\par
00366     \}\par
00367 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
src/ProcessManager.cpp \'CE\'C4\'BC\'FE\'B2\'CE\'BF\'BC\par \pard\plain 
{\tc\tcl2 \v src/ProcessManager.cpp}
{\xe \v src/ProcessManager.cpp}
{\bkmkstart AAAAAAAADK}
{\bkmkend AAAAAAAADK}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "config.h"}\par
{\f2 #include "Console.h"}\par
{\f2 #include "BinaryHeap.h"}\par
{\f2 #include "ProcessManager.h"}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <iostream>}\par
{\f2 #include <sys/wait.h>}\par
{\f2 #include <sys/types.h>}\par
}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid ProcessManager.cpp \'B5\'C4\'D2\'FD\'D3\'C3(Include)\'B9\'D8\'CF\'B5\'CD\'BC:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "_process_manager_8cpp__incl.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
ProcessManager.cpp\par \pard\plain 
{\tc\tcl2 \v src/ProcessManager.cpp}
{\xe \v src/ProcessManager.cpp}
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
\'E4\'AF\'C0\'C0\'B8\'C3\'CE\'C4\'BC\'FE\'B5\'C4\'CE\'C4\'B5\'B5.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf21 #include "config.h"}\par
00002 {\cf21 #include "Console.h"}\par
00003 {\cf21 #include "BinaryHeap.h"}\par
00004 {\cf21 #include "ProcessManager.h"}\par
00005 \par
00006 {\cf21 #include <stdio.h>}\par
00007 {\cf21 #include <string.h>}\par
00008 {\cf21 #include <iostream>}\par
00009 {\cf21 #include <sys/wait.h>}\par
00010 {\cf21 #include <sys/types.h>}\par
00011 \par
00012 job_unit::job_unit({\cf18 unsigned} {\cf18 int} _id, {\cf18 int} _pid, job_state _state, {\cf18 int} _argc, {\cf18 char} * _argv[])\par
00013             : id(_id), pid(_pid), state(_state), argc(_argc)\par
00014 \{\par
00015     {\cf20 // argv \'B1\'D8\'D0\'EB\'BD\'F8\'D0\'D0\'C9\'EE\'BF\'BD\'B1\'B4\'A3\'AC\'B7\'F1\'D4\'F2\'CA\'CD\'B7\'C5argv\'BA\'F3\'BD\'AB\'B2\'BB\'D4\'D9\'D3\'D0\'A3\'AC\'BB\'B9\'BB\'E1\'D4\'EC\'B3\'C9\'B6\'CE\'B4\'ED\'CE\'F3}\par
00016     assert(argc < MAX_ARGUMENT_NUMBER);\par
00017     {\cf19 for} ({\cf18 int} i = 0; i < argc; ++i)\par
00018         strncpy(argv[i], _argv[i], BUFFER_SIZE);\par
00019 \}\par
00020 \par
00021 {\cf18 void} job_unit::PrintJob({\cf18 int} output_fd)\par
00022 \{\par
00023     {\cf20 // if (argc <= 0)  // \'B2\'CE\'CA\'FD\'B4\'ED\'CE\'F3}\par
00024     {\cf20 // \{}\par
00025     {\cf20 //     assert(false && "argument error");}\par
00026     {\cf20 //     return;}\par
00027     {\cf20 // \}}\par
00028 \par
00029     {\cf17 const} {\cf18 char} *State_;\par
00030     {\cf19 switch} (state)  {\cf20 // \'D7\'B4\'CC\'AC\'D3\'B3\'C9\'E4}\par
00031     \{\par
00032         {\cf19 case} Running:                                    {\cf20 // \'D5\'FD\'D4\'DA\'D4\'CB\'D0\'D0}\par
00033             State_ = {\cf22 "Running"};\par
00034             {\cf19 break};\par
00035         {\cf19 case} Stopped:                                    {\cf20 // \'CD\'A3\'D6\'B9\'D4\'CB\'D0\'D0}\par
00036             State_ = {\cf22 "Stopped"};\par
00037             {\cf19 break};\par
00038         {\cf19 case} Done:                                       {\cf20 // \'CD\'EA\'B3\'C9\'D4\'CB\'D0\'D0}\par
00039             State_ = {\cf22 "Done"};\par
00040             {\cf19 break};\par
00041         {\cf19 case} Terminated:                                 {\cf20 // \'D6\'D5\'D6\'B9\'D4\'CB\'D0\'D0}\par
00042             State_ = {\cf22 "Terminated"};\par
00043             {\cf19 break};\par
00044     \}\par
00045 \par
00046     {\cf20 // \'D7\'B4\'CC\'AC\'B4\'F2\'D3\'A1}\par
00047     {\cf18 char} buffer[BUFFER_SIZE];\par
00048     ssize_t write_state;\par
00049     snprintf(buffer, BUFFER_SIZE-1, {\cf22 "[%u]%c\\t%s\\t\\t\\t\\t\\t"}, {\cf18 id}, {\cf23 ' '}, State_);\par
00050     write_state = write(output_fd, buffer, strlen(buffer));\par
00051     {\cf19 if} (write_state == -1)\par
00052         {\cf19 throw} std::exception();\par
00053 \par
00054     {\cf20 // \'B2\'CE\'CA\'FD\'B4\'F2\'D3\'A1}\par
00055     {\cf19 if} (argc > 0)\par
00056     \{\par
00057         write_state = write(output_fd, argv[0], strlen(argv[0])); {\cf20 // \'C8\'B7\'B1\'A3\'D0\'D0\'C4\'A9\'CE\'DE\'B6\'E0\'D3\'E0\'B5\'C4\'BF\'D5\'B8\'F1}\par
00058         {\cf19 if} (write_state == -1)\par
00059             {\cf19 throw} std::exception();\par
00060         {\cf19 for} ({\cf18 int} i = 1; i < argc; ++i)\par
00061         \{\par
00062             write_state = write(output_fd, {\cf22 " "}, 1);   {\cf20 // \'B4\'F2\'D3\'A1\'BF\'D5\'B8\'F1}\par
00063             {\cf19 if} (write_state == -1)\par
00064                 {\cf19 throw} std::exception();\par
00065 \par
00066             write_state = write(output_fd, argv[i], strlen(argv[i])); {\cf20 // \'B4\'F2\'D3\'A1\'B2\'CE\'CA\'FD}\par
00067             {\cf19 if} (write_state == -1)\par
00068                 {\cf19 throw} std::exception();\par
00069         \}\par
00070     \}\par
00071     \par
00072     write_state = write(output_fd, {\cf22 "\\n"}, 1);   {\cf20 // \'B4\'F2\'D3\'A1\'BB\'BB\'D0\'D0\'B7\'FB}\par
00073     {\cf19 if} (write_state == -1)\par
00074         {\cf19 throw} std::exception();\par
00075 \}\par
00076 \par
00077 ProcessManager::ProcessManager({\cf20 /* args */})\par
00078 \{\par
00079     {\cf18 unsigned} {\cf18 int} job_id[MAX_PROCESS_NUMBER];\par
00080     {\cf19 for} ({\cf18 unsigned} {\cf18 int} i = 1; i <= MAX_PROCESS_NUMBER; ++i)\par
00081         job_id[i-1] = i;        {\cf20 // \'B3\'F5\'CA\'BC\'BB\'AF\'B9\'A4\'D7\'F7\'BD\'F8\'B3\'CCid\'B3\'D8}\par
00082     job_heap = {\cf17 new} BinaryHeap<unsigned int>(job_id, MAX_PROCESS_NUMBER);\par
00083     \par
00084 {\cf21     #ifdef _DEBUG_}\par
00085     {\cf19 for} ({\cf18 unsigned} {\cf18 int} i = 1; i <= MAX_PROCESS_NUMBER; ++i)\par
00086         printf({\cf22 "heap: %u\\n"}, job_heap->extract());\par
00087 {\cf21     #endif}\par
00088 \}\par
00089 \par
00090 ProcessManager::~ProcessManager()\par
00091 \{\par
00092     {\cf17 delete} job_heap;\par
00093 \}\par
00094 \par
00095 {\cf18 void} ProcessManager::PrintJobList({\cf18 int} output_fd){\cf17  const}\par
00096 {\cf17 }\{\par
00097     {\cf19 for} ({\cf17 auto} job : jobs)\par
00098     \{\par
00099         job.PrintJob(output_fd);\par
00100     \}\par
00101 \}\par
00102 \par
00103 {\cf18 void} ProcessManager::PrintJobListDone({\cf18 int} output_fd)\par
00104 \{\par
00105     job_unit *pre_job = {\cf17 nullptr};\par
00106     \par
00107     {\cf19 for} ({\cf17 auto} job : jobs)\par
00108     \{\par
00109 {\cf21         #ifdef _DEBUG_}\par
00110         printf({\cf22 "Id: %u pid: %d\\n"}, job.id, job.pid);\par
00111 {\cf21         #endif}\par
00112         {\cf19 if} (pre_job != {\cf17 nullptr})     {\cf20 // \'C4\'DA\'B4\'E6\'BB\'D8\'CA\'D5}\par
00113         \{\par
00114             this->JobRemove(pre_job);\par
00115             pre_job = {\cf17 nullptr};\par
00116         \}\par
00117 \par
00118         {\cf20 /* waitpid \'D4\'DAWNOHANG\'B2\'CE\'CA\'FD\'CF\'C2 \'C8\'E7\'B9\'FB\'D7\'D3\'BD\'F8\'B3\'CC\'D2\'D1\'BE\'AD\'BD\'E1\'CA\'F8\'A3\'AC\'D4\'F2\'B7\'B5\'BB\'D8\'D7\'D3\'BD\'F8\'B3\'CC\'B5\'C4pid\'A3\'BB}\par
00119 {\cf20         \'C8\'E7\'B9\'FB\'D7\'D3\'BD\'F8\'B3\'CC\'BB\'B9\'CE\'B4\'BD\'E1\'CA\'F8\'A3\'AC\'D4\'F2\'B7\'B5\'BB\'D80\'A3\'BB \'C8\'E7\'B9\'FB\'B7\'A2\'C9\'FA\'B4\'ED\'CE\'F3\'A3\'AC\'D4\'F2\'B7\'B5\'BB\'D8-1 */}\par
00120         {\cf18 int} stat_loc, wait_pid = waitpid(job.pid, &stat_loc, WNOHANG);\par
00121 {\cf21         #ifdef _DEBUG_}\par
00122         printf({\cf22 "id: %u pid: %d wait: %d stat: %d\\n"}, job.id, job.pid, wait_pid, stat_loc);\par
00123 {\cf21         #endif}\par
00124         {\cf19 if} (wait_pid == job.pid) {\cf20 // \'D2\'D1\'BE\'AD\'BD\'E1\'CA\'F8}\par
00125         \{\par
00126             job.state = Done;\par
00127             job.PrintJob();\par
00128             pre_job = &job;\par
00129         \}\par
00130         {\cf19 else} {\cf19 if} (wait_pid < 0)  {\cf20 // \'B7\'A2\'C9\'FA\'B4\'ED\'CE\'F3}\par
00131         \{\par
00132             {\cf19 throw} std::exception();\par
00133         \}\par
00134     \}\par
00135 \par
00136     {\cf19 if} (pre_job != {\cf17 nullptr})     {\cf20 // \'C4\'DA\'B4\'E6\'BB\'D8\'CA\'D5}\par
00137         this->JobRemove(pre_job);\par
00138 \}\par
00139 \par
00140 {\cf18 unsigned} {\cf18 int} ProcessManager::JobInsert({\cf18 int} pid, job_state state, {\cf18 int} argc, {\cf18 char} *argv[])\par
00141 \{\par
00142     {\cf19 try}\par
00143     \{\par
00144         {\cf18 unsigned} {\cf18 int} {\cf18 id} = job_heap->extract();  {\cf20 // \'B4\'D3id\'B3\'D8\'C8\'A1\'B3\'F6\'D7\'EE\'D0\'A1\'B5\'C4id}\par
00145         job_unit* newJob = {\cf17 new} job_unit({\cf18 id}, pid, state, argc, argv);\par
00146 {\cf21         #ifdef _DEBUG_}\par
00147         newJob->PrintJob();\par
00148 {\cf21         #endif}\par
00149         jobs.emplace(*newJob);   {\cf20 // \'BC\'D3\'C8\'EB\'BC\'AF\'BA\'CF}\par
00150         {\cf19 return} id;\par
00151     \}\par
00152     {\cf19 catch} (std::exception& e)\par
00153     \{\par
00154         std::cerr << e.what() << {\cf23 '\\n'};\par
00155         {\cf19 return} 0;\par
00156     \}\par
00157 \}\par
00158 \par
00159 {\cf18 void} ProcessManager::JobRemove(job_unit * job)\par
00160 \{\par
00161     assert(job->id > 0);\par
00162     job_heap->insert(job->id);  {\cf20 // \'BD\'ABid\'B7\'C5\'BB\'D8id\'B3\'D8\'D6\'D0}\par
00163     jobs.erase(*job);            {\cf20 // \'D2\'C6\'B3\'F6\'BC\'AF\'BA\'CF}\par
00164     {\cf20 // delete job;  // \'D2\'F2\'CE\'AA\'D4\'DAset\'C0\'EF\'C3\'E6\'B4\'E6\'B7\'C5\'B5\'C4\'B2\'BB\'CA\'C7\'D6\'B8\'D5\'EB\'C1\'CB\'A3\'AC\'D4\'DAerase set\'B5\'C4\'CA\'B1\'BA\'F2\'D2\'D1\'BE\'AD\'CD\'EA\'B3\'C9\'C1\'CB\'CE\'F6\'B9\'B9}\par
00165     {\cf19 return};\par
00166 \}\par
00167 \par
00168 {\cf18 void} ProcessManager::JobRemove(std::set<job_unit>::iterator& job)\par
00169 \{\par
00170     job_heap->insert(job->id);  {\cf20 // \'BD\'ABid\'B7\'C5\'BB\'D8id\'B3\'D8\'D6\'D0}\par
00171     jobs.erase(*job);            {\cf20 // \'D2\'C6\'B3\'F6\'BC\'AF\'BA\'CF}\par
00172     {\cf20 // delete job;  // \'D2\'F2\'CE\'AA\'D4\'DAset\'C0\'EF\'C3\'E6\'B4\'E6\'B7\'C5\'B5\'C4\'B2\'BB\'CA\'C7\'D6\'B8\'D5\'EB\'C1\'CB\'A3\'AC\'D4\'DAerase set\'B5\'C4\'CA\'B1\'BA\'F2\'D2\'D1\'BE\'AD\'CD\'EA\'B3\'C9\'C1\'CB\'CE\'F6\'B9\'B9}\par
00173     {\cf19 return};\par
00174 \}\par
00175 \par
00176 {\cf18 int} ProcessManager::ForeGround({\cf18 unsigned} {\cf18 int} jobid)\par
00177 \{\par
00178     {\cf19 for} ({\cf17 auto} job : jobs)\par
00179     \{\par
00180         {\cf19 if} (job.id == jobid)\par
00181         \{\par
00182             Console::child_process_id = job.pid;\par
00183             setpgid(job.pid, getgid());\par
00184 \par
00185             {\cf20 // \'BD\'AB\'C7\'B0\'B6\'CB\'C9\'E8\'D6\'C3\'CE\'AA\'D7\'D3\'BD\'F8\'B3\'CC}\par
00186             tcsetpgrp(STDIN_FILENO, job.pid);\par
00187             tcsetpgrp(STDOUT_FILENO, job.pid);\par
00188             tcsetpgrp(STDERR_FILENO, job.pid);\par
00189             job.state = Running;\par
00190 \par
00191             kill(job.pid, SIGCONT);\par
00192             {\cf19 while}(waitpid(Console::child_process_id, NULL, WNOHANG) == 0 && Console::child_process_id >= 0);\par
00193             Console::child_process_id = -1;\par
00194 \par
00195             JobRemove(&job);\par
00196 \par
00197             {\cf19 return} jobid;\par
00198         \}\par
00199     \}\par
00200 \par
00201     {\cf19 return} -1;\par
00202 \}\par
00203 \par
00204 \par
00205 {\cf18 int} ProcessManager::BackGround({\cf18 unsigned} {\cf18 int} jobid)\par
00206 \{\par
00207     {\cf19 for} ({\cf17 auto} job : jobs)\par
00208     \{\par
00209         {\cf19 if} (job.id == jobid)\par
00210         \{\par
00211             {\cf19 if} (job.state == Running)\par
00212                 {\cf19 return} 0;\par
00213             \par
00214             job.state = Running;\par
00215 \par
00216             kill(job.pid, SIGCONT);\par
00217             \par
00218             {\cf19 return} jobid;\par
00219         \}\par
00220     \}\par
00221 \par
00222     {\cf19 return} -1;\par
00223 \}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'CB\'F7\'D2\'FD\par 
\pard\plain 
{\tc \v \'CB\'F7\'D2\'FD}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
